import type { RunTaskCommandOutput } from '@aws-sdk/client-ecs';
import {
	ECSClient,
	ListClustersCommand,
	ListTagsForResourceCommand,
	ListTaskDefinitionsCommand,
	RunTaskCommand,
} from '@aws-sdk/client-ecs';
import type { SecretListEntry } from '@aws-sdk/client-secrets-manager';
import {
	GetSecretValueCommand,
	ListSecretsCommand,
	SecretsManagerClient,
} from '@aws-sdk/client-secrets-manager';
import { GetParameterCommand, SSMClient } from '@aws-sdk/client-ssm';
import { awsClientConfig } from 'common/aws';
import { getCentralElkLink } from 'common/logs';
import type { DatabaseConfig } from 'common/src/database-setup';
import terminalLink from 'terminal-link';

interface EcsResourceTags {
	arn: string;
	[key: string]: string;
}

export const getSsmClient = () => {
	return new SSMClient(awsClientConfig('DEV'));
};

export const getSecretsManagerClient = () => {
	return new SecretsManagerClient(awsClientConfig('DEV'));
};

export const getRdsConfig = async (
	client: SecretsManagerClient,
	stage: string,
): Promise<DatabaseConfig> => {
	const listRequest = new ListSecretsCommand({
		Filters: [
			{
				Key: 'description',

				// hopefully AWS CDK doesn't change the format of this string!
				Values: [
					`Generated by the CDK for stack: deploy-${stage}-service-catalogue`,
				],
			},
		],
	});
	const { SecretList } = await client.send(listRequest);

	if (SecretList?.length !== 1) {
		throw new Error(
			`Unable to find single secrets manager secret for ${stage}`,
		);
	}

	const secret: SecretListEntry = SecretList[0]!;

	const secretArn = secret.ARN!;

	const getRequest = new GetSecretValueCommand({ SecretId: secretArn });
	const { SecretString } = await client.send(getRequest);

	if (!SecretString) {
		throw new Error(`Unable to parse secret for ${stage} as JSON`);
	}

	// This is the shape of the secret in AWS Secrets Manager
	interface AwsSecretJson {
		host: string;
		username: string;
		password: string;
	}

	const { host, username, password } = JSON.parse(
		SecretString,
	) as AwsSecretJson;

	return {
		hostname: host,
		user: username,
		password,
	};
};

const getSsmParameter = async (client: SSMClient, path: string) => {
	const command = new GetParameterCommand({ Name: path });
	const response = await client.send(command);

	if (response.Parameter?.Value === undefined) {
		throw new Error(`SSM Parameter ${path} not found, or has no value`);
	}

	return response.Parameter.Value;
};

export const getPrivateSubnets = async (
	client: SSMClient,
): Promise<string[]> => {
	const value = await getSsmParameter(
		client,
		'/account/vpc/primary/subnets/private',
	);
	return value.split(',');
};

export const getSecurityGroup = async (
	client: SSMClient,
	stack: string,
	stage: string,
	app: string,
): Promise<string> => {
	return await getSsmParameter(
		client,

		// This SSM Parameter has been created in the Service Catalogue stack
		`/${stage}/${stack}/${app}/postgres-access-security-group`,
	);
};

export const getRiffRaffDBSecurityGroup = async (
	client: SSMClient,
	stage: string,
): Promise<string> => {
	return await getSsmParameter(
		client,
		// This SSM Parameter has been created in the Riff Raff DB stack
		`/${stage}/deploy/riff-raff/external-database-access-security-group`,
	);
};

export const getEcsClient = () => {
	return new ECSClient(awsClientConfig('DEV'));
};

const listResourceTags = async (
	client: ECSClient,
	resourceArn: string,
): Promise<Record<string, string>> => {
	const response = await client.send(
		new ListTagsForResourceCommand({ resourceArn }),
	);

	const tags = response.tags ?? [];

	/*
	Flatten the tags.

	From:
	[{key: 'Stack', value: 'deploy' }, { key: 'Stage', value: 'CODE' }]

	To:
	{Stack: 'deploy', Stage: 'CODE'}
	 */
	return tags.reduce<Record<string, string>>((acc, { key, value }) => {
		// This should never happen, but AWS types these as optional, so we need to check
		if (!(key && value)) {
			return acc;
		}

		return {
			...acc,
			[key]: value,
		};
	}, {});
};

const listAllTasks: (client: ECSClient) => Promise<EcsResourceTags[]> = async (
	client: ECSClient,
) => {
	const response = await client.send(new ListTaskDefinitionsCommand({}));
	const taskDefinitionArns = response.taskDefinitionArns ?? [];

	return Promise.all(
		taskDefinitionArns.map<Promise<EcsResourceTags>>(async (taskArn) => {
			return {
				arn: taskArn,
				...(await listResourceTags(client, taskArn)),
			};
		}),
	);
};

export const listTasks = async (
	client: ECSClient,
	stack: string,
	stage: string,
	app: string,
): Promise<EcsResourceTags[]> => {
	const tasks = await listAllTasks(client);
	return tasks.filter((taskDescription) => {
		return (
			taskDescription['Stack'] === stack &&
			taskDescription['Stage'] === stage &&
			taskDescription['App'] === app
		);
	});
};

const listClusters = async (client: ECSClient) => {
	const response = await client.send(new ListClustersCommand({}));
	const clusterArns = response.clusterArns ?? [];

	return Promise.all(
		clusterArns.map<Promise<EcsResourceTags>>(async (clusterArn) => {
			return {
				arn: clusterArn,
				...(await listResourceTags(client, clusterArn)),
			};
		}),
	);
};

const findCluster = async (
	client: ECSClient,
	stack: string,
	stage: string,
	app: string,
) => {
	const clusters = await listClusters(client);
	return clusters.find((clusterDescription) => {
		return (
			clusterDescription['Stack'] === stack &&
			clusterDescription['Stage'] === stage &&
			clusterDescription['App'] === app
		);
	});
};

const runTaskByArn = async (
	ecsClient: ECSClient,
	taskName: string,
	taskArn: string,
	clusterArn: string,
	privateSubnets: string[],
	securityGroups: string[],
	envVars?: Record<string, string>,
): Promise<RunTaskCommandOutput> => {
	const command = new RunTaskCommand({
		cluster: clusterArn,
		taskDefinition: taskArn,
		networkConfiguration: {
			awsvpcConfiguration: {
				subnets: privateSubnets,
				securityGroups: securityGroups,
			},
		},
		propagateTags: 'TASK_DEFINITION',
		capacityProviderStrategy: [{ capacityProvider: 'FARGATE' }],
		...(envVars && {
			overrides: {
				containerOverrides: [
					{
						name: `CloudquerySource-${taskName}Container`, // This matches the AWS CDK auto-generated name
						environment: Object.entries(envVars).map(([key, value]) => ({
							name: key,
							value: value,
						})),
					},
				],
			},
		}),
	});

	return ecsClient.send(command);
};

export const runOneTask = async (
	ecsClient: ECSClient,
	ssmClient: SSMClient,
	stack: string,
	stage: string,
	app: string,
	name: string,
	envVars?: Record<string, string>,
): Promise<void> => {
	const tasks = (await listTasks(ecsClient, stack, stage, app)).filter(
		(taskDescription) => taskDescription['Name'] === name,
	);

	// We expect to find exactly one task matching the name
	if (tasks.length !== 1) {
		throw new Error(
			`${tasks.length} task(s) found matching Stack=${stack} Stage=${stage} App=${app} Name=${name}`,
		);
	}

	const task = tasks.at(0)!;

	const cluster = await findCluster(ecsClient, stack, stage, app);

	if (cluster === undefined) {
		throw new Error(
			`Could not find cluster for Stack=${stack} Stage=${stage} App=${app}`,
		);
	}

	const privateSubnets = await getPrivateSubnets(ssmClient);
	const securityGroup = await getSecurityGroup(ssmClient, stack, stage, app);

	const securityGroups = [
		securityGroup,
		...(task.arn.includes('RiffRaffData')
			? [await getRiffRaffDBSecurityGroup(ssmClient, stage)]
			: []),
	];

	const response = await runTaskByArn(
		ecsClient,
		name,
		task.arn,
		cluster.arn,
		privateSubnets,
		securityGroups,
		envVars,
	);

	const taskArns: string[] = response.tasks
		?.map((t) => t.taskArn)
		.filter(Boolean) as string[];

	taskArns.map((taskArn) => printLogsUrl(app, stage, taskArn));
};

export const runAllTasks = async (
	ecsClient: ECSClient,
	ssmClient: SSMClient,
	stack: string,
	stage: string,
	app: string,
): Promise<void> => {
	const tasks = await listTasks(ecsClient, stack, stage, app);

	if (tasks.length === 0) {
		throw new Error(
			`No task found matching Stack=${stack} Stage=${stage} App=${app}`,
		);
	}

	const cluster = await findCluster(ecsClient, stack, stage, app);

	if (cluster === undefined) {
		throw new Error(
			`Could not find cluster for Stack=${stack} Stage=${stage} App=${app}`,
		);
	}

	const privateSubnets = await getPrivateSubnets(ssmClient);
	const securityGroup = await getSecurityGroup(ssmClient, stack, stage, app);
	const riffRaffDBSecurityGroup = await getRiffRaffDBSecurityGroup(
		ssmClient,
		stage,
	);

	const result = await Promise.all(
		tasks.map((task) => {
			const name = task['Name'];

			if (!name) {
				throw new Error(`Task doesn't have a name. Task ARN: ${task.arn}`);
			}

			return runTaskByArn(
				ecsClient,
				name,
				task.arn,
				cluster.arn,
				privateSubnets,
				[
					securityGroup,
					...(task.arn.includes('RiffRaffData')
						? [riffRaffDBSecurityGroup]
						: []),
				],
			);
		}),
	);

	const taskArns = result
		.flatMap((r) => r.tasks?.map((t) => t.taskArn))
		.filter(Boolean) as string[];

	taskArns.map((taskArn) => printLogsUrl(app, stage, taskArn));
};

function printLogsUrl(app: string, stage: string, taskDefinition: string) {
	const url = getCentralElkLink({
		filters: {
			app,
			stage,
			ecs_task_arn: taskDefinition,
		},
		columns: ['table', 'resources', 'errors', 'client', 'message', 'error'],
	});

	if (terminalLink.isSupported) {
		const link = terminalLink(
			'âœ… View logs (Note: ECS takes a few seconds to start)',
			url,
		);
		console.log(link);
	} else {
		console.log(url);
	}
}
