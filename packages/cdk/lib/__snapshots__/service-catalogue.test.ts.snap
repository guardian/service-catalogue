// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`The ServiceCatalogue stack matches the snapshot 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuSubnetListParameter",
      "GuVpcParameter",
      "GuSecurityGroup",
      "GuSecurityGroup",
      "GuLoggingStreamNameParameter",
      "GuStringParameter",
      "GuStringParameter",
      "GuDistributionBucketParameter",
      "GuScheduledLambda",
      "GuAnghammaradTopicParameter",
      "GuLambdaFunction",
      "GuScheduledLambda",
      "GuLambdaErrorPercentageAlarm",
      "GuLambdaFunction",
      "GuScheduledLambda",
      "GuLambdaFunction",
      "GuLambdaFunction",
      "GuLambdaFunction",
      "GuLambdaErrorPercentageAlarm",
      "GuScheduledLambda",
      "GuLambdaErrorPercentageAlarm",
    ],
    "gu:cdk:version": "TEST",
  },
  "Parameters": {
    "ActionsStaticSiteBucketArnParam": {
      "Default": "/INFRA/deploy/cloudquery/actions-static-site-bucket-arn",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "AnghammaradSnsArn": {
      "Default": "/account/services/anghammarad.topic.arn",
      "Description": "SSM parameter containing the ARN of the Anghammarad SNS topic",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "PrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "SsmParameterValuePRODdeployriffraffexternaldatabaseaccesssecuritygroupC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/PROD/deploy/riff-raff/external-database-access-security-group",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/account/services/artifact.bucket",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "packagesBucketNameParam": {
      "Default": "/PROD/deploy/amigo/amigo.data.bucket",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "CloudquerySourceAmigoBakePackagesScheduledEventRule3FDBCEB5": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionF04CFC72",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleB18B35DF",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionCloudquerySourceAmigoBakePackagesFirelensLogGroupA4EF0BA2": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleB18B35DF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleDefaultPolicy145F68FA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionF04CFC72",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAmigoBakePackagesE2817516",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleDefaultPolicy145F68FA",
        "Roles": [
          {
            "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleB18B35DF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleDefaultPolicyBD5A8255": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAmigoBakePackagesTaskDefinitionCloudquerySourceAmigoBakePackagesFirelensLogGroupA4EF0BA2",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleDefaultPolicyBD5A8255",
        "Roles": [
          {
            "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionF04CFC72": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              {
                "Fn::Join": [
                  "",
                  [
                    "printf 'kind: source
spec:
  name: image-packages
  registry: github
  path: guardian/image-packages
  version: v1.0.1
  destinations:
    - postgresql
  tables:
    - amigo_bake_packages
  spec:
    base_images_table: amigo-PROD-base-images
    recipes_table: amigo-PROD-recipes
    bakes_table: amigo-PROD-bakes
    bucket: ",
                    {
                      "Ref": "packagesBucketNameParam",
                    },
                    "
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
                  ],
                ],
              },
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AmigoBakePackagesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AmigoBakePackages",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AmigoBakePackagesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AmigoBakePackagesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('amigo_bake_packages', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AmigoBakePackages",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AmigoBakePackagesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AmigoBakePackages",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionCloudquerySourceAmigoBakePackagesFirelensLogGroupA4EF0BA2",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AmigoBakePackagesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33",
            "Arn",
          ],
        },
        "Family": "AmigoBakePackages",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAmigoBakePackagesE2817516",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsCostExplorerScheduledEventRule85BE97F8": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRole71FB003A",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "export START_DATE=\${START_DATE:-$(date -d "@$(($(date +%s) - 172800))" "+%Y-%m-%d")};export END_DATE=\${END_DATE:-$(date -d "@$(($(date +%s) - 86400))" "+%Y-%m-%d")};printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_costexplorer_cost_custom
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
    use_paid_apis: true
    table_options:
      aws_costexplorer_cost_custom:
        get_cost_and_usage:
          - TimePeriod:
              Start: \${START_DATE}
              End: \${END_DATE}
            Granularity: DAILY
            GroupBy:
              - Type: TAG
                Key: App
              - Type: TAG
                Key: Stack
            Metrics:
              - NetUnblendedCost
              - UnblendedCost
              - NetAmortizedCost
              - AmortizedCost
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsCostExplorerAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsCostExplorer",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsCostExplorerContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsCostExplorerAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_costexplorer_cost_custom', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsCostExplorer",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsCostExplorerPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsCostExplorer",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsCostExplorerTaskDefinitionCloudquerySourceAwsCostExplorerFirelensLogGroup0D0D76FF",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsCostExplorerFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D",
            "Arn",
          ],
        },
        "Family": "AwsCostExplorer",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsCostExplorer96B6E676",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionCloudquerySourceAwsCostExplorerFirelensLogGroup0D0D76FF": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRole71FB003A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRoleDefaultPolicy6D27ED91": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsCostExplorer96B6E676",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRoleDefaultPolicy6D27ED91",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRole71FB003A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleDefaultPolicyEBFC45ED": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsCostExplorerTaskDefinitionCloudquerySourceAwsCostExplorerFirelensLogGroup0D0D76FF",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleDefaultPolicyEBFC45ED",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountScheduledEventRuleD23A8E56": {
      "Properties": {
        "ScheduleExpression": "cron(0 22 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRole84A3EC34",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_accessanalyzer_analyzer_archive_rules
    - aws_accessanalyzer_analyzer_findings
    - aws_accessanalyzer_analyzer_findings_v2
    - aws_accessanalyzer_analyzers
    - aws_guardduty_detector_filters
    - aws_guardduty_detector_findings
    - aws_guardduty_detector_intel_sets
    - aws_guardduty_detector_ip_sets
    - aws_guardduty_detector_members
    - aws_guardduty_detector_publishing_destinations
    - aws_guardduty_detectors
    - aws_inspector2_findings
    - aws_securityhub_enabled_standards
    - aws_securityhub_findings
    - aws_securityhub_hubs
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    concurrency: 2000
    accounts:
      - id: cq-for-000000000015
        role_arn: arn:aws:iam::000000000015:role/cloudquery-access
    table_options:
      aws_securityhub_findings:
        get_findings:
          - filters:
              record_state:
                - comparison: EQUALS
                  value: ACTIVE
              compliance_status:
                - comparison: NOT_EQUALS
                  value: PASSED
              product_name:
                - comparison: EQUALS
                  value: GuardDuty
                - comparison: EQUALS
                  value: Inspector
                - comparison: EQUALS
                  value: Security Hub
              severity_label:
                - comparison: NOT_EQUALS
                  value: MEDIUM
      aws_inspector2_findings:
        list_findings:
          - filter_criteria:
              finding_status:
                - comparison: EQUALS
                  value: ACTIVE
              severity:
                - comparison: EQUALS
                  value: CRITICAL
                - comparison: EQUALS
                  value: HIGH
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsDelegatedToSecurityAccountAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsDelegatedToSecurityAccount",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_accessanalyzer_analyzer_archive_rules', 86400000),('aws_accessanalyzer_analyzer_findings', 86400000),('aws_accessanalyzer_analyzer_findings_v2', 86400000),('aws_accessanalyzer_analyzers', 86400000),('aws_guardduty_detector_filters', 86400000),('aws_guardduty_detector_findings', 86400000),('aws_guardduty_detector_intel_sets', 86400000),('aws_guardduty_detector_ip_sets', 86400000),('aws_guardduty_detector_members', 86400000),('aws_guardduty_detector_publishing_destinations', 86400000),('aws_guardduty_detectors', 86400000),('aws_inspector2_findings', 86400000),('aws_securityhub_enabled_standards', 86400000),('aws_securityhub_findings', 86400000),('aws_securityhub_hubs', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsDelegatedToSecurityAccount",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsDelegatedToSecurityAccount",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionCloudquerySourceAwsDelegatedToSecurityAccountFirelensLogGroupE468B6F3",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0",
            "Arn",
          ],
        },
        "Family": "AwsDelegatedToSecurityAccount",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsDelegatedToSecurityAccountD81B6FBC",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionCloudquerySourceAwsDelegatedToSecurityAccountFirelensLogGroupE468B6F3": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRole84A3EC34": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRoleDefaultPolicy33EB3CCB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsDelegatedToSecurityAccountD81B6FBC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRoleDefaultPolicy33EB3CCB",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRole84A3EC34",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRoleDefaultPolicy36910251": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionCloudquerySourceAwsDelegatedToSecurityAccountFirelensLogGroupE468B6F3",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRoleDefaultPolicy36910251",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsLambdaScheduledEventRuleC1529FB1": {
      "Properties": {
        "ScheduleExpression": "cron(10 1 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsLambdaTaskDefinitionD9609861",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsLambdaTaskDefinitionEventsRole4D97B167",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionCloudquerySourceAwsLambdaFirelensLogGroupBB74129A": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionD9609861": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_lambda_function_aliases
    - aws_lambda_function_concurrency_configs
    - aws_lambda_function_event_invoke_configs
    - aws_lambda_function_event_source_mappings
    - aws_lambda_function_url_configs
    - aws_lambda_function_versions
    - aws_lambda_functions
    - aws_lambda_layer_version_policies
    - aws_lambda_layer_versions
    - aws_lambda_layers
    - aws_lambda_runtimes
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsLambdaAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsLambda",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsLambdaContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsLambdaAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_lambda_function_aliases', 86400000),('aws_lambda_function_concurrency_configs', 86400000),('aws_lambda_function_event_invoke_configs', 86400000),('aws_lambda_function_event_source_mappings', 86400000),('aws_lambda_function_url_configs', 86400000),('aws_lambda_function_versions', 86400000),('aws_lambda_functions', 86400000),('aws_lambda_layer_version_policies', 86400000),('aws_lambda_layer_versions', 86400000),('aws_lambda_layers', 86400000),('aws_lambda_runtimes', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsLambda",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsLambdaPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsLambda",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsLambdaTaskDefinitionCloudquerySourceAwsLambdaFirelensLogGroupBB74129A",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsLambdaFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9",
            "Arn",
          ],
        },
        "Family": "AwsLambda",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsLambda2F5ACE1C",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionEventsRole4D97B167": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionEventsRoleDefaultPolicyCA44BFE7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsLambdaTaskDefinitionD9609861",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsLambda2F5ACE1C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsLambdaTaskDefinitionEventsRoleDefaultPolicyCA44BFE7",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsLambdaTaskDefinitionEventsRole4D97B167",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionExecutionRoleDefaultPolicy8F1E97F4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsLambdaTaskDefinitionCloudquerySourceAwsLambdaFirelensLogGroupBB74129A",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsLambdaTaskDefinitionExecutionRoleDefaultPolicy8F1E97F4",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsListOrgsScheduledEventRuleE0997086": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsListOrgsTaskDefinitionEventsRole2B20765E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_organization_resource_policies
    - aws_organizations
    - aws_organizations_account_parents
    - aws_organizations_accounts
    - aws_organizations_delegated_administrators
    - aws_organizations_delegated_services
    - aws_organizations_organizational_unit_parents
    - aws_organizations_organizational_units
    - aws_organizations_policies
    - aws_organizations_roots
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    accounts:
      - id: cq-for-000000000018
        role_arn: arn:aws:iam::000000000018:role/cloudquery-access
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsListOrgsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsListOrgs",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsListOrgsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsListOrgsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_organization_resource_policies', 86400000),('aws_organizations', 86400000),('aws_organizations_account_parents', 86400000),('aws_organizations_accounts', 86400000),('aws_organizations_delegated_administrators', 86400000),('aws_organizations_delegated_services', 86400000),('aws_organizations_organizational_unit_parents', 86400000),('aws_organizations_organizational_units', 86400000),('aws_organizations_policies', 86400000),('aws_organizations_roots', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsListOrgs",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsListOrgsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsListOrgs",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsListOrgsTaskDefinitionCloudquerySourceAwsListOrgsFirelensLogGroup55343A0C",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsListOrgsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631",
            "Arn",
          ],
        },
        "Family": "AwsListOrgs",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsListOrgs456430DC",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionCloudquerySourceAwsListOrgsFirelensLogGroup55343A0C": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionEventsRole2B20765E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionEventsRoleDefaultPolicy80C259B3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsListOrgs456430DC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsListOrgsTaskDefinitionEventsRoleDefaultPolicy80C259B3",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsListOrgsTaskDefinitionEventsRole2B20765E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRoleDefaultPolicy1D72FE55": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsListOrgsTaskDefinitionCloudquerySourceAwsListOrgsFirelensLogGroup55343A0C",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRoleDefaultPolicy1D72FE55",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsScheduledEventRuleDF674875": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleF9568321",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_autoscaling_groups
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideAutoScalingGroupsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideAutoScalingGroups",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_autoscaling_groups', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideAutoScalingGroups",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideAutoScalingGroups",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionCloudquerySourceAwsOrgWideAutoScalingGroupsFirelensLogGroup7749AA41",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideAutoScalingGroups",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideAutoScalingGroups86ECCF9A",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionCloudquerySourceAwsOrgWideAutoScalingGroupsFirelensLogGroup7749AA41": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleDefaultPolicy1404945D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideAutoScalingGroups86ECCF9A",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleDefaultPolicy1404945D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleF9568321",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleF9568321": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleDefaultPolicy2A62C527": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionCloudquerySourceAwsOrgWideAutoScalingGroupsFirelensLogGroup7749AA41",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleDefaultPolicy2A62C527",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideBackupScheduledEventRuleE834008B": {
      "Properties": {
        "ScheduleExpression": "cron(0 7 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRole34C9CC1F",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_backup_protected_resources
    - aws_backup_vault_recovery_points
    - aws_backup_vaults
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideBackupAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideBackup",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideBackupContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideBackupAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_backup_protected_resources', 86400000),('aws_backup_vault_recovery_points', 86400000),('aws_backup_vaults', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideBackup",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideBackupPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideBackup",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinitionCloudquerySourceAwsOrgWideBackupFirelensLogGroup336D3581",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideBackupFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideBackup",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideBackup38D22D6C",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionCloudquerySourceAwsOrgWideBackupFirelensLogGroup336D3581": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRole34C9CC1F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRoleDefaultPolicyFA9FAC00": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideBackup38D22D6C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRoleDefaultPolicyFA9FAC00",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRole34C9CC1F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRoleDefaultPolicy51C80930": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideBackupTaskDefinitionCloudquerySourceAwsOrgWideBackupFirelensLogGroup336D3581",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRoleDefaultPolicy51C80930",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCertificatesScheduledEventRule7D3B1FA3": {
      "Properties": {
        "ScheduleExpression": "cron(0 1 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRole8BB088B7",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionCloudquerySourceAwsOrgWideCertificatesFirelensLogGroup91D2F11E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_acm_certificates
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideCertificatesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCertificates",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCertificatesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCertificatesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_acm_certificates', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCertificates",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCertificatesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideCertificates",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionCloudquerySourceAwsOrgWideCertificatesFirelensLogGroup91D2F11E",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCertificatesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideCertificates",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideCertificatesC9D1B629",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRole8BB088B7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRoleDefaultPolicyB2781632": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideCertificatesC9D1B629",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRoleDefaultPolicyB2781632",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRole8BB088B7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleDefaultPolicyADA104C9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionCloudquerySourceAwsOrgWideCertificatesFirelensLogGroup91D2F11E",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleDefaultPolicyADA104C9",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudFormationScheduledEventRule4E86DEC8": {
      "Properties": {
        "ScheduleExpression": "rate(3 hours)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRole2327379D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionCloudquerySourceAwsOrgWideCloudFormationFirelensLogGroup275B0945": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRole2327379D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRoleDefaultPolicy21B918CD": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideCloudFormation8B822CFC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRoleDefaultPolicy21B918CD",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRole2327379D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRoleDefaultPolicy688A215A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionCloudquerySourceAwsOrgWideCloudFormationFirelensLogGroup275B0945",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRoleDefaultPolicy688A215A",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_cloudformation_stack_instance_resource_drifts
    - aws_cloudformation_stack_instance_summaries
    - aws_cloudformation_stack_resources
    - aws_cloudformation_stack_set_operation_results
    - aws_cloudformation_stack_set_operations
    - aws_cloudformation_stack_sets
    - aws_cloudformation_stack_templates
    - aws_cloudformation_stacks
    - aws_cloudformation_template_summaries
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideCloudFormationAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudFormation",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudFormationContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudFormationAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_cloudformation_stack_instance_resource_drifts', 10800000),('aws_cloudformation_stack_instance_summaries', 10800000),('aws_cloudformation_stack_resources', 10800000),('aws_cloudformation_stack_set_operation_results', 10800000),('aws_cloudformation_stack_set_operations', 10800000),('aws_cloudformation_stack_sets', 10800000),('aws_cloudformation_stack_templates', 10800000),('aws_cloudformation_stacks', 10800000),('aws_cloudformation_template_summaries', 10800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 10800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudFormation",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudFormationPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideCloudFormation",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionCloudquerySourceAwsOrgWideCloudFormationFirelensLogGroup275B0945",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudFormationFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideCloudFormation",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideCloudFormation8B822CFC",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsScheduledEventRule443F1BD5": {
      "Properties": {
        "ScheduleExpression": "rate(30 minutes)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRole23623738",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_cloudwatch_alarms
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideCloudwatchAlarmsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudwatchAlarms",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_cloudwatch_alarms', 1800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 1800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudwatchAlarms",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideCloudwatchAlarms",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionCloudquerySourceAwsOrgWideCloudwatchAlarmsFirelensLogGroup953FDC49",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideCloudwatchAlarms",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideCloudwatchAlarms8934DD5C",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionCloudquerySourceAwsOrgWideCloudwatchAlarmsFirelensLogGroup953FDC49": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRole23623738": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRoleDefaultPolicyAC0B7FE1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideCloudwatchAlarms8934DD5C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRoleDefaultPolicyAC0B7FE1",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRole23623738",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRoleDefaultPolicy6B41E6E0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionCloudquerySourceAwsOrgWideCloudwatchAlarmsFirelensLogGroup953FDC49",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRoleDefaultPolicy6B41E6E0",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideDynamoDBScheduledEventRule3C36042D": {
      "Properties": {
        "ScheduleExpression": "cron(0 5 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleA777C8FA",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_dynamodb_backups
    - aws_dynamodb_exports
    - aws_dynamodb_global_tables
    - aws_dynamodb_table_continuous_backups
    - aws_dynamodb_table_replica_auto_scalings
    - aws_dynamodb_table_resource_policies
    - aws_dynamodb_table_stream_resource_policies
    - aws_dynamodb_tables
    - aws_dynamodbstreams_streams
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideDynamoDBAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideDynamoDB",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideDynamoDBContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideDynamoDBAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_dynamodb_backups', 86400000),('aws_dynamodb_exports', 86400000),('aws_dynamodb_global_tables', 86400000),('aws_dynamodb_table_continuous_backups', 86400000),('aws_dynamodb_table_replica_auto_scalings', 86400000),('aws_dynamodb_table_resource_policies', 86400000),('aws_dynamodb_table_stream_resource_policies', 86400000),('aws_dynamodb_tables', 86400000),('aws_dynamodbstreams_streams', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideDynamoDB",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideDynamoDBPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideDynamoDB",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionCloudquerySourceAwsOrgWideDynamoDBFirelensLogGroup7F40CCBC",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideDynamoDBFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideDynamoDB",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideDynamoDB9287D5A3",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionCloudquerySourceAwsOrgWideDynamoDBFirelensLogGroup7F40CCBC": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleA777C8FA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleDefaultPolicyAA01E9CA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideDynamoDB9287D5A3",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleDefaultPolicyAA01E9CA",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleA777C8FA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleDefaultPolicy5027618D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionCloudquerySourceAwsOrgWideDynamoDBFirelensLogGroup7F40CCBC",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleDefaultPolicy5027618D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesScheduledEventRule1FA6BC29": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRole86EC6C01",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_ec2_images
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2ImagesAWSOTELCollector",
              },
              {
                "Condition": "SUCCESS",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2ImagesAwsCli",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2Images",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/bash",
              "-c",
              "ECS_CLUSTER=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Cluster');ECS_FAMILY=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Family');ECS_TASK_ARN=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.TaskARN');RUNNING=$(aws ecs list-tasks --cluster $ECS_CLUSTER --family $ECS_FAMILY | jq '.taskArns | length');[[ \${RUNNING} > 1 ]] && exit 114 || exit 0",
            ],
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "ghcr.io/guardian/service-catalogue/singleton:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesAwsCli",
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_ec2_images', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2Images",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideEc2Images",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionCloudquerySourceAwsOrgWideEc2ImagesFirelensLogGroup32711A11",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideEc2Images",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideEc2ImagesAAAFAE8F",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionCloudquerySourceAwsOrgWideEc2ImagesFirelensLogGroup32711A11": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRole86EC6C01": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRoleDefaultPolicyE42E3BF9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideEc2ImagesAAAFAE8F",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRoleDefaultPolicyE42E3BF9",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRole86EC6C01",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRoleDefaultPolicy94A17CE2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionCloudquerySourceAwsOrgWideEc2ImagesFirelensLogGroup32711A11",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRoleDefaultPolicy94A17CE2",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideEc2ScheduledEventRule2C1BD783": {
      "Properties": {
        "ScheduleExpression": "rate(30 minutes)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRole536EB5E7",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_ec2_instances
    - aws_ec2_security_groups
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2AWSOTELCollector",
              },
              {
                "Condition": "SUCCESS",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2AwsCli",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2Container",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2AWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/bash",
              "-c",
              "ECS_CLUSTER=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Cluster');ECS_FAMILY=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Family');ECS_TASK_ARN=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.TaskARN');RUNNING=$(aws ecs list-tasks --cluster $ECS_CLUSTER --family $ECS_FAMILY | jq '.taskArns | length');[[ \${RUNNING} > 1 ]] && exit 114 || exit 0",
            ],
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "ghcr.io/guardian/service-catalogue/singleton:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2AwsCli",
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_ec2_instances', 1800000),('aws_ec2_security_groups', 1800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 1800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2PostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideEc2",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinitionCloudquerySourceAwsOrgWideEc2FirelensLogGroupE01DEFEE",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2Firelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideEc2",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideEc221CF25F8",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionCloudquerySourceAwsOrgWideEc2FirelensLogGroupE01DEFEE": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRole536EB5E7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRoleDefaultPolicy5D07AAE8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideEc221CF25F8",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRoleDefaultPolicy5D07AAE8",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRole536EB5E7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleDefaultPolicy15E52B2D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2TaskDefinitionCloudquerySourceAwsOrgWideEc2FirelensLogGroupE01DEFEE",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleDefaultPolicy15E52B2D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsScheduledEventRule17238EC8": {
      "Properties": {
        "ScheduleExpression": "rate(4 hours)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRole20CD424D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_iam_credential_reports
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideIamCredentialReportsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideIamCredentialReports",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_iam_credential_reports', 14400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 14400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideIamCredentialReports",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideIamCredentialReports",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionCloudquerySourceAwsOrgWideIamCredentialReportsFirelensLogGroupB7D88F87",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideIamCredentialReports",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideIamCredentialReportsA4EE552D",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionCloudquerySourceAwsOrgWideIamCredentialReportsFirelensLogGroupB7D88F87": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRole20CD424D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRoleDefaultPolicyEDC4DC94": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideIamCredentialReportsA4EE552D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRoleDefaultPolicyEDC4DC94",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRole20CD424D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRoleDefaultPolicy0BBE996D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionCloudquerySourceAwsOrgWideIamCredentialReportsFirelensLogGroupB7D88F87",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRoleDefaultPolicy0BBE996D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersScheduledEventRuleE82A6C43": {
      "Properties": {
        "ScheduleExpression": "rate(30 minutes)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRole4A9EDE15",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_elbv1_load_balancer_policies
    - aws_elbv1_load_balancers
    - aws_elbv2_listener_certificates
    - aws_elbv2_listener_rules
    - aws_elbv2_listeners
    - aws_elbv2_load_balancer_attributes
    - aws_elbv2_load_balancer_web_acls
    - aws_elbv2_load_balancers
    - aws_elbv2_target_group_target_health_descriptions
    - aws_elbv2_target_groups
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideLoadBalancersAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideLoadBalancers",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_elbv1_load_balancer_policies', 1800000),('aws_elbv1_load_balancers', 1800000),('aws_elbv2_listener_certificates', 1800000),('aws_elbv2_listener_rules', 1800000),('aws_elbv2_listeners', 1800000),('aws_elbv2_load_balancer_attributes', 1800000),('aws_elbv2_load_balancer_web_acls', 1800000),('aws_elbv2_load_balancers', 1800000),('aws_elbv2_target_group_target_health_descriptions', 1800000),('aws_elbv2_target_groups', 1800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 1800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideLoadBalancers",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideLoadBalancers",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionCloudquerySourceAwsOrgWideLoadBalancersFirelensLogGroup52712979",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideLoadBalancers",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideLoadBalancers3ECAAF8B",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionCloudquerySourceAwsOrgWideLoadBalancersFirelensLogGroup52712979": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRole4A9EDE15": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRoleDefaultPolicy2F850C58": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideLoadBalancers3ECAAF8B",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRoleDefaultPolicy2F850C58",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRole4A9EDE15",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleDefaultPolicy7A95B87A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionCloudquerySourceAwsOrgWideLoadBalancersFirelensLogGroup52712979",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleDefaultPolicy7A95B87A",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideRDSScheduledEventRule95E5DE51": {
      "Properties": {
        "ScheduleExpression": "cron(0 6 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleCC75E52D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_rds_cluster_snapshots
    - aws_rds_clusters
    - aws_rds_db_snapshots
    - aws_rds_instances
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideRDSAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideRDS",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideRDSContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideRDSAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_rds_cluster_snapshots', 86400000),('aws_rds_clusters', 86400000),('aws_rds_db_snapshots', 86400000),('aws_rds_instances', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideRDS",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideRDSPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideRDS",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionCloudquerySourceAwsOrgWideRDSFirelensLogGroupA77166BD",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideRDSFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideRDS",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideRDS2AD886D1",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionCloudquerySourceAwsOrgWideRDSFirelensLogGroupA77166BD": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleCC75E52D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleDefaultPolicy16D51A2A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideRDS2AD886D1",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleDefaultPolicy16D51A2A",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleCC75E52D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRoleDefaultPolicy3BBDF952": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideRDSTaskDefinitionCloudquerySourceAwsOrgWideRDSFirelensLogGroupA77166BD",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRoleDefaultPolicy3BBDF952",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideS3ScheduledEventRule06193C1C": {
      "Properties": {
        "ScheduleExpression": "cron(0 4 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleA4289298",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_s3_access_grant_instances
    - aws_s3_access_grants
    - aws_s3_access_points
    - aws_s3_accounts
    - aws_s3_bucket_cors_rules
    - aws_s3_bucket_encryption_rules
    - aws_s3_bucket_grants
    - aws_s3_bucket_lifecycles
    - aws_s3_bucket_loggings
    - aws_s3_bucket_notification_configurations
    - aws_s3_bucket_object_grants
    - aws_s3_bucket_object_heads
    - aws_s3_bucket_object_lock_configurations
    - aws_s3_bucket_objects
    - aws_s3_bucket_ownership_controls
    - aws_s3_bucket_policies
    - aws_s3_bucket_public_access_blocks
    - aws_s3_bucket_replications
    - aws_s3_bucket_versionings
    - aws_s3_bucket_websites
    - aws_s3_buckets
    - aws_s3_multi_region_access_points
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideS3AWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideS3",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideS3Container",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideS3AWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_s3_access_grant_instances', 86400000),('aws_s3_access_grants', 86400000),('aws_s3_access_points', 86400000),('aws_s3_accounts', 86400000),('aws_s3_bucket_cors_rules', 86400000),('aws_s3_bucket_encryption_rules', 86400000),('aws_s3_bucket_grants', 86400000),('aws_s3_bucket_lifecycles', 86400000),('aws_s3_bucket_loggings', 86400000),('aws_s3_bucket_notification_configurations', 86400000),('aws_s3_bucket_object_grants', 86400000),('aws_s3_bucket_object_heads', 86400000),('aws_s3_bucket_object_lock_configurations', 86400000),('aws_s3_bucket_objects', 86400000),('aws_s3_bucket_ownership_controls', 86400000),('aws_s3_bucket_policies', 86400000),('aws_s3_bucket_public_access_blocks', 86400000),('aws_s3_bucket_replications', 86400000),('aws_s3_bucket_versionings', 86400000),('aws_s3_bucket_websites', 86400000),('aws_s3_buckets', 86400000),('aws_s3_multi_region_access_points', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideS3",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideS3PostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideS3",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionCloudquerySourceAwsOrgWideS3FirelensLogGroup4CE08508",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideS3Firelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideS3",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideS30E844CCC",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionCloudquerySourceAwsOrgWideS3FirelensLogGroup4CE08508": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleA4289298": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleDefaultPolicy151FBFA4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideS30E844CCC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleDefaultPolicy151FBFA4",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleA4289298",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleDefaultPolicyE82AC40F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideS3TaskDefinitionCloudquerySourceAwsOrgWideS3FirelensLogGroup4CE08508",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleDefaultPolicyE82AC40F",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideSnsScheduledEventRule3289CB65": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideSnsTaskDefinitionD1E54815",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideSnsTaskDefinitionEventsRoleE97B4DB0",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideSnsTaskDefinitionCloudquerySourceAwsOrgWideSnsFirelensLogGroupA37ABD31": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideSns",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideSnsTaskDefinitionD1E54815": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_sns_topics
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideSnsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideSns",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideSnsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideSnsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_sns_topics', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideSns",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideSnsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsOrgWideSns",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideSnsTaskDefinitionCloudquerySourceAwsOrgWideSnsFirelensLogGroupA37ABD31",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideSnsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideSnsTaskDefinitionExecutionRoleB13CF6BE",
            "Arn",
          ],
        },
        "Family": "AwsOrgWideSns",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideSns",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsOrgWideSns74594884",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideSnsTaskDefinitionEventsRoleDefaultPolicyB9E23161": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideSnsTaskDefinitionD1E54815",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideSnsTaskDefinitionExecutionRoleB13CF6BE",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsOrgWideSns74594884",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideSnsTaskDefinitionEventsRoleDefaultPolicyB9E23161",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideSnsTaskDefinitionEventsRoleE97B4DB0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideSnsTaskDefinitionEventsRoleE97B4DB0": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideSns",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideSnsTaskDefinitionExecutionRoleB13CF6BE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideSns",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideSnsTaskDefinitionExecutionRoleDefaultPolicy29A45EB5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideSnsTaskDefinitionCloudquerySourceAwsOrgWideSnsFirelensLogGroupA37ABD31",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideSnsTaskDefinitionExecutionRoleDefaultPolicy29A45EB5",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideSnsTaskDefinitionExecutionRoleB13CF6BE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsRemainingDataScheduledEventRuleADE2D1CC": {
      "Properties": {
        "ScheduleExpression": "cron(0 16 ? * SAT *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRole45369093",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionCloudquerySourceAwsRemainingDataFirelensLogGroupAEF7D0F2": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRole45369093": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRoleDefaultPolicyE9BEA52B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsRemainingDataD00498F8",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRoleDefaultPolicyE9BEA52B",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRole45369093",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRoleDefaultPolicy3D9DFEF7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsRemainingDataTaskDefinitionCloudquerySourceAwsRemainingDataFirelensLogGroupAEF7D0F2",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRoleDefaultPolicy3D9DFEF7",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_account_alternate_contacts
    - aws_account_contacts
    - aws_acmpca_certificate_authorities
    - aws_amplify_apps
    - aws_apigateway_api_keys
    - aws_apigateway_client_certificates
    - aws_apigateway_domain_name_base_path_mappings
    - aws_apigateway_domain_names
    - aws_apigateway_rest_api_authorizers
    - aws_apigateway_rest_api_deployments
    - aws_apigateway_rest_api_documentation_parts
    - aws_apigateway_rest_api_documentation_versions
    - aws_apigateway_rest_api_gateway_responses
    - aws_apigateway_rest_api_models
    - aws_apigateway_rest_api_request_validators
    - aws_apigateway_rest_api_resource_method_integrations
    - aws_apigateway_rest_api_resource_methods
    - aws_apigateway_rest_api_resources
    - aws_apigateway_rest_api_stages
    - aws_apigateway_rest_apis
    - aws_apigateway_usage_plan_keys
    - aws_apigateway_usage_plans
    - aws_apigateway_vpc_links
    - aws_apigatewayv2_api_authorizers
    - aws_apigatewayv2_api_deployments
    - aws_apigatewayv2_api_integration_responses
    - aws_apigatewayv2_api_integrations
    - aws_apigatewayv2_api_models
    - aws_apigatewayv2_api_route_responses
    - aws_apigatewayv2_api_routes
    - aws_apigatewayv2_api_stages
    - aws_apigatewayv2_apis
    - aws_apigatewayv2_domain_name_rest_api_mappings
    - aws_apigatewayv2_domain_names
    - aws_apigatewayv2_vpc_links
    - aws_appconfig_applications
    - aws_appconfig_configuration_profiles
    - aws_appconfig_deployment_strategies
    - aws_appconfig_environments
    - aws_appconfig_hosted_configuration_versions
    - aws_appflow_flows
    - aws_applicationautoscaling_policies
    - aws_applicationautoscaling_scalable_targets
    - aws_applicationautoscaling_scaling_activities
    - aws_applicationautoscaling_scheduled_actions
    - aws_appmesh_meshes
    - aws_appmesh_virtual_gateways
    - aws_appmesh_virtual_nodes
    - aws_appmesh_virtual_routers
    - aws_appmesh_virtual_services
    - aws_apprunner_auto_scaling_configurations
    - aws_apprunner_connections
    - aws_apprunner_custom_domains
    - aws_apprunner_observability_configurations
    - aws_apprunner_operations
    - aws_apprunner_services
    - aws_apprunner_vpc_connectors
    - aws_apprunner_vpc_ingress_connections
    - aws_appstream_app_blocks
    - aws_appstream_application_fleet_associations
    - aws_appstream_applications
    - aws_appstream_directory_configs
    - aws_appstream_fleets
    - aws_appstream_image_builders
    - aws_appstream_images
    - aws_appstream_stack_entitlements
    - aws_appstream_stack_user_associations
    - aws_appstream_stacks
    - aws_appstream_usage_report_subscriptions
    - aws_appstream_users
    - aws_appsync_graphql_apis
    - aws_athena_data_catalog_database_tables
    - aws_athena_data_catalog_databases
    - aws_athena_data_catalogs
    - aws_athena_work_group_named_queries
    - aws_athena_work_group_prepared_statements
    - aws_athena_work_group_query_executions
    - aws_athena_work_groups
    - aws_auditmanager_assessments
    - aws_autoscaling_group_lifecycle_hooks
    - aws_autoscaling_group_scaling_policies
    - aws_autoscaling_launch_configurations
    - aws_autoscaling_plan_resources
    - aws_autoscaling_plans
    - aws_autoscaling_scheduled_actions
    - aws_autoscaling_warm_pools
    - aws_availability_zones
    - aws_backup_global_settings
    - aws_backup_jobs
    - aws_backup_plan_selections
    - aws_backup_plans
    - aws_backup_region_settings
    - aws_backup_report_plans
    - aws_backupgateway_gateways
    - aws_batch_compute_environments
    - aws_batch_job_definitions
    - aws_batch_job_queues
    - aws_batch_jobs
    - aws_budgets_actions
    - aws_budgets_budgets
    - aws_cloudfront_cache_policies
    - aws_cloudfront_distributions
    - aws_cloudfront_functions
    - aws_cloudfront_key_value_stores
    - aws_cloudfront_origin_access_identities
    - aws_cloudfront_origin_request_policies
    - aws_cloudfront_response_headers_policies
    - aws_cloudhsmv2_backups
    - aws_cloudhsmv2_clusters
    - aws_cloudtrail_channels
    - aws_cloudtrail_imports
    - aws_cloudtrail_trail_event_selectors
    - aws_cloudtrail_trails
    - aws_cloudwatch_metric_statistics
    - aws_cloudwatch_metric_streams
    - aws_cloudwatch_metrics
    - aws_cloudwatchlogs_log_group_data_protection_policies
    - aws_cloudwatchlogs_log_group_subscription_filters
    - aws_cloudwatchlogs_log_groups
    - aws_cloudwatchlogs_metric_filters
    - aws_cloudwatchlogs_resource_policies
    - aws_codeartifact_domains
    - aws_codeartifact_repositories
    - aws_codebuild_builds
    - aws_codebuild_projects
    - aws_codebuild_source_credentials
    - aws_codecommit_repositories
    - aws_codedeploy_applications
    - aws_codedeploy_deployment_configs
    - aws_codedeploy_deployment_groups
    - aws_codedeploy_deployments
    - aws_codegurureviewer_repository_associations
    - aws_codepipeline_pipelines
    - aws_codepipeline_webhooks
    - aws_cognito_identity_pools
    - aws_cognito_user_pool_identity_providers
    - aws_cognito_user_pools
    - aws_computeoptimizer_autoscaling_group_recommendations
    - aws_computeoptimizer_ebs_volume_recommendations
    - aws_computeoptimizer_ec2_instance_recommendations
    - aws_computeoptimizer_enrollment_statuses
    - aws_computeoptimizer_lambda_function_recommendations
    - aws_config_config_rule_compliance_details
    - aws_config_config_rule_compliances
    - aws_config_config_rules
    - aws_config_configuration_aggregators
    - aws_config_configuration_recorders
    - aws_config_conformance_pack_rule_compliances
    - aws_config_conformance_packs
    - aws_config_delivery_channel_statuses
    - aws_config_delivery_channels
    - aws_config_remediation_configurations
    - aws_config_retention_configurations
    - aws_costexplorer_cost_30d
    - aws_costexplorer_cost_forecast_30d
    - aws_datapipeline_pipelines
    - aws_datasync_agents
    - aws_datasync_azureblob_locations
    - aws_datasync_efs_locations
    - aws_datasync_fsxlustre_locations
    - aws_datasync_fsxontap_locations
    - aws_datasync_fsxopenzfs_locations
    - aws_datasync_fsxwindows_locations
    - aws_datasync_hdfs_locations
    - aws_datasync_locations
    - aws_datasync_nfs_locations
    - aws_datasync_objectstorage_locations
    - aws_datasync_s3_locations
    - aws_datasync_smb_locations
    - aws_dax_clusters
    - aws_detective_graph_members
    - aws_detective_graphs
    - aws_directconnect_connections
    - aws_directconnect_gateway_associations
    - aws_directconnect_gateway_attachments
    - aws_directconnect_gateways
    - aws_directconnect_lags
    - aws_directconnect_locations
    - aws_directconnect_virtual_gateways
    - aws_directconnect_virtual_interfaces
    - aws_directoryservice_directories
    - aws_dms_certificates
    - aws_dms_event_subscriptions
    - aws_dms_replication_instances
    - aws_dms_replication_subnet_groups
    - aws_dms_replication_tasks
    - aws_docdb_certificates
    - aws_docdb_cluster_snapshots
    - aws_docdb_clusters
    - aws_docdb_event_categories
    - aws_docdb_event_subscriptions
    - aws_docdb_events
    - aws_docdb_global_clusters
    - aws_docdb_instances
    - aws_docdb_pending_maintenance_actions
    - aws_docdb_subnet_groups
    - aws_ebs_default_kms_key_ids
    - aws_ebs_encryption_by_defaults
    - aws_ec2_account_attributes
    - aws_ec2_byoip_cidrs
    - aws_ec2_capacity_reservations
    - aws_ec2_customer_gateways
    - aws_ec2_dhcp_options
    - aws_ec2_ebs_snapshot_attributes
    - aws_ec2_ebs_snapshots
    - aws_ec2_ebs_volume_statuses
    - aws_ec2_ebs_volumes
    - aws_ec2_egress_only_internet_gateways
    - aws_ec2_eips
    - aws_ec2_flow_logs
    - aws_ec2_hosts
    - aws_ec2_image_block_public_access_states
    - aws_ec2_image_last_launched_times
    - aws_ec2_image_launch_permissions
    - aws_ec2_instance_connect_endpoints
    - aws_ec2_instance_credit_specifications
    - aws_ec2_instance_statuses
    - aws_ec2_internet_gateways
    - aws_ec2_ipam_address_history
    - aws_ec2_ipam_byoasns
    - aws_ec2_ipam_discovered_accounts
    - aws_ec2_ipam_discovered_public_addresses
    - aws_ec2_ipam_discovered_resource_cidrs
    - aws_ec2_ipam_pool_allocations
    - aws_ec2_ipam_pool_cidrs
    - aws_ec2_ipam_pools
    - aws_ec2_ipam_resource_cidrs
    - aws_ec2_ipam_resource_discoveries
    - aws_ec2_ipam_resource_discovery_associations
    - aws_ec2_ipam_scopes
    - aws_ec2_ipams
    - aws_ec2_key_pairs
    - aws_ec2_launch_template_versions
    - aws_ec2_launch_templates
    - aws_ec2_managed_prefix_lists
    - aws_ec2_nat_gateways
    - aws_ec2_network_acls
    - aws_ec2_network_interfaces
    - aws_ec2_regional_configs
    - aws_ec2_replace_root_volume_tasks
    - aws_ec2_reserved_instances
    - aws_ec2_route_tables
    - aws_ec2_serial_console_access_statuses
    - aws_ec2_snapshot_block_public_access_states
    - aws_ec2_spot_fleet_instances
    - aws_ec2_spot_fleet_requests
    - aws_ec2_spot_instance_requests
    - aws_ec2_subnets
    - aws_ec2_traffic_mirror_filters
    - aws_ec2_traffic_mirror_sessions
    - aws_ec2_traffic_mirror_targets
    - aws_ec2_transit_gateway_attachments
    - aws_ec2_transit_gateway_multicast_domains
    - aws_ec2_transit_gateway_peering_attachments
    - aws_ec2_transit_gateway_route_tables
    - aws_ec2_transit_gateway_vpc_attachments
    - aws_ec2_transit_gateways
    - aws_ec2_vpc_endpoint_connections
    - aws_ec2_vpc_endpoint_service_configurations
    - aws_ec2_vpc_endpoints
    - aws_ec2_vpc_peering_connections
    - aws_ec2_vpcs
    - aws_ec2_vpn_connections
    - aws_ec2_vpn_gateways
    - aws_ecr_pull_through_cache_rules
    - aws_ecr_registries
    - aws_ecr_registry_policies
    - aws_ecr_repositories
    - aws_ecr_repository_image_scan_findings
    - aws_ecr_repository_images
    - aws_ecr_repository_lifecycle_policies
    - aws_ecr_repository_policies
    - aws_ecrpublic_repositories
    - aws_ecrpublic_repository_images
    - aws_ecs_cluster_container_instances
    - aws_ecs_cluster_services
    - aws_ecs_cluster_task_sets
    - aws_ecs_cluster_tasks
    - aws_ecs_clusters
    - aws_ecs_task_definitions
    - aws_efs_access_points
    - aws_efs_filesystems
    - aws_eks_cluster_addons
    - aws_eks_cluster_node_groups
    - aws_eks_cluster_oidc_identity_provider_configs
    - aws_eks_clusters
    - aws_eks_fargate_profiles
    - aws_elasticache_clusters
    - aws_elasticache_events
    - aws_elasticache_global_replication_groups
    - aws_elasticache_replication_groups
    - aws_elasticache_reserved_cache_nodes
    - aws_elasticache_serverless_cache_snapshots
    - aws_elasticache_serverless_caches
    - aws_elasticache_snapshots
    - aws_elasticache_subnet_groups
    - aws_elasticache_update_actions
    - aws_elasticache_user_groups
    - aws_elasticache_users
    - aws_elasticbeanstalk_application_versions
    - aws_elasticbeanstalk_applications
    - aws_elasticbeanstalk_configuration_options
    - aws_elasticbeanstalk_configuration_settings
    - aws_elasticbeanstalk_environments
    - aws_elasticsearch_domains
    - aws_elasticsearch_packages
    - aws_elasticsearch_reserved_instances
    - aws_elasticsearch_versions
    - aws_elasticsearch_vpc_endpoints
    - aws_elastictranscoder_pipeline_jobs
    - aws_elastictranscoder_pipelines
    - aws_elastictranscoder_presets
    - aws_emr_block_public_access_configs
    - aws_emr_cluster_instance_fleets
    - aws_emr_cluster_instance_groups
    - aws_emr_cluster_instances
    - aws_emr_clusters
    - aws_emr_notebook_executions
    - aws_emr_release_labels
    - aws_emr_security_configurations
    - aws_emr_steps
    - aws_emr_studio_session_mappings
    - aws_emr_studios
    - aws_eventbridge_api_destinations
    - aws_eventbridge_archives
    - aws_eventbridge_connections
    - aws_eventbridge_endpoints
    - aws_eventbridge_event_bus_rules
    - aws_eventbridge_event_bus_targets
    - aws_eventbridge_event_buses
    - aws_eventbridge_event_sources
    - aws_eventbridge_replays
    - aws_firehose_delivery_streams
    - aws_frauddetector_batch_imports
    - aws_frauddetector_batch_predictions
    - aws_frauddetector_detectors
    - aws_frauddetector_entity_types
    - aws_frauddetector_event_types
    - aws_frauddetector_external_models
    - aws_frauddetector_labels
    - aws_frauddetector_model_versions
    - aws_frauddetector_models
    - aws_frauddetector_outcomes
    - aws_frauddetector_rules
    - aws_frauddetector_variables
    - aws_fsx_backups
    - aws_fsx_data_repository_associations
    - aws_fsx_data_repository_tasks
    - aws_fsx_file_caches
    - aws_fsx_file_systems
    - aws_fsx_snapshots
    - aws_fsx_storage_virtual_machines
    - aws_fsx_volumes
    - aws_glacier_data_retrieval_policies
    - aws_glacier_vault_access_policies
    - aws_glacier_vault_lock_policies
    - aws_glacier_vault_notifications
    - aws_glacier_vaults
    - aws_globalaccelerator_accelerators
    - aws_globalaccelerator_custom_routing_accelerators
    - aws_glue_classifiers
    - aws_glue_crawlers
    - aws_glue_database_table_indexes
    - aws_glue_database_tables
    - aws_glue_databases
    - aws_glue_datacatalog_encryption_settings
    - aws_glue_dev_endpoints
    - aws_glue_job_runs
    - aws_glue_jobs
    - aws_glue_ml_transform_task_runs
    - aws_glue_ml_transforms
    - aws_glue_registries
    - aws_glue_registry_schema_versions
    - aws_glue_registry_schemas
    - aws_glue_security_configurations
    - aws_glue_triggers
    - aws_glue_workflows
    - aws_health_affected_entities
    - aws_health_event_details
    - aws_health_events
    - aws_health_org_event_details
    - aws_health_organization_affected_entities
    - aws_health_organization_events
    - aws_healthlake_fhir_datastores
    - aws_iam_account_authorization_details
    - aws_iam_accounts
    - aws_iam_group_attached_policies
    - aws_iam_group_last_accessed_details
    - aws_iam_group_policies
    - aws_iam_groups
    - aws_iam_instance_profiles
    - aws_iam_mfa_devices
    - aws_iam_openid_connect_identity_providers
    - aws_iam_password_policies
    - aws_iam_policies
    - aws_iam_policy_default_versions
    - aws_iam_policy_last_accessed_details
    - aws_iam_policy_versions
    - aws_iam_role_attached_policies
    - aws_iam_role_last_accessed_details
    - aws_iam_role_policies
    - aws_iam_roles
    - aws_iam_saml_identity_providers
    - aws_iam_server_certificates
    - aws_iam_signing_certificates
    - aws_iam_ssh_public_keys
    - aws_iam_user_access_keys
    - aws_iam_user_attached_policies
    - aws_iam_user_groups
    - aws_iam_user_last_accessed_details
    - aws_iam_user_policies
    - aws_iam_users
    - aws_iam_virtual_mfa_devices
    - aws_inspector2_covered_resources
    - aws_inspector_findings
    - aws_iot_billing_groups
    - aws_iot_ca_certificates
    - aws_iot_certificates
    - aws_iot_jobs
    - aws_iot_policies
    - aws_iot_security_profiles
    - aws_iot_streams
    - aws_iot_thing_groups
    - aws_iot_thing_types
    - aws_iot_things
    - aws_iot_topic_rules
    - aws_kafka_cluster_operations
    - aws_kafka_cluster_policies
    - aws_kafka_clusters
    - aws_kafka_configurations
    - aws_kafka_nodes
    - aws_keyspaces_keyspaces
    - aws_keyspaces_tables
    - aws_kinesis_streams
    - aws_kms_aliases
    - aws_kms_key_grants
    - aws_kms_key_policies
    - aws_kms_key_rotation_statuses
    - aws_kms_key_rotations
    - aws_kms_keys
    - aws_lexv2_bot_aliases
    - aws_lexv2_bots
    - aws_lightsail_alarms
    - aws_lightsail_bucket_access_keys
    - aws_lightsail_buckets
    - aws_lightsail_certificates
    - aws_lightsail_container_service_deployments
    - aws_lightsail_container_service_images
    - aws_lightsail_container_services
    - aws_lightsail_database_events
    - aws_lightsail_database_log_events
    - aws_lightsail_database_parameters
    - aws_lightsail_database_snapshots
    - aws_lightsail_databases
    - aws_lightsail_disk_snapshots
    - aws_lightsail_disks
    - aws_lightsail_distributions
    - aws_lightsail_instance_port_states
    - aws_lightsail_instance_snapshots
    - aws_lightsail_instances
    - aws_lightsail_load_balancer_tls_certificates
    - aws_lightsail_load_balancers
    - aws_lightsail_static_ips
    - aws_memorydb_reserved_nodes
    - aws_mq_broker_configuration_revisions
    - aws_mq_broker_configurations
    - aws_mq_broker_users
    - aws_mq_brokers
    - aws_mwaa_environments
    - aws_neptune_cluster_snapshots
    - aws_neptune_clusters
    - aws_neptune_event_subscriptions
    - aws_neptune_global_clusters
    - aws_neptune_instances
    - aws_neptune_subnet_groups
    - aws_networkfirewall_firewall_policies
    - aws_networkfirewall_firewalls
    - aws_networkfirewall_rule_groups
    - aws_networkfirewall_tls_inspection_configurations
    - aws_networkmanager_global_networks
    - aws_networkmanager_links
    - aws_networkmanager_sites
    - aws_networkmanager_transit_gateway_registrations
    - aws_opensearch_reserved_instances
    - aws_pinpoint_apps
    - aws_qldb_ledger_journal_kinesis_streams
    - aws_qldb_ledger_journal_s3_exports
    - aws_qldb_ledgers
    - aws_ram_principals
    - aws_ram_resource_share_associations
    - aws_ram_resource_share_invitations
    - aws_ram_resource_share_permissions
    - aws_ram_resource_shares
    - aws_ram_resource_types
    - aws_ram_resources
    - aws_rds_certificates
    - aws_rds_cluster_backtracks
    - aws_rds_db_proxies
    - aws_rds_db_proxy_endpoints
    - aws_rds_db_proxy_target_groups
    - aws_rds_db_proxy_targets
    - aws_rds_db_security_groups
    - aws_rds_event_subscriptions
    - aws_rds_events
    - aws_rds_global_clusters
    - aws_rds_instance_resource_metrics
    - aws_rds_option_groups
    - aws_rds_pending_maintenance_actions
    - aws_rds_reserved_instances
    - aws_rds_subnet_groups
    - aws_redshift_cluster_parameter_groups
    - aws_redshift_cluster_parameters
    - aws_redshift_clusters
    - aws_redshift_data_shares
    - aws_redshift_endpoint_accesses
    - aws_redshift_endpoint_authorizations
    - aws_redshift_event_subscriptions
    - aws_redshift_events
    - aws_redshift_reserved_nodes
    - aws_redshift_snapshots
    - aws_redshift_subnet_groups
    - aws_regions
    - aws_resiliencehub_alarm_recommendations
    - aws_resiliencehub_app_assessments
    - aws_resiliencehub_app_component_compliances
    - aws_resiliencehub_app_version_resource_mappings
    - aws_resiliencehub_app_version_resources
    - aws_resiliencehub_app_versions
    - aws_resiliencehub_apps
    - aws_resiliencehub_component_recommendations
    - aws_resiliencehub_recommendation_templates
    - aws_resiliencehub_resiliency_policies
    - aws_resiliencehub_sop_recommendations
    - aws_resiliencehub_suggested_resiliency_policies
    - aws_resiliencehub_test_recommendations
    - aws_resourcegroups_resource_groups
    - aws_route53_delegation_sets
    - aws_route53_domains
    - aws_route53_health_checks
    - aws_route53_hosted_zone_query_logging_configs
    - aws_route53_hosted_zone_resource_record_sets
    - aws_route53_hosted_zone_traffic_policy_instances
    - aws_route53_hosted_zones
    - aws_route53_operations
    - aws_route53_traffic_policies
    - aws_route53_traffic_policy_versions
    - aws_route53recoverycontrolconfig_clusters
    - aws_route53recoverycontrolconfig_control_panels
    - aws_route53recoverycontrolconfig_routing_controls
    - aws_route53recoverycontrolconfig_safety_rules
    - aws_route53recoveryreadiness_cells
    - aws_route53recoveryreadiness_readiness_checks
    - aws_route53recoveryreadiness_recovery_groups
    - aws_route53recoveryreadiness_resource_sets
    - aws_route53resolver_firewall_configs
    - aws_route53resolver_firewall_domain_lists
    - aws_route53resolver_firewall_rule_group_associations
    - aws_route53resolver_firewall_rule_groups
    - aws_route53resolver_resolver_endpoints
    - aws_route53resolver_resolver_query_log_config_associations
    - aws_route53resolver_resolver_query_log_configs
    - aws_route53resolver_resolver_rule_associations
    - aws_route53resolver_resolver_rules
    - aws_sagemaker_apps
    - aws_sagemaker_endpoint_configurations
    - aws_sagemaker_endpoints
    - aws_sagemaker_models
    - aws_sagemaker_notebook_instances
    - aws_sagemaker_training_jobs
    - aws_savingsplans_plans
    - aws_scheduler_schedule_groups
    - aws_secretsmanager_secret_versions
    - aws_secretsmanager_secrets
    - aws_servicecatalog_launch_paths
    - aws_servicecatalog_portfolios
    - aws_servicecatalog_products
    - aws_servicecatalog_provisioned_products
    - aws_servicecatalog_provisioning_artifacts
    - aws_servicecatalog_provisioning_parameters
    - aws_servicediscovery_instances
    - aws_servicediscovery_namespaces
    - aws_servicediscovery_services
    - aws_ses_active_receipt_rule_sets
    - aws_ses_configuration_set_event_destinations
    - aws_ses_configuration_sets
    - aws_ses_contact_lists
    - aws_ses_custom_verification_email_templates
    - aws_ses_identities
    - aws_ses_templates
    - aws_shield_attacks
    - aws_shield_protection_groups
    - aws_shield_protections
    - aws_shield_subscriptions
    - aws_signer_signing_profiles
    - aws_sns_subscriptions
    - aws_sqs_queues
    - aws_ssm_associations
    - aws_ssm_compliance_summary_items
    - aws_ssm_document_versions
    - aws_ssm_documents
    - aws_ssm_instance_compliance_items
    - aws_ssm_instance_patches
    - aws_ssm_instances
    - aws_ssm_inventories
    - aws_ssm_inventory_schemas
    - aws_ssm_patch_baselines
    - aws_ssm_sessions
    - aws_ssmincidents_incident_findings
    - aws_ssmincidents_incident_related_items
    - aws_ssmincidents_incident_timeline_events
    - aws_ssmincidents_incidents
    - aws_ssmincidents_response_plans
    - aws_stepfunctions_activities
    - aws_stepfunctions_state_machines
    - aws_support_case_communications
    - aws_support_cases
    - aws_support_services
    - aws_support_severity_levels
    - aws_support_trusted_advisor_check_results
    - aws_support_trusted_advisor_check_summaries
    - aws_support_trusted_advisor_checks
    - aws_timestream_databases
    - aws_timestream_tables
    - aws_transfer_agreements
    - aws_transfer_certificates
    - aws_transfer_connectors
    - aws_transfer_profiles
    - aws_transfer_servers
    - aws_transfer_users
    - aws_transfer_workflows
    - aws_waf_rule_groups
    - aws_waf_rules
    - aws_waf_subscribed_rule_groups
    - aws_waf_web_acls
    - aws_wafregional_rate_based_rules
    - aws_wafregional_rule_groups
    - aws_wafregional_rules
    - aws_wafregional_web_acls
    - aws_wafv2_ipsets
    - aws_wafv2_managed_rule_groups
    - aws_wafv2_regex_pattern_sets
    - aws_wafv2_rule_groups
    - aws_wafv2_web_acls
    - aws_workspaces_connection_alias_permissions
    - aws_workspaces_connection_aliases
    - aws_workspaces_directories
    - aws_workspaces_workspaces
    - aws_xray_encryption_configs
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    concurrency: 2000
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsRemainingDataAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsRemainingData",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "2457MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsRemainingDataContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsRemainingDataAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_account_alternate_contacts', 604800000),('aws_account_contacts', 604800000),('aws_acmpca_certificate_authorities', 604800000),('aws_amplify_apps', 604800000),('aws_apigateway_api_keys', 604800000),('aws_apigateway_client_certificates', 604800000),('aws_apigateway_domain_name_base_path_mappings', 604800000),('aws_apigateway_domain_names', 604800000),('aws_apigateway_rest_api_authorizers', 604800000),('aws_apigateway_rest_api_deployments', 604800000),('aws_apigateway_rest_api_documentation_parts', 604800000),('aws_apigateway_rest_api_documentation_versions', 604800000),('aws_apigateway_rest_api_gateway_responses', 604800000),('aws_apigateway_rest_api_models', 604800000),('aws_apigateway_rest_api_request_validators', 604800000),('aws_apigateway_rest_api_resource_method_integrations', 604800000),('aws_apigateway_rest_api_resource_methods', 604800000),('aws_apigateway_rest_api_resources', 604800000),('aws_apigateway_rest_api_stages', 604800000),('aws_apigateway_rest_apis', 604800000),('aws_apigateway_usage_plan_keys', 604800000),('aws_apigateway_usage_plans', 604800000),('aws_apigateway_vpc_links', 604800000),('aws_apigatewayv2_api_authorizers', 604800000),('aws_apigatewayv2_api_deployments', 604800000),('aws_apigatewayv2_api_integration_responses', 604800000),('aws_apigatewayv2_api_integrations', 604800000),('aws_apigatewayv2_api_models', 604800000),('aws_apigatewayv2_api_route_responses', 604800000),('aws_apigatewayv2_api_routes', 604800000),('aws_apigatewayv2_api_stages', 604800000),('aws_apigatewayv2_apis', 604800000),('aws_apigatewayv2_domain_name_rest_api_mappings', 604800000),('aws_apigatewayv2_domain_names', 604800000),('aws_apigatewayv2_vpc_links', 604800000),('aws_appconfig_applications', 604800000),('aws_appconfig_configuration_profiles', 604800000),('aws_appconfig_deployment_strategies', 604800000),('aws_appconfig_environments', 604800000),('aws_appconfig_hosted_configuration_versions', 604800000),('aws_appflow_flows', 604800000),('aws_applicationautoscaling_policies', 604800000),('aws_applicationautoscaling_scalable_targets', 604800000),('aws_applicationautoscaling_scaling_activities', 604800000),('aws_applicationautoscaling_scheduled_actions', 604800000),('aws_appmesh_meshes', 604800000),('aws_appmesh_virtual_gateways', 604800000),('aws_appmesh_virtual_nodes', 604800000),('aws_appmesh_virtual_routers', 604800000),('aws_appmesh_virtual_services', 604800000),('aws_apprunner_auto_scaling_configurations', 604800000),('aws_apprunner_connections', 604800000),('aws_apprunner_custom_domains', 604800000),('aws_apprunner_observability_configurations', 604800000),('aws_apprunner_operations', 604800000),('aws_apprunner_services', 604800000),('aws_apprunner_vpc_connectors', 604800000),('aws_apprunner_vpc_ingress_connections', 604800000),('aws_appstream_app_blocks', 604800000),('aws_appstream_application_fleet_associations', 604800000),('aws_appstream_applications', 604800000),('aws_appstream_directory_configs', 604800000),('aws_appstream_fleets', 604800000),('aws_appstream_image_builders', 604800000),('aws_appstream_images', 604800000),('aws_appstream_stack_entitlements', 604800000),('aws_appstream_stack_user_associations', 604800000),('aws_appstream_stacks', 604800000),('aws_appstream_usage_report_subscriptions', 604800000),('aws_appstream_users', 604800000),('aws_appsync_graphql_apis', 604800000),('aws_athena_data_catalog_database_tables', 604800000),('aws_athena_data_catalog_databases', 604800000),('aws_athena_data_catalogs', 604800000),('aws_athena_work_group_named_queries', 604800000),('aws_athena_work_group_prepared_statements', 604800000),('aws_athena_work_group_query_executions', 604800000),('aws_athena_work_groups', 604800000),('aws_auditmanager_assessments', 604800000),('aws_autoscaling_group_lifecycle_hooks', 604800000),('aws_autoscaling_group_scaling_policies', 604800000),('aws_autoscaling_launch_configurations', 604800000),('aws_autoscaling_plan_resources', 604800000),('aws_autoscaling_plans', 604800000),('aws_autoscaling_scheduled_actions', 604800000),('aws_autoscaling_warm_pools', 604800000),('aws_availability_zones', 604800000),('aws_backup_global_settings', 604800000),('aws_backup_jobs', 604800000),('aws_backup_plan_selections', 604800000),('aws_backup_plans', 604800000),('aws_backup_region_settings', 604800000),('aws_backup_report_plans', 604800000),('aws_backupgateway_gateways', 604800000),('aws_batch_compute_environments', 604800000),('aws_batch_job_definitions', 604800000),('aws_batch_job_queues', 604800000),('aws_batch_jobs', 604800000),('aws_budgets_actions', 604800000),('aws_budgets_budgets', 604800000),('aws_cloudfront_cache_policies', 604800000),('aws_cloudfront_distributions', 604800000),('aws_cloudfront_functions', 604800000),('aws_cloudfront_key_value_stores', 604800000),('aws_cloudfront_origin_access_identities', 604800000),('aws_cloudfront_origin_request_policies', 604800000),('aws_cloudfront_response_headers_policies', 604800000),('aws_cloudhsmv2_backups', 604800000),('aws_cloudhsmv2_clusters', 604800000),('aws_cloudtrail_channels', 604800000),('aws_cloudtrail_imports', 604800000),('aws_cloudtrail_trail_event_selectors', 604800000),('aws_cloudtrail_trails', 604800000),('aws_cloudwatch_metric_statistics', 604800000),('aws_cloudwatch_metric_streams', 604800000),('aws_cloudwatch_metrics', 604800000),('aws_cloudwatchlogs_log_group_data_protection_policies', 604800000),('aws_cloudwatchlogs_log_group_subscription_filters', 604800000),('aws_cloudwatchlogs_log_groups', 604800000),('aws_cloudwatchlogs_metric_filters', 604800000),('aws_cloudwatchlogs_resource_policies', 604800000),('aws_codeartifact_domains', 604800000),('aws_codeartifact_repositories', 604800000),('aws_codebuild_builds', 604800000),('aws_codebuild_projects', 604800000),('aws_codebuild_source_credentials', 604800000),('aws_codecommit_repositories', 604800000),('aws_codedeploy_applications', 604800000),('aws_codedeploy_deployment_configs', 604800000),('aws_codedeploy_deployment_groups', 604800000),('aws_codedeploy_deployments', 604800000),('aws_codegurureviewer_repository_associations', 604800000),('aws_codepipeline_pipelines', 604800000),('aws_codepipeline_webhooks', 604800000),('aws_cognito_identity_pools', 604800000),('aws_cognito_user_pool_identity_providers', 604800000),('aws_cognito_user_pools', 604800000),('aws_computeoptimizer_autoscaling_group_recommendations', 604800000),('aws_computeoptimizer_ebs_volume_recommendations', 604800000),('aws_computeoptimizer_ec2_instance_recommendations', 604800000),('aws_computeoptimizer_enrollment_statuses', 604800000),('aws_computeoptimizer_lambda_function_recommendations', 604800000),('aws_config_config_rule_compliance_details', 604800000),('aws_config_config_rule_compliances', 604800000),('aws_config_config_rules', 604800000),('aws_config_configuration_aggregators', 604800000),('aws_config_configuration_recorders', 604800000),('aws_config_conformance_pack_rule_compliances', 604800000),('aws_config_conformance_packs', 604800000),('aws_config_delivery_channel_statuses', 604800000),('aws_config_delivery_channels', 604800000),('aws_config_remediation_configurations', 604800000),('aws_config_retention_configurations', 604800000),('aws_costexplorer_cost_30d', 604800000),('aws_costexplorer_cost_forecast_30d', 604800000),('aws_datapipeline_pipelines', 604800000),('aws_datasync_agents', 604800000),('aws_datasync_azureblob_locations', 604800000),('aws_datasync_efs_locations', 604800000),('aws_datasync_fsxlustre_locations', 604800000),('aws_datasync_fsxontap_locations', 604800000),('aws_datasync_fsxopenzfs_locations', 604800000),('aws_datasync_fsxwindows_locations', 604800000),('aws_datasync_hdfs_locations', 604800000),('aws_datasync_locations', 604800000),('aws_datasync_nfs_locations', 604800000),('aws_datasync_objectstorage_locations', 604800000),('aws_datasync_s3_locations', 604800000),('aws_datasync_smb_locations', 604800000),('aws_dax_clusters', 604800000),('aws_detective_graph_members', 604800000),('aws_detective_graphs', 604800000),('aws_directconnect_connections', 604800000),('aws_directconnect_gateway_associations', 604800000),('aws_directconnect_gateway_attachments', 604800000),('aws_directconnect_gateways', 604800000),('aws_directconnect_lags', 604800000),('aws_directconnect_locations', 604800000),('aws_directconnect_virtual_gateways', 604800000),('aws_directconnect_virtual_interfaces', 604800000),('aws_directoryservice_directories', 604800000),('aws_dms_certificates', 604800000),('aws_dms_event_subscriptions', 604800000),('aws_dms_replication_instances', 604800000),('aws_dms_replication_subnet_groups', 604800000),('aws_dms_replication_tasks', 604800000),('aws_docdb_certificates', 604800000),('aws_docdb_cluster_snapshots', 604800000),('aws_docdb_clusters', 604800000),('aws_docdb_event_categories', 604800000),('aws_docdb_event_subscriptions', 604800000),('aws_docdb_events', 604800000),('aws_docdb_global_clusters', 604800000),('aws_docdb_instances', 604800000),('aws_docdb_pending_maintenance_actions', 604800000),('aws_docdb_subnet_groups', 604800000),('aws_ebs_default_kms_key_ids', 604800000),('aws_ebs_encryption_by_defaults', 604800000),('aws_ec2_account_attributes', 604800000),('aws_ec2_byoip_cidrs', 604800000),('aws_ec2_capacity_reservations', 604800000),('aws_ec2_customer_gateways', 604800000),('aws_ec2_dhcp_options', 604800000),('aws_ec2_ebs_snapshot_attributes', 604800000),('aws_ec2_ebs_snapshots', 604800000),('aws_ec2_ebs_volume_statuses', 604800000),('aws_ec2_ebs_volumes', 604800000),('aws_ec2_egress_only_internet_gateways', 604800000),('aws_ec2_eips', 604800000),('aws_ec2_flow_logs', 604800000),('aws_ec2_hosts', 604800000),('aws_ec2_image_block_public_access_states', 604800000),('aws_ec2_image_last_launched_times', 604800000),('aws_ec2_image_launch_permissions', 604800000),('aws_ec2_instance_connect_endpoints', 604800000),('aws_ec2_instance_credit_specifications', 604800000),('aws_ec2_instance_statuses', 604800000),('aws_ec2_internet_gateways', 604800000),('aws_ec2_ipam_address_history', 604800000),('aws_ec2_ipam_byoasns', 604800000),('aws_ec2_ipam_discovered_accounts', 604800000),('aws_ec2_ipam_discovered_public_addresses', 604800000),('aws_ec2_ipam_discovered_resource_cidrs', 604800000),('aws_ec2_ipam_pool_allocations', 604800000),('aws_ec2_ipam_pool_cidrs', 604800000),('aws_ec2_ipam_pools', 604800000),('aws_ec2_ipam_resource_cidrs', 604800000),('aws_ec2_ipam_resource_discoveries', 604800000),('aws_ec2_ipam_resource_discovery_associations', 604800000),('aws_ec2_ipam_scopes', 604800000),('aws_ec2_ipams', 604800000),('aws_ec2_key_pairs', 604800000),('aws_ec2_launch_template_versions', 604800000),('aws_ec2_launch_templates', 604800000),('aws_ec2_managed_prefix_lists', 604800000),('aws_ec2_nat_gateways', 604800000),('aws_ec2_network_acls', 604800000),('aws_ec2_network_interfaces', 604800000),('aws_ec2_regional_configs', 604800000),('aws_ec2_replace_root_volume_tasks', 604800000),('aws_ec2_reserved_instances', 604800000),('aws_ec2_route_tables', 604800000),('aws_ec2_serial_console_access_statuses', 604800000),('aws_ec2_snapshot_block_public_access_states', 604800000),('aws_ec2_spot_fleet_instances', 604800000),('aws_ec2_spot_fleet_requests', 604800000),('aws_ec2_spot_instance_requests', 604800000),('aws_ec2_subnets', 604800000),('aws_ec2_traffic_mirror_filters', 604800000),('aws_ec2_traffic_mirror_sessions', 604800000),('aws_ec2_traffic_mirror_targets', 604800000),('aws_ec2_transit_gateway_attachments', 604800000),('aws_ec2_transit_gateway_multicast_domains', 604800000),('aws_ec2_transit_gateway_peering_attachments', 604800000),('aws_ec2_transit_gateway_route_tables', 604800000),('aws_ec2_transit_gateway_vpc_attachments', 604800000),('aws_ec2_transit_gateways', 604800000),('aws_ec2_vpc_endpoint_connections', 604800000),('aws_ec2_vpc_endpoint_service_configurations', 604800000),('aws_ec2_vpc_endpoints', 604800000),('aws_ec2_vpc_peering_connections', 604800000),('aws_ec2_vpcs', 604800000),('aws_ec2_vpn_connections', 604800000),('aws_ec2_vpn_gateways', 604800000),('aws_ecr_pull_through_cache_rules', 604800000),('aws_ecr_registries', 604800000),('aws_ecr_registry_policies', 604800000),('aws_ecr_repositories', 604800000),('aws_ecr_repository_image_scan_findings', 604800000),('aws_ecr_repository_images', 604800000),('aws_ecr_repository_lifecycle_policies', 604800000),('aws_ecr_repository_policies', 604800000),('aws_ecrpublic_repositories', 604800000),('aws_ecrpublic_repository_images', 604800000),('aws_ecs_cluster_container_instances', 604800000),('aws_ecs_cluster_services', 604800000),('aws_ecs_cluster_task_sets', 604800000),('aws_ecs_cluster_tasks', 604800000),('aws_ecs_clusters', 604800000),('aws_ecs_task_definitions', 604800000),('aws_efs_access_points', 604800000),('aws_efs_filesystems', 604800000),('aws_eks_cluster_addons', 604800000),('aws_eks_cluster_node_groups', 604800000),('aws_eks_cluster_oidc_identity_provider_configs', 604800000),('aws_eks_clusters', 604800000),('aws_eks_fargate_profiles', 604800000),('aws_elasticache_clusters', 604800000),('aws_elasticache_events', 604800000),('aws_elasticache_global_replication_groups', 604800000),('aws_elasticache_replication_groups', 604800000),('aws_elasticache_reserved_cache_nodes', 604800000),('aws_elasticache_serverless_cache_snapshots', 604800000),('aws_elasticache_serverless_caches', 604800000),('aws_elasticache_snapshots', 604800000),('aws_elasticache_subnet_groups', 604800000),('aws_elasticache_update_actions', 604800000),('aws_elasticache_user_groups', 604800000),('aws_elasticache_users', 604800000),('aws_elasticbeanstalk_application_versions', 604800000),('aws_elasticbeanstalk_applications', 604800000),('aws_elasticbeanstalk_configuration_options', 604800000),('aws_elasticbeanstalk_configuration_settings', 604800000),('aws_elasticbeanstalk_environments', 604800000),('aws_elasticsearch_domains', 604800000),('aws_elasticsearch_packages', 604800000),('aws_elasticsearch_reserved_instances', 604800000),('aws_elasticsearch_versions', 604800000),('aws_elasticsearch_vpc_endpoints', 604800000),('aws_elastictranscoder_pipeline_jobs', 604800000),('aws_elastictranscoder_pipelines', 604800000),('aws_elastictranscoder_presets', 604800000),('aws_emr_block_public_access_configs', 604800000),('aws_emr_cluster_instance_fleets', 604800000),('aws_emr_cluster_instance_groups', 604800000),('aws_emr_cluster_instances', 604800000),('aws_emr_clusters', 604800000),('aws_emr_notebook_executions', 604800000),('aws_emr_release_labels', 604800000),('aws_emr_security_configurations', 604800000),('aws_emr_steps', 604800000),('aws_emr_studio_session_mappings', 604800000),('aws_emr_studios', 604800000),('aws_eventbridge_api_destinations', 604800000),('aws_eventbridge_archives', 604800000),('aws_eventbridge_connections', 604800000),('aws_eventbridge_endpoints', 604800000),('aws_eventbridge_event_bus_rules', 604800000),('aws_eventbridge_event_bus_targets', 604800000),('aws_eventbridge_event_buses', 604800000),('aws_eventbridge_event_sources', 604800000),('aws_eventbridge_replays', 604800000),('aws_firehose_delivery_streams', 604800000),('aws_frauddetector_batch_imports', 604800000),('aws_frauddetector_batch_predictions', 604800000),('aws_frauddetector_detectors', 604800000),('aws_frauddetector_entity_types', 604800000),('aws_frauddetector_event_types', 604800000),('aws_frauddetector_external_models', 604800000),('aws_frauddetector_labels', 604800000),('aws_frauddetector_model_versions', 604800000),('aws_frauddetector_models', 604800000),('aws_frauddetector_outcomes', 604800000),('aws_frauddetector_rules', 604800000),('aws_frauddetector_variables', 604800000),('aws_fsx_backups', 604800000),('aws_fsx_data_repository_associations', 604800000),('aws_fsx_data_repository_tasks', 604800000),('aws_fsx_file_caches', 604800000),('aws_fsx_file_systems', 604800000),('aws_fsx_snapshots', 604800000),('aws_fsx_storage_virtual_machines', 604800000),('aws_fsx_volumes', 604800000),('aws_glacier_data_retrieval_policies', 604800000),('aws_glacier_vault_access_policies', 604800000),('aws_glacier_vault_lock_policies', 604800000),('aws_glacier_vault_notifications', 604800000),('aws_glacier_vaults', 604800000),('aws_globalaccelerator_accelerators', 604800000),('aws_globalaccelerator_custom_routing_accelerators', 604800000),('aws_glue_classifiers', 604800000),('aws_glue_crawlers', 604800000),('aws_glue_database_table_indexes', 604800000),('aws_glue_database_tables', 604800000),('aws_glue_databases', 604800000),('aws_glue_datacatalog_encryption_settings', 604800000),('aws_glue_dev_endpoints', 604800000),('aws_glue_job_runs', 604800000),('aws_glue_jobs', 604800000),('aws_glue_ml_transform_task_runs', 604800000),('aws_glue_ml_transforms', 604800000),('aws_glue_registries', 604800000),('aws_glue_registry_schema_versions', 604800000),('aws_glue_registry_schemas', 604800000),('aws_glue_security_configurations', 604800000),('aws_glue_triggers', 604800000),('aws_glue_workflows', 604800000),('aws_health_affected_entities', 604800000),('aws_health_event_details', 604800000),('aws_health_events', 604800000),('aws_health_org_event_details', 604800000),('aws_health_organization_affected_entities', 604800000),('aws_health_organization_events', 604800000),('aws_healthlake_fhir_datastores', 604800000),('aws_iam_account_authorization_details', 604800000),('aws_iam_accounts', 604800000),('aws_iam_group_attached_policies', 604800000),('aws_iam_group_last_accessed_details', 604800000),('aws_iam_group_policies', 604800000),('aws_iam_groups', 604800000),('aws_iam_instance_profiles', 604800000),('aws_iam_mfa_devices', 604800000),('aws_iam_openid_connect_identity_providers', 604800000),('aws_iam_password_policies', 604800000),('aws_iam_policies', 604800000),('aws_iam_policy_default_versions', 604800000),('aws_iam_policy_last_accessed_details', 604800000),('aws_iam_policy_versions', 604800000),('aws_iam_role_attached_policies', 604800000),('aws_iam_role_last_accessed_details', 604800000),('aws_iam_role_policies', 604800000),('aws_iam_roles', 604800000),('aws_iam_saml_identity_providers', 604800000),('aws_iam_server_certificates', 604800000),('aws_iam_signing_certificates', 604800000),('aws_iam_ssh_public_keys', 604800000),('aws_iam_user_access_keys', 604800000),('aws_iam_user_attached_policies', 604800000),('aws_iam_user_groups', 604800000),('aws_iam_user_last_accessed_details', 604800000),('aws_iam_user_policies', 604800000),('aws_iam_users', 604800000),('aws_iam_virtual_mfa_devices', 604800000),('aws_inspector2_covered_resources', 604800000),('aws_inspector_findings', 604800000),('aws_iot_billing_groups', 604800000),('aws_iot_ca_certificates', 604800000),('aws_iot_certificates', 604800000),('aws_iot_jobs', 604800000),('aws_iot_policies', 604800000),('aws_iot_security_profiles', 604800000),('aws_iot_streams', 604800000),('aws_iot_thing_groups', 604800000),('aws_iot_thing_types', 604800000),('aws_iot_things', 604800000),('aws_iot_topic_rules', 604800000),('aws_kafka_cluster_operations', 604800000),('aws_kafka_cluster_policies', 604800000),('aws_kafka_clusters', 604800000),('aws_kafka_configurations', 604800000),('aws_kafka_nodes', 604800000),('aws_keyspaces_keyspaces', 604800000),('aws_keyspaces_tables', 604800000),('aws_kinesis_streams', 604800000),('aws_kms_aliases', 604800000),('aws_kms_key_grants', 604800000),('aws_kms_key_policies', 604800000),('aws_kms_key_rotation_statuses', 604800000),('aws_kms_key_rotations', 604800000),('aws_kms_keys', 604800000),('aws_lexv2_bot_aliases', 604800000),('aws_lexv2_bots', 604800000),('aws_lightsail_alarms', 604800000),('aws_lightsail_bucket_access_keys', 604800000),('aws_lightsail_buckets', 604800000),('aws_lightsail_certificates', 604800000),('aws_lightsail_container_service_deployments', 604800000),('aws_lightsail_container_service_images', 604800000),('aws_lightsail_container_services', 604800000),('aws_lightsail_database_events', 604800000),('aws_lightsail_database_log_events', 604800000),('aws_lightsail_database_parameters', 604800000),('aws_lightsail_database_snapshots', 604800000),('aws_lightsail_databases', 604800000),('aws_lightsail_disk_snapshots', 604800000),('aws_lightsail_disks', 604800000),('aws_lightsail_distributions', 604800000),('aws_lightsail_instance_port_states', 604800000),('aws_lightsail_instance_snapshots', 604800000),('aws_lightsail_instances', 604800000),('aws_lightsail_load_balancer_tls_certificates', 604800000),('aws_lightsail_load_balancers', 604800000),('aws_lightsail_static_ips', 604800000),('aws_memorydb_reserved_nodes', 604800000),('aws_mq_broker_configuration_revisions', 604800000),('aws_mq_broker_configurations', 604800000),('aws_mq_broker_users', 604800000),('aws_mq_brokers', 604800000),('aws_mwaa_environments', 604800000),('aws_neptune_cluster_snapshots', 604800000),('aws_neptune_clusters', 604800000),('aws_neptune_event_subscriptions', 604800000),('aws_neptune_global_clusters', 604800000),('aws_neptune_instances', 604800000),('aws_neptune_subnet_groups', 604800000),('aws_networkfirewall_firewall_policies', 604800000),('aws_networkfirewall_firewalls', 604800000),('aws_networkfirewall_rule_groups', 604800000),('aws_networkfirewall_tls_inspection_configurations', 604800000),('aws_networkmanager_global_networks', 604800000),('aws_networkmanager_links', 604800000),('aws_networkmanager_sites', 604800000),('aws_networkmanager_transit_gateway_registrations', 604800000),('aws_opensearch_reserved_instances', 604800000),('aws_pinpoint_apps', 604800000),('aws_qldb_ledger_journal_kinesis_streams', 604800000),('aws_qldb_ledger_journal_s3_exports', 604800000),('aws_qldb_ledgers', 604800000),('aws_ram_principals', 604800000),('aws_ram_resource_share_associations', 604800000),('aws_ram_resource_share_invitations', 604800000),('aws_ram_resource_share_permissions', 604800000),('aws_ram_resource_shares', 604800000),('aws_ram_resource_types', 604800000),('aws_ram_resources', 604800000),('aws_rds_certificates', 604800000),('aws_rds_cluster_backtracks', 604800000),('aws_rds_db_proxies', 604800000),('aws_rds_db_proxy_endpoints', 604800000),('aws_rds_db_proxy_target_groups', 604800000),('aws_rds_db_proxy_targets', 604800000),('aws_rds_db_security_groups', 604800000),('aws_rds_event_subscriptions', 604800000),('aws_rds_events', 604800000),('aws_rds_global_clusters', 604800000),('aws_rds_instance_resource_metrics', 604800000),('aws_rds_option_groups', 604800000),('aws_rds_pending_maintenance_actions', 604800000),('aws_rds_reserved_instances', 604800000),('aws_rds_subnet_groups', 604800000),('aws_redshift_cluster_parameter_groups', 604800000),('aws_redshift_cluster_parameters', 604800000),('aws_redshift_clusters', 604800000),('aws_redshift_data_shares', 604800000),('aws_redshift_endpoint_accesses', 604800000),('aws_redshift_endpoint_authorizations', 604800000),('aws_redshift_event_subscriptions', 604800000),('aws_redshift_events', 604800000),('aws_redshift_reserved_nodes', 604800000),('aws_redshift_snapshots', 604800000),('aws_redshift_subnet_groups', 604800000),('aws_regions', 604800000),('aws_resiliencehub_alarm_recommendations', 604800000),('aws_resiliencehub_app_assessments', 604800000),('aws_resiliencehub_app_component_compliances', 604800000),('aws_resiliencehub_app_version_resource_mappings', 604800000),('aws_resiliencehub_app_version_resources', 604800000),('aws_resiliencehub_app_versions', 604800000),('aws_resiliencehub_apps', 604800000),('aws_resiliencehub_component_recommendations', 604800000),('aws_resiliencehub_recommendation_templates', 604800000),('aws_resiliencehub_resiliency_policies', 604800000),('aws_resiliencehub_sop_recommendations', 604800000),('aws_resiliencehub_suggested_resiliency_policies', 604800000),('aws_resiliencehub_test_recommendations', 604800000),('aws_resourcegroups_resource_groups', 604800000),('aws_route53_delegation_sets', 604800000),('aws_route53_domains', 604800000),('aws_route53_health_checks', 604800000),('aws_route53_hosted_zone_query_logging_configs', 604800000),('aws_route53_hosted_zone_resource_record_sets', 604800000),('aws_route53_hosted_zone_traffic_policy_instances', 604800000),('aws_route53_hosted_zones', 604800000),('aws_route53_operations', 604800000),('aws_route53_traffic_policies', 604800000),('aws_route53_traffic_policy_versions', 604800000),('aws_route53recoverycontrolconfig_clusters', 604800000),('aws_route53recoverycontrolconfig_control_panels', 604800000),('aws_route53recoverycontrolconfig_routing_controls', 604800000),('aws_route53recoverycontrolconfig_safety_rules', 604800000),('aws_route53recoveryreadiness_cells', 604800000),('aws_route53recoveryreadiness_readiness_checks', 604800000),('aws_route53recoveryreadiness_recovery_groups', 604800000),('aws_route53recoveryreadiness_resource_sets', 604800000),('aws_route53resolver_firewall_configs', 604800000),('aws_route53resolver_firewall_domain_lists', 604800000),('aws_route53resolver_firewall_rule_group_associations', 604800000),('aws_route53resolver_firewall_rule_groups', 604800000),('aws_route53resolver_resolver_endpoints', 604800000),('aws_route53resolver_resolver_query_log_config_associations', 604800000),('aws_route53resolver_resolver_query_log_configs', 604800000),('aws_route53resolver_resolver_rule_associations', 604800000),('aws_route53resolver_resolver_rules', 604800000),('aws_sagemaker_apps', 604800000),('aws_sagemaker_endpoint_configurations', 604800000),('aws_sagemaker_endpoints', 604800000),('aws_sagemaker_models', 604800000),('aws_sagemaker_notebook_instances', 604800000),('aws_sagemaker_training_jobs', 604800000),('aws_savingsplans_plans', 604800000),('aws_scheduler_schedule_groups', 604800000),('aws_secretsmanager_secret_versions', 604800000),('aws_secretsmanager_secrets', 604800000),('aws_servicecatalog_launch_paths', 604800000),('aws_servicecatalog_portfolios', 604800000),('aws_servicecatalog_products', 604800000),('aws_servicecatalog_provisioned_products', 604800000),('aws_servicecatalog_provisioning_artifacts', 604800000),('aws_servicecatalog_provisioning_parameters', 604800000),('aws_servicediscovery_instances', 604800000),('aws_servicediscovery_namespaces', 604800000),('aws_servicediscovery_services', 604800000),('aws_ses_active_receipt_rule_sets', 604800000),('aws_ses_configuration_set_event_destinations', 604800000),('aws_ses_configuration_sets', 604800000),('aws_ses_contact_lists', 604800000),('aws_ses_custom_verification_email_templates', 604800000),('aws_ses_identities', 604800000),('aws_ses_templates', 604800000),('aws_shield_attacks', 604800000),('aws_shield_protection_groups', 604800000),('aws_shield_protections', 604800000),('aws_shield_subscriptions', 604800000),('aws_signer_signing_profiles', 604800000),('aws_sns_subscriptions', 604800000),('aws_sqs_queues', 604800000),('aws_ssm_associations', 604800000),('aws_ssm_compliance_summary_items', 604800000),('aws_ssm_document_versions', 604800000),('aws_ssm_documents', 604800000),('aws_ssm_instance_compliance_items', 604800000),('aws_ssm_instance_patches', 604800000),('aws_ssm_instances', 604800000),('aws_ssm_inventories', 604800000),('aws_ssm_inventory_schemas', 604800000),('aws_ssm_patch_baselines', 604800000),('aws_ssm_sessions', 604800000),('aws_ssmincidents_incident_findings', 604800000),('aws_ssmincidents_incident_related_items', 604800000),('aws_ssmincidents_incident_timeline_events', 604800000),('aws_ssmincidents_incidents', 604800000),('aws_ssmincidents_response_plans', 604800000),('aws_stepfunctions_activities', 604800000),('aws_stepfunctions_state_machines', 604800000),('aws_support_case_communications', 604800000),('aws_support_cases', 604800000),('aws_support_services', 604800000),('aws_support_severity_levels', 604800000),('aws_support_trusted_advisor_check_results', 604800000),('aws_support_trusted_advisor_check_summaries', 604800000),('aws_support_trusted_advisor_checks', 604800000),('aws_timestream_databases', 604800000),('aws_timestream_tables', 604800000),('aws_transfer_agreements', 604800000),('aws_transfer_certificates', 604800000),('aws_transfer_connectors', 604800000),('aws_transfer_profiles', 604800000),('aws_transfer_servers', 604800000),('aws_transfer_users', 604800000),('aws_transfer_workflows', 604800000),('aws_waf_rule_groups', 604800000),('aws_waf_rules', 604800000),('aws_waf_subscribed_rule_groups', 604800000),('aws_waf_web_acls', 604800000),('aws_wafregional_rate_based_rules', 604800000),('aws_wafregional_rule_groups', 604800000),('aws_wafregional_rules', 604800000),('aws_wafregional_web_acls', 604800000),('aws_wafv2_ipsets', 604800000),('aws_wafv2_managed_rule_groups', 604800000),('aws_wafv2_regex_pattern_sets', 604800000),('aws_wafv2_rule_groups', 604800000),('aws_wafv2_web_acls', 604800000),('aws_workspaces_connection_alias_permissions', 604800000),('aws_workspaces_connection_aliases', 604800000),('aws_workspaces_directories', 604800000),('aws_workspaces_workspaces', 604800000),('aws_xray_encryption_configs', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsRemainingData",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsRemainingDataPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsRemainingData",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionCloudquerySourceAwsRemainingDataFirelensLogGroupAEF7D0F2",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsRemainingDataFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8",
            "Arn",
          ],
        },
        "Family": "AwsRemainingData",
        "Memory": "3072",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsRemainingDataD00498F8",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsSSMParametersScheduledEventRule0A998B82": {
      "Properties": {
        "ScheduleExpression": "cron(20 1 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRole510C5A17",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionCloudquerySourceAwsSSMParametersFirelensLogGroup0210F31D": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v32.47.1
  tables:
    - aws_ssm_parameters
  skip_dependent_tables: true
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsSSMParametersAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsSSMParameters",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsSSMParametersContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsSSMParametersAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_ssm_parameters', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsSSMParameters",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsSSMParametersPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "AwsSSMParameters",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionCloudquerySourceAwsSSMParametersFirelensLogGroup0210F31D",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsSSMParametersFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1",
            "Arn",
          ],
        },
        "Family": "AwsSSMParameters",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskAwsSSMParametersD3C61E16",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRole510C5A17": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRoleDefaultPolicy042DAF95": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskAwsSSMParametersD3C61E16",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRoleDefaultPolicy042DAF95",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRole510C5A17",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRoleDefaultPolicy22EC1FE1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsSSMParametersTaskDefinitionCloudquerySourceAwsSSMParametersFirelensLogGroup0210F31D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRoleDefaultPolicy22EC1FE1",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceEndOfLifeScheduledEventRule8F5B6605": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 1 * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceEndOfLifeTaskDefinition44F38EF3",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceEndOfLifeTaskDefinitionEventsRole86C3A19E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceEndOfLifeTaskDefinition44F38EF3": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: endoflife
  path: cloudquery/endoflife
  registry: cloudquery
  version: v1.4.3
  tables:
    - endoflife_products
  destinations:
    - postgresql
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-EndOfLifeAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "EndOfLife",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-EndOfLifeContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-EndOfLifeAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('endoflife_products', 2592000000) ON CONFLICT (table_name) DO UPDATE SET frequency = 2592000000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "EndOfLife",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-EndOfLifePostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "EndOfLife",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceEndOfLifeTaskDefinitionCloudquerySourceEndOfLifeFirelensLogGroup772C5E06",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-EndOfLifeFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034",
            "Arn",
          ],
        },
        "Family": "EndOfLife",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskEndOfLifeC67315CC",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionCloudquerySourceEndOfLifeFirelensLogGroup772C5E06": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionEventsRole86C3A19E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionEventsRoleDefaultPolicy91A3F11B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceEndOfLifeTaskDefinition44F38EF3",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskEndOfLifeC67315CC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceEndOfLifeTaskDefinitionEventsRoleDefaultPolicy91A3F11B",
        "Roles": [
          {
            "Ref": "CloudquerySourceEndOfLifeTaskDefinitionEventsRole86C3A19E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionExecutionRoleDefaultPolicyA7DCE2DB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceEndOfLifeTaskDefinitionCloudquerySourceEndOfLifeFirelensLogGroup772C5E06",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceEndOfLifeTaskDefinitionExecutionRoleDefaultPolicyA7DCE2DB",
        "Roles": [
          {
            "Ref": "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceFastlyServicesScheduledEventRule1F83E593": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceFastlyServicesTaskDefinitionDCCD3FD4",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleE821B76C",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionCloudquerySourceFastlyServicesFirelensLogGroupF5954401": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionDCCD3FD4": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: fastly
  path: cloudquery/fastly
  version: v4.10.3
  tables:
    - fastly_account_users
    - fastly_service_backends
    - fastly_service_domains
    - fastly_service_health_checks
    - fastly_service_versions
    - fastly_services
  skip_dependent_tables: true
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    fastly_api_key: \${FASTLY_API_KEY}
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-FastlyServicesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "FastlyServices",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-FastlyServicesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "FASTLY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "fastlycredentialsF42D3C80",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-FastlyServicesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('fastly_account_users', 86400000),('fastly_service_backends', 86400000),('fastly_service_domains', 86400000),('fastly_service_health_checks', 86400000),('fastly_service_versions', 86400000),('fastly_services', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "FastlyServices",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-FastlyServicesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "FastlyServices",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceFastlyServicesTaskDefinitionCloudquerySourceFastlyServicesFirelensLogGroupF5954401",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-FastlyServicesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9",
            "Arn",
          ],
        },
        "Family": "FastlyServices",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskFastlyServices0806BEC5",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleDefaultPolicy4E34F504": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceFastlyServicesTaskDefinitionDCCD3FD4",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskFastlyServices0806BEC5",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleDefaultPolicy4E34F504",
        "Roles": [
          {
            "Ref": "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleE821B76C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleE821B76C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleDefaultPolicy1B888D16": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "fastlycredentialsF42D3C80",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceFastlyServicesTaskDefinitionCloudquerySourceFastlyServicesFirelensLogGroupF5954401",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleDefaultPolicy1B888D16",
        "Roles": [
          {
            "Ref": "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGalaxiesScheduledEventRuleCC774CB8": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGalaxiesTaskDefinition0777FEFC",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGalaxiesTaskDefinitionEventsRoleD1AF9A82",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGalaxiesTaskDefinition0777FEFC": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              {
                "Fn::Join": [
                  "",
                  [
                    "printf 'kind: source
spec:
  name: galaxies
  path: guardian/galaxies
  registry: github
  version: v1.1.11
  destinations:
    - postgresql
  tables:
    - galaxies_people_profile_info_table
    - galaxies_people_table
    - galaxies_streams_table
    - galaxies_teams_table
  spec:
    bucket: ",
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "/",
                            {
                              "Fn::Select": [
                                5,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "ActionsStaticSiteBucketArnParam",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    "
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
                  ],
                ],
              },
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GalaxiesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "Galaxies",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GalaxiesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GalaxiesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('galaxies_people_profile_info_table', 86400000),('galaxies_people_table', 86400000),('galaxies_streams_table', 86400000),('galaxies_teams_table', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "Galaxies",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GalaxiesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "Galaxies",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGalaxiesTaskDefinitionCloudquerySourceGalaxiesFirelensLogGroupB5272E0D",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GalaxiesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B",
            "Arn",
          ],
        },
        "Family": "Galaxies",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGalaxiesC4200C94",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGalaxiesTaskDefinitionCloudquerySourceGalaxiesFirelensLogGroupB5272E0D": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGalaxiesTaskDefinitionEventsRoleD1AF9A82": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGalaxiesTaskDefinitionEventsRoleDefaultPolicy022DA6EA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGalaxiesTaskDefinition0777FEFC",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGalaxiesC4200C94",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGalaxiesTaskDefinitionEventsRoleDefaultPolicy022DA6EA",
        "Roles": [
          {
            "Ref": "CloudquerySourceGalaxiesTaskDefinitionEventsRoleD1AF9A82",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDefaultPolicyB6D2CB7A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGalaxiesTaskDefinitionCloudquerySourceGalaxiesFirelensLogGroupB5272E0D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDefaultPolicyB6D2CB7A",
        "Roles": [
          {
            "Ref": "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubIssuesScheduledEventRuleAF7C253C": {
      "Properties": {
        "ScheduleExpression": "cron(0 2 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionFA21D536",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubIssuesTaskDefinitionEventsRole056ACC7E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionCloudquerySourceGitHubIssuesFirelensLogGroupE9112ED9": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionEventsRole056ACC7E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionEventsRoleDefaultPolicy13E8811A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionFA21D536",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGitHubIssues3E254C0F",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubIssuesTaskDefinitionEventsRoleDefaultPolicy13E8811A",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionEventsRole056ACC7E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRoleDefaultPolicyFA58BC48": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubIssuesTaskDefinitionCloudquerySourceGitHubIssuesFirelensLogGroupE9112ED9",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRoleDefaultPolicyFA58BC48",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionFA21D536": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v14.2.0
  tables:
    - github_issues
  skip_dependent_tables: true
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubIssuesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubIssues",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubIssuesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubIssuesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_issues', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubIssues",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubIssuesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "GitHubIssues",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionCloudquerySourceGitHubIssuesFirelensLogGroupE9112ED9",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubIssuesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3",
            "Arn",
          ],
        },
        "Family": "GitHubIssues",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGitHubIssues3E254C0F",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubLanguagesScheduledEventRule3F047D8E": {
      "Properties": {
        "ScheduleExpression": "rate(7 days)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionDA995E2B",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleD0480706",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionCloudquerySourceGitHubLanguagesFirelensLogGroup38EAAC3E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionDA995E2B": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github-languages
  path: guardian/github-languages
  version: v0.0.7
  destinations:
    - postgresql
  tables:
    - github_languages
  registry: github
  spec:
    org: guardian
    private_key_path: /usr/share/cloudquery/github-private-key
    app_id: \${file:/usr/share/cloudquery/github-app-id}
    installation_id: \${file:/usr/share/cloudquery/github-installation-id}
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubLanguagesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubLanguages",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubLanguagesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubLanguagesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_languages', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubLanguages",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubLanguagesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "GitHubLanguages",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionCloudquerySourceGitHubLanguagesFirelensLogGroup38EAAC3E",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubLanguagesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D",
            "Arn",
          ],
        },
        "Family": "GitHubLanguages",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGitHubLanguages39076331",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleD0480706": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleDefaultPolicy1B11BE73": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionDA995E2B",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGitHubLanguages39076331",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleDefaultPolicy1B11BE73",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleD0480706",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleDefaultPolicy9D57CA88": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubLanguagesTaskDefinitionCloudquerySourceGitHubLanguagesFirelensLogGroup38EAAC3E",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleDefaultPolicy9D57CA88",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubReleasesScheduledEventRule0118D541": {
      "Properties": {
        "ScheduleExpression": "cron(0 10 ? * MON *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubReleasesTaskDefinition3B879E45",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubReleasesTaskDefinitionEventsRoleB8F1DABE",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubReleasesTaskDefinition3B879E45": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v14.2.0
  tables:
    - github_releases
  skip_dependent_tables: true
  destinations:
    - postgresql
  spec:
    repos:
      - guardian/cdk
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: false
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubReleasesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubReleases",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubReleasesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubReleasesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_releases', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubReleases",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubReleasesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "GitHubReleases",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubReleasesTaskDefinitionCloudquerySourceGitHubReleasesFirelensLogGroupC7D475A1",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubReleasesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubReleasesTaskDefinitionExecutionRole080EB49C",
            "Arn",
          ],
        },
        "Family": "GitHubReleases",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubReleases",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGitHubReleases98866D2A",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubReleasesTaskDefinitionCloudquerySourceGitHubReleasesFirelensLogGroupC7D475A1": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubReleases",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubReleasesTaskDefinitionEventsRoleB8F1DABE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubReleases",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubReleasesTaskDefinitionEventsRoleDefaultPolicyB359CF07": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubReleasesTaskDefinition3B879E45",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubReleasesTaskDefinitionExecutionRole080EB49C",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGitHubReleases98866D2A",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubReleasesTaskDefinitionEventsRoleDefaultPolicyB359CF07",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubReleasesTaskDefinitionEventsRoleB8F1DABE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubReleasesTaskDefinitionExecutionRole080EB49C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubReleases",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubReleasesTaskDefinitionExecutionRoleDefaultPolicy6AC5A3F3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubReleasesTaskDefinitionCloudquerySourceGitHubReleasesFirelensLogGroupC7D475A1",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubReleasesTaskDefinitionExecutionRoleDefaultPolicy6AC5A3F3",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubReleasesTaskDefinitionExecutionRole080EB49C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubRepositoriesScheduledEventRuleC7F5836E": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRole93DB1A26",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v14.2.0
  tables:
    - github_repositories
    - github_repository_branches
    - github_repository_collaborators
    - github_repository_custom_properties
    - github_repository_sboms
    - github_workflows
  skip_dependent_tables: true
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubRepositoriesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubRepositories",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubRepositoriesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubRepositoriesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_repositories', 86400000),('github_repository_branches', 86400000),('github_repository_collaborators', 86400000),('github_repository_custom_properties', 86400000),('github_repository_sboms', 86400000),('github_workflows', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubRepositories",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubRepositoriesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "GitHubRepositories",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinitionCloudquerySourceGitHubRepositoriesFirelensLogGroup42A4D85D",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubRepositoriesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4",
            "Arn",
          ],
        },
        "Family": "GitHubRepositories",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGitHubRepositoriesA1D893AF",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionCloudquerySourceGitHubRepositoriesFirelensLogGroup42A4D85D": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRole93DB1A26": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRoleDefaultPolicy1ECEEEB2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGitHubRepositoriesA1D893AF",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRoleDefaultPolicy1ECEEEB2",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRole93DB1A26",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRoleDefaultPolicy04F69199": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubRepositoriesTaskDefinitionCloudquerySourceGitHubRepositoriesFirelensLogGroup42A4D85D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRoleDefaultPolicy04F69199",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubSecretScanningAlertsScheduledEventRule60C28F86": {
      "Properties": {
        "ScheduleExpression": "cron(0 23 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinition7E51E89B",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionEventsRoleA02D7E55",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubSecretScanningAlertsTaskDefinition7E51E89B": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v14.2.0
  tables:
    - github_secret_scanning_alerts
  skip_dependent_tables: true
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubSecretScanningAlertsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubSecretScanningAlerts",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubSecretScanningAlertsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubSecretScanningAlertsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_secret_scanning_alerts', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubSecretScanningAlerts",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubSecretScanningAlertsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "GitHubSecretScanningAlerts",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionCloudquerySourceGitHubSecretScanningAlertsFirelensLogGroup07A2F53B",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubSecretScanningAlertsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionExecutionRoleFE729E51",
            "Arn",
          ],
        },
        "Family": "GitHubSecretScanningAlerts",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubSecretScanningAlerts",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGitHubSecretScanningAlerts5AFC2BE7",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionCloudquerySourceGitHubSecretScanningAlertsFirelensLogGroup07A2F53B": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubSecretScanningAlerts",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionEventsRoleA02D7E55": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubSecretScanningAlerts",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionEventsRoleDefaultPolicyEE121F36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinition7E51E89B",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionExecutionRoleFE729E51",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGitHubSecretScanningAlerts5AFC2BE7",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionEventsRoleDefaultPolicyEE121F36",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionEventsRoleA02D7E55",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionExecutionRoleDefaultPolicyBD265DA8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionCloudquerySourceGitHubSecretScanningAlertsFirelensLogGroup07A2F53B",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionExecutionRoleDefaultPolicyBD265DA8",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionExecutionRoleFE729E51",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubSecretScanningAlertsTaskDefinitionExecutionRoleFE729E51": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubSecretScanningAlerts",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubTeamsScheduledEventRule051F542B": {
      "Properties": {
        "ScheduleExpression": "cron(0 10 ? * 1 *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionB01C9D3C",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubTeamsTaskDefinitionEventsRole3E2A5002",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionB01C9D3C": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v14.2.0
  tables:
    - github_organization_members
    - github_organizations
    - github_team_members
    - github_team_repositories
    - github_teams
  skip_dependent_tables: true
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubTeamsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubTeams",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "3276MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubTeamsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubTeamsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_organization_members', 604800000),('github_organizations', 604800000),('github_team_members', 604800000),('github_team_repositories', 604800000),('github_teams', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubTeams",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubTeamsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "GitHubTeams",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionCloudquerySourceGitHubTeamsFirelensLogGroup8B1FFADC",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubTeamsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "2048",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD",
            "Arn",
          ],
        },
        "Family": "GitHubTeams",
        "Memory": "4096",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskGitHubTeams57E3A035",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionCloudquerySourceGitHubTeamsFirelensLogGroup8B1FFADC": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionEventsRole3E2A5002": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionEventsRoleDefaultPolicy5B79609C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionB01C9D3C",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskGitHubTeams57E3A035",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubTeamsTaskDefinitionEventsRoleDefaultPolicy5B79609C",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionEventsRole3E2A5002",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRoleDefaultPolicy3618CA18": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubTeamsTaskDefinitionCloudquerySourceGitHubTeamsFirelensLogGroup8B1FFADC",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRoleDefaultPolicy3618CA18",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceNS1ScheduledEventRule1D618E3C": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceNS1TaskDefinition56258A70",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceNS1TaskDefinitionEventsRole2D5A948C",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceNS1TaskDefinition56258A70": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: ns1
  registry: grpc
  path: localhost:7777
  version: v0.0.0
  tables:
    - ns1_records
    - ns1_zones
  destinations:
    - postgresql
  spec:
    apiKey: \${NS1_API_KEY}
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-NS1AWSOTELCollector",
              },
              {
                "Condition": "START",
                "ContainerName": "CloudquerySource-NS1PluginContainer",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "NS1",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-NS1Container",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "NS1_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "ns1credentialsA8DD3B2D",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-NS1AWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Essential": false,
            "Image": "ghcr.io/guardian/cq-source-ns1:0.1.8",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-NS1PluginContainer",
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('ns1_records', 86400000),('ns1_zones', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "NS1",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-NS1PostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "NS1",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceNS1TaskDefinitionCloudquerySourceNS1FirelensLogGroup3A327514",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-NS1Firelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718",
            "Arn",
          ],
        },
        "Family": "NS1",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskNS1A6E237CE",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceNS1TaskDefinitionCloudquerySourceNS1FirelensLogGroup3A327514": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceNS1TaskDefinitionEventsRole2D5A948C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceNS1TaskDefinitionEventsRoleDefaultPolicyE40A5A68": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceNS1TaskDefinition56258A70",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskNS1A6E237CE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceNS1TaskDefinitionEventsRoleDefaultPolicyE40A5A68",
        "Roles": [
          {
            "Ref": "CloudquerySourceNS1TaskDefinitionEventsRole2D5A948C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceNS1TaskDefinitionExecutionRoleDefaultPolicyA99171A1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ns1credentialsA8DD3B2D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceNS1TaskDefinitionCloudquerySourceNS1FirelensLogGroup3A327514",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceNS1TaskDefinitionExecutionRoleDefaultPolicyA99171A1",
        "Roles": [
          {
            "Ref": "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceRiffRaffDataScheduledEventRuleDE690018": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                    {
                      "Ref": "SsmParameterValuePRODdeployriffraffexternaldatabaseaccesssecuritygroupC96584B6F00A464EAD1953AFF4B05118Parameter",
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionFF023225",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceRiffRaffDataTaskDefinitionEventsRole5EF6E214",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionCloudquerySourceRiffRaffDataFirelensLogGroup55CB2F37": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionEventsRole5EF6E214": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionEventsRoleDefaultPolicyAD8B28A1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionFF023225",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecataloguePRODtaskRiffRaffDataCC491393",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceRiffRaffDataTaskDefinitionEventsRoleDefaultPolicyAD8B28A1",
        "Roles": [
          {
            "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionEventsRole5EF6E214",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRoleDefaultPolicyA6FD732F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "RiffRaffDatabaseCredentials2033FD7A",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceRiffRaffDataTaskDefinitionCloudquerySourceRiffRaffDataFirelensLogGroup55CB2F37",
                  "Arn",
                ],
              },
            },
            {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": "arn:aws:ecr:eu-west-1:694911143906:repository/aws-guardduty-agent-fargate",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRoleDefaultPolicyA6FD732F",
        "Roles": [
          {
            "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionFF023225": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: postgresql
  path: cloudquery/postgresql
  version: v3.0.7
  destinations:
    - postgresql
  tables:
    - riffraff_deploys
  spec:
    connection_string: >-
      user=\${RIFFRAFF_DB_USERNAME} password=\${RIFFRAFF_DB_PASSWORD}
      host=\${RIFFRAFF_DB_HOST} port=5432 dbname=riffraff sslmode=verify-full
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: cloudquery
  path: cloudquery/postgresql
  version: v8.13.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  send_sync_summary: true
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-RiffRaffDataAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "RiffRaffData",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-RiffRaffDataContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "RIFFRAFF_DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "RiffRaffDatabaseCredentials2033FD7A",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "RIFFRAFF_DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "RiffRaffDatabaseCredentials2033FD7A",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "RIFFRAFF_DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "RiffRaffDatabaseCredentials2033FD7A",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-RiffRaffDataAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('riffraff_deploys', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "RiffRaffData",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-RiffRaffDataPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "RiffRaffData",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionCloudquerySourceRiffRaffDataFirelensLogGroup55CB2F37",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-RiffRaffDataFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2",
            "Arn",
          ],
        },
        "Family": "RiffRaffData",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecataloguePRODtaskRiffRaffDataCC491393",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudqueryUsageC8AA502D": {
      "DependsOn": [
        "CloudqueryUsageServiceRoleDefaultPolicyB5399C9A",
        "CloudqueryUsageServiceRoleF92030CD",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/cloudquery-usage/cloudquery-usage.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "cloudquery-usage",
            "CQ_API_KEY_PATH": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      2,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "CloudqueryUsageServiceRoleF92030CD",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CloudqueryUsageCloudqueryUsagecron090AllowEventRuleServiceCatalogueCloudqueryUsage6FECAFBF5AE90F86": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CloudqueryUsageC8AA502D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudqueryUsageCloudqueryUsagecron090F7B78876",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CloudqueryUsageCloudqueryUsagecron090F7B78876": {
      "Properties": {
        "ScheduleExpression": "cron(0 9 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CloudqueryUsageC8AA502D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudqueryUsageServiceRoleDefaultPolicyB5399C9A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/cloudquery-usage/cloudquery-usage.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/cloudquery-usage",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/cloudquery-usage/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/cloudquery_usage",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudqueryUsageServiceRoleDefaultPolicyB5399C9A",
        "Roles": [
          {
            "Ref": "CloudqueryUsageServiceRoleF92030CD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudqueryUsageServiceRoleF92030CD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DataAudit2FEB3068": {
      "DependsOn": [
        "DataAuditRoleDefaultPolicyD0BF34E5",
        "DataAuditRoleB3B90C40",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/data-audit/data-audit.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "data-audit",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "DataAuditRoleB3B90C40",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "data-audit",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 600,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DataAuditDataAuditrate1day015E5BEEB": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "App",
            "Value": "data-audit",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DataAudit2FEB3068",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DataAuditDataAuditrate1day0AllowEventRuleServiceCatalogueDataAudit9CC2131ED1368FFF": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DataAudit2FEB3068",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "DataAuditDataAuditrate1day015E5BEEB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DataAuditRoleB3B90C40": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "RoleName": "service-catalogue-data-audit-PROD",
        "Tags": [
          {
            "Key": "App",
            "Value": "data-audit",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DataAuditRoleDefaultPolicyD0BF34E5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/data-audit/data-audit.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/data-audit",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/data-audit/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/dataaudit",
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DataAuditRoleDefaultPolicyD0BF34E5",
        "Roles": [
          {
            "Ref": "DataAuditRoleB3B90C40",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EBSByteBalanceAlarm": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-sec-ops-reliability-alerts",
              ],
            ],
          },
        ],
        "ComparisonOperator": "LessThanLowerOrGreaterThanUpperThreshold",
        "DatapointsToAlarm": 1,
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "ANOMALY_DETECTION_BAND(m1, 2)",
            "Id": "ad1",
            "ReturnData": true,
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "DBInstanceIdentifier",
                    "Value": {
                      "Ref": "PostgresInstance16DE4286E",
                    },
                  },
                ],
                "MetricName": "EBSByteBalance%",
                "Namespace": "AWS/RDS",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": true,
          },
        ],
        "OKActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-sec-ops-reliability-alerts",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "ThresholdMetricId": "ad1",
        "TreatMissingData": "breaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "EBSByteBalanceAnomalyDetector": {
      "Properties": {
        "Dimensions": [
          {
            "Name": "DBInstanceIdentifier",
            "Value": {
              "Ref": "PostgresInstance16DE4286E",
            },
          },
        ],
        "MetricName": "EBSByteBalance%",
        "Namespace": "AWS/RDS",
        "Stat": "Average",
      },
      "Type": "AWS::CloudWatch::AnomalyDetector",
    },
    "GithubActionsUsageAC7E0411": {
      "DependsOn": [
        "GithubActionsUsageServiceRoleDefaultPolicyBFE2CD5F",
        "GithubActionsUsageServiceRole782ABC41",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/github-actions-usage/github-actions-usage.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "github-actions-usage",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "GithubActionsUsageServiceRole782ABC41",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "github-actions-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 600,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "GithubActionsUsageServiceRole782ABC41": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "github-actions-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GithubActionsUsageServiceRoleDefaultPolicyBFE2CD5F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/github-actions-usage/github-actions-usage.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/github-actions-usage",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/github-actions-usage/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/github_actions_usage",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GithubActionsUsageServiceRoleDefaultPolicyBFE2CD5F",
        "Roles": [
          {
            "Ref": "GithubActionsUsageServiceRole782ABC41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresAccessSecurityGroupParam38DFE001": {
      "Properties": {
        "DataType": "text",
        "Name": "/PROD/deploy/service-catalogue/postgres-access-security-group",
        "Tags": {
          "Stack": "deploy",
          "Stage": "PROD",
          "gu:cdk:version": "TEST",
          "gu:repo": "guardian/service-catalogue",
        },
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "PostgresAccessSecurityGroupServicecatalogue03C78F14",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "PostgresAccessSecurityGroupServicecatalogue03C78F14": {
      "Properties": {
        "GroupDescription": "ServiceCatalogue/PostgresAccessSecurityGroupServicecatalogue",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "service-catalogue",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresInstance16DE4286E": {
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "AllocatedStorage": "100",
        "CACertificateIdentifier": "rds-ca-rsa2048-g1",
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t4g.large",
        "DBSubnetGroupName": {
          "Ref": "PostgresInstance1SubnetGroupCAC045A5",
        },
        "DeletionProtection": true,
        "EnableIAMDatabaseAuthentication": true,
        "EnablePerformanceInsights": true,
        "Engine": "postgres",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresInstance1Secret7FA1A24B",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresInstance1Secret7FA1A24B",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "MonitoringInterval": 10,
        "MonitoringRoleArn": {
          "Fn::GetAtt": [
            "PostgresInstance1MonitoringRole681B0673",
            "Arn",
          ],
        },
        "MultiAZ": true,
        "PerformanceInsightsRetentionPeriod": 7,
        "Port": "5432",
        "PubliclyAccessible": false,
        "StorageEncrypted": true,
        "StorageType": "gp3",
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "PostgresSecurityGroupServicecatalogueD2F089D5",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "PostgresInstance1MonitoringRole681B0673": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "monitoring.rds.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PostgresInstance1Secret7FA1A24B": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresInstance1SecretAttachmentBA0D257D": {
      "Properties": {
        "SecretId": {
          "Ref": "PostgresInstance1Secret7FA1A24B",
        },
        "TargetId": {
          "Ref": "PostgresInstance16DE4286E",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "PostgresInstance1SubnetGroupCAC045A5": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for PostgresInstance1 database",
        "SubnetIds": {
          "Ref": "PrivateSubnets",
        },
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "PostgresInstanceEndpointAddress6E14162C": {
      "Properties": {
        "DataType": "text",
        "Name": "/PROD/deploy/service-catalogue/postgres-instance-endpoint-address",
        "Tags": {
          "Stack": "deploy",
          "Stage": "PROD",
          "gu:cdk:version": "TEST",
          "gu:repo": "guardian/service-catalogue",
        },
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "PostgresInstance16DE4286E",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "PostgresSecurityGroupServicecatalogueD2F089D5": {
      "Properties": {
        "GroupDescription": "ServiceCatalogue/PostgresSecurityGroupServicecatalogue",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.4/22",
            "Description": "Allow connection to Postgres from the office network.",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "service-catalogue",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresSecurityGroupServicecataloguefromServiceCataloguePostgresAccessSecurityGroupServicecatalogue56F7252C5432A44FF186": {
      "Properties": {
        "Description": "from ServiceCataloguePostgresAccessSecurityGroupServicecatalogue56F7252C:5432",
        "FromPort": 5432,
        "GroupId": {
          "Fn::GetAtt": [
            "PostgresSecurityGroupServicecatalogueD2F089D5",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PostgresAccessSecurityGroupServicecatalogue03C78F14",
            "GroupId",
          ],
        },
        "ToPort": 5432,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "PrismaMigrateArtifactPutRuleA305B852": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "bucket": {
              "name": [
                {
                  "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
              ],
            },
            "object": {
              "key": [
                "deploy/PROD/service-catalogue-prisma-migrations/prisma.zip",
              ],
            },
          },
          "detail-type": [
            "Object Created",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "prismamigratetaskTaskDefinition6CE347DF",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "prismamigratetaskTaskDefinitionEventsRole980BE1A4",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "RefreshMaterializedViewF0E38938": {
      "DependsOn": [
        "RefreshMaterializedViewServiceRoleDefaultPolicyCF61664F",
        "RefreshMaterializedViewServiceRole8A87DE10",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/refresh-materialized-view/refresh-materialized-view.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "refresh-materialized-view",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewServiceRole8A87DE10",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "refresh-materialized-view",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 600,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "RefreshMaterializedViewServiceRole8A87DE10": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "refresh-materialized-view",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RefreshMaterializedViewServiceRoleDefaultPolicyCF61664F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/refresh-materialized-view/refresh-materialized-view.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/refresh-materialized-view",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/refresh-materialized-view/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/refresh_materialized_view",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RefreshMaterializedViewServiceRoleDefaultPolicyCF61664F",
        "Roles": [
          {
            "Ref": "RefreshMaterializedViewServiceRole8A87DE10",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RiffRaffDatabaseCredentials2033FD7A": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/riffraff-database-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "TopicBFC7AF6E": {
      "Properties": {
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TopicName": "interactive-monitor-PROD",
      },
      "Type": "AWS::SNS::Topic",
    },
    "cloudbuster8C461939": {
      "DependsOn": [
        "cloudbusterServiceRoleDefaultPolicy173FB27F",
        "cloudbusterServiceRoleFE532A3F",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/cloudbuster/cloudbuster.zip",
        },
        "Environment": {
          "Variables": {
            "ANGHAMMARAD_SNS_ARN": {
              "Ref": "AnghammaradSnsArn",
            },
            "APP": "cloudbuster",
            "CUT_OFF_IN_DAYS": "45",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "Text",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "cloudbusterServiceRoleFE532A3F",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudbuster",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 120,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "cloudbusterErrorPercentageAlarmForLambda3A9AF5A0": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-alerts",
              ],
            ],
          },
        ],
        "AlarmDescription": "cloudbuster error percentage is too high. Find the logs here https://logs.gutools.co.uk/s/devx/app/discover#/?_g=(filters:!((query:(match_phrase:(stage:'PROD'))),(query:(match_phrase:(app:'cloudbuster')))))",
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              "High error percentage from ",
              {
                "Ref": "cloudbuster8C461939",
              },
              " lambda in PROD",
            ],
          ],
        },
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "100*m1/m2",
            "Id": "expr_1",
            "Label": {
              "Fn::Join": [
                "",
                [
                  "Error % of ",
                  {
                    "Ref": "cloudbuster8C461939",
                  },
                ],
              ],
            },
            "ReturnData": true,
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "cloudbuster8C461939",
                    },
                  },
                ],
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "m2",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "cloudbuster8C461939",
                    },
                  },
                ],
                "MetricName": "Invocations",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Threshold": 50,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "cloudbusterServiceRoleDefaultPolicy173FB27F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/cloudbuster/cloudbuster.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/cloudbuster",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/cloudbuster/*",
                  ],
                ],
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AnghammaradSnsArn",
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/cloudbuster",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "cloudbusterServiceRoleDefaultPolicy173FB27F",
        "Roles": [
          {
            "Ref": "cloudbusterServiceRoleFE532A3F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "cloudbusterServiceRoleFE532A3F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudbuster",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "cloudbustercloudbustercron03MONFRI086370CEA": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 ? * MON-FRI *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudbuster",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "cloudbuster8C461939",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "cloudbustercloudbustercron03MONFRI0AllowEventRuleServiceCataloguecloudbuster82FA89E47F529A44": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "cloudbuster8C461939",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "cloudbustercloudbustercron03MONFRI086370CEA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "cloudqueryapikeyCCF82F53": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/cloudquery-api-key",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "dependencygraphintegrator508B46FC": {
      "DependsOn": [
        "dependencygraphintegratorServiceRoleDefaultPolicy6EBFEC55",
        "dependencygraphintegratorServiceRole5200A556",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/dependency-graph-integrator/dependency-graph-integrator.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "dependency-graph-integrator",
            "GITHUB_APP_SECRET": {
              "Ref": "dependencygraphintegratorgithubappauthB8B9DE78",
            },
            "GITHUB_ORG": "guardian",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "dependencygraphintegratorServiceRole5200A556",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "dependency-graph-integrator",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "dependencygraphintegratorSecurityGroupC8A882C0",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "dependencygraphintegratorAllowInvokeServiceCataloguedependencygraphintegratorinputtopicPROD0407D4DAF48A28EF": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "dependencygraphintegrator508B46FC",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "dependencygraphintegratorinputtopicPRODE85FE8EB",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "dependencygraphintegratorSecurityGroupC8A882C0": {
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function ServiceCataloguedependencygraphintegrator6DE43587",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "dependency-graph-integrator",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "dependencygraphintegratorServiceRole5200A556": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "dependency-graph-integrator",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "dependencygraphintegratorServiceRoleDefaultPolicy6EBFEC55": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/dependency-graph-integrator/dependency-graph-integrator.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/dependency-graph-integrator",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/dependency-graph-integrator/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "dependencygraphintegratorgithubappauthB8B9DE78",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "dependencygraphintegratorServiceRoleDefaultPolicy6EBFEC55",
        "Roles": [
          {
            "Ref": "dependencygraphintegratorServiceRole5200A556",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "dependencygraphintegratordependencygraphintegratorinputtopicPRODFA58714C": {
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "dependencygraphintegrator508B46FC",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "dependencygraphintegratorinputtopicPRODE85FE8EB",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "dependencygraphintegratorgithubappauthB8B9DE78": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/dependency-graph-integrator-github-app-secret",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "dependencygraphintegratorinputtopicPRODE85FE8EB": {
      "Properties": {
        "DisplayName": "Dependency Graph Integrator Input Topic",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "fastlycredentialsF42D3C80": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/fastly-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "githubactionsusagelambdatriggerAllowEventRuleServiceCatalogueGithubActionsUsageFB05F39B49275F66": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GithubActionsUsageAC7E0411",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "githubactionsusagelambdatriggerE81735F9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "githubactionsusagelambdatriggerE81735F9": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-GitHubRepositoriesContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "GithubActionsUsageAC7E0411",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "githubcredentialsAF453741": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/github-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "interactivemonitor3435C6C2": {
      "DependsOn": [
        "interactivemonitorServiceRoleDefaultPolicy44B1B670",
        "interactivemonitorServiceRoleC210EED3",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/interactive-monitor/interactive-monitor.zip",
        },
        "Environment": {
          "Variables": {
            "ANGHAMMARAD_SNS_ARN": {
              "Ref": "AnghammaradSnsArn",
            },
            "APP": "interactive-monitor",
            "GITHUB_APP_SECRET": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      2,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "GITHUB_ORG": "guardian",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "interactivemonitorServiceRoleC210EED3",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "interactive-monitor",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "interactivemonitorAllowInvokeServiceCatalogueTopic0AC51635C623A304": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "interactivemonitor3435C6C2",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "interactivemonitorServiceRoleC210EED3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "interactive-monitor",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "interactivemonitorServiceRoleDefaultPolicy44B1B670": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/interactive-monitor/interactive-monitor.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/interactive-monitor",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/interactive-monitor/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:ListBucket",
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::gdn-cdn",
                "arn:aws:s3:::gdn-cdn/*",
              ],
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AnghammaradSnsArn",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "interactivemonitorgithubapp9777D674",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "interactivemonitorServiceRoleDefaultPolicy44B1B670",
        "Roles": [
          {
            "Ref": "interactivemonitorServiceRoleC210EED3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "interactivemonitorTopic5CA9BB6E": {
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "interactivemonitor3435C6C2",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "interactivemonitorgithubapp9777D674": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/interactive-monitor-github-app",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "ns1credentialsA8DD3B2D": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/ns1-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "obligatronA58CFCF1": {
      "DependsOn": [
        "obligatronServiceRoleDefaultPolicyC8AE10A2",
        "obligatronServiceRole1E85277A",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/obligatron/obligatron.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "obligatron",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "Text",
        },
        "MemorySize": 4096,
        "Role": {
          "Fn::GetAtt": [
            "obligatronServiceRole1E85277A",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "obligatron",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "obligatronAWSVULNERABILITIES8E81FCF9": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'AWS_VULNERABILITIES' obligation",
        "ScheduleExpression": "cron(0 11 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""AWS_VULNERABILITIES"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronAWSVULNERABILITIESAllowEventRuleServiceCatalogueobligatron5BD5033E8F5FADB8": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronAWSVULNERABILITIES8E81FCF9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "obligatronErrorPercentageAlarmForLambda8AFDF23F": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-alerts",
              ],
            ],
          },
        ],
        "AlarmDescription": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "obligatronA58CFCF1",
              },
              " exceeded 0% error rate",
            ],
          ],
        },
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              "High error percentage from ",
              {
                "Ref": "obligatronA58CFCF1",
              },
              " lambda in PROD",
            ],
          ],
        },
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "100*m1/m2",
            "Id": "expr_1",
            "Label": {
              "Fn::Join": [
                "",
                [
                  "Error % of ",
                  {
                    "Ref": "obligatronA58CFCF1",
                  },
                ],
              ],
            },
            "ReturnData": true,
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "obligatronA58CFCF1",
                    },
                  },
                ],
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "m2",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "obligatronA58CFCF1",
                    },
                  },
                ],
                "MetricName": "Invocations",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Threshold": 0,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "obligatronPRODUCTIONDEPENDENCIESAllowEventRuleServiceCatalogueobligatron5BD5033E5649B088": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronPRODUCTIONDEPENDENCIESC26096F0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "obligatronPRODUCTIONDEPENDENCIESC26096F0": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'PRODUCTION_DEPENDENCIES' obligation",
        "ScheduleExpression": "cron(0 10 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""PRODUCTION_DEPENDENCIES"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronREPOSITORYSTATUSAllowEventRuleServiceCatalogueobligatron5BD5033EE0DF9501": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronREPOSITORYSTATUSD313E655",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "obligatronREPOSITORYSTATUSD313E655": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'REPOSITORY_STATUS' obligation",
        "ScheduleExpression": "cron(0 12 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""REPOSITORY_STATUS"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronServiceRole1E85277A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "obligatron",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "obligatronServiceRoleDefaultPolicyC8AE10A2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/obligatron/obligatron.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/obligatron",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/obligatron/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/obligatron",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "obligatronServiceRoleDefaultPolicyC8AE10A2",
        "Roles": [
          {
            "Ref": "obligatronServiceRole1E85277A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "obligatronTAGGING3F8E9BB2": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'TAGGING' obligation",
        "ScheduleExpression": "cron(0 9 * * ? *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""TAGGING"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronTAGGINGAllowEventRuleServiceCatalogueobligatron5BD5033EC1528439": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronTAGGING3F8E9BB2",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "prismamigratetaskPROD4962BC83": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "prisma-migrate-task-PROD",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "prismamigratetaskPRODDefaultPolicyC3FAA53F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                      },
                      "/deploy/PROD/service-catalogue-prisma-migrations/prisma.zip",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "prismamigratetaskPRODDefaultPolicyC3FAA53F",
        "Roles": [
          {
            "Ref": "prismamigratetaskPROD4962BC83",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "prismamigratetaskTaskDefinition6CE347DF": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "PROD",
              },
              {
                "Name": "APP",
                "Value": "prisma-migrate-task",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
              {
                "Name": "TASK_NAME",
                "Value": "prisma-migrate-task",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2.1.0",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "prismamigratetaskTaskDefinitionprismamigratetaskFirelensLogGroupCD392728",
                },
                "awslogs-region": "eu-west-1",
                "awslogs-stream-prefix": "deploy/PROD/prisma-migrate-task",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "prisma-migrate-taskFirelens",
            "ReadonlyRootFilesystem": true,
          },
          {
            "DockerLabels": {
              "App": "prisma-migrate-task",
              "Stack": "deploy",
              "Stage": "PROD",
            },
            "Environment": [
              {
                "Name": "ARTIFACT_BUCKET",
                "Value": {
                  "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
              },
              {
                "Name": "PRISMA_ARTIFACT_KEY",
                "Value": "deploy/PROD/service-catalogue-prisma-migrations/prisma.zip",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/prisma-migrate:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": "eu-west-1",
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/src/app/prisma",
                "ReadOnly": false,
                "SourceVolume": "artifact-volume",
              },
            ],
            "Name": "prisma-migrate-taskContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C",
            "Arn",
          ],
        },
        "Family": "prisma-migrate-task",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "prisma-migrate-task",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "prismamigratetaskPROD4962BC83",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "firelens-volume",
          },
          {
            "Name": "artifact-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "prismamigratetaskTaskDefinitionEventsRole980BE1A4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "prisma-migrate-task",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "prismamigratetaskTaskDefinitionEventsRoleDefaultPolicyCC5EE80B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "prismamigratetaskTaskDefinition6CE347DF",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:eu-west-1:*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "prismamigratetaskPROD4962BC83",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "prismamigratetaskTaskDefinitionEventsRoleDefaultPolicyCC5EE80B",
        "Roles": [
          {
            "Ref": "prismamigratetaskTaskDefinitionEventsRole980BE1A4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "prisma-migrate-task",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "prismamigratetaskTaskDefinitionExecutionRoleDefaultPolicyDA3DD97A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "prismamigratetaskTaskDefinitionprismamigratetaskFirelensLogGroupCD392728",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "prismamigratetaskTaskDefinitionExecutionRoleDefaultPolicyDA3DD97A",
        "Roles": [
          {
            "Ref": "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "prismamigratetaskTaskDefinitionprismamigratetaskFirelensLogGroupCD392728": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "prisma-migrate-task",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "refreshmaterializedviewlambdatriggerAwsCostExplorer90816841": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsCostExplorerContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsCostExplorerAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448DF571615": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsCostExplorer90816841",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsDelegatedToSecurityAccountAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94488A543449": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsDelegatedToSecurityAccountBF02072E",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsDelegatedToSecurityAccountBF02072E": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsDelegatedToSecurityAccountContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsLambda026DCBB2": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsLambdaContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsLambdaTaskDefinitionD9609861",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsLambdaAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944887E7B8B5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsLambda026DCBB2",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsListOrgsAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94483D8FEF5F": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsListOrgsC4943291",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsListOrgsC4943291": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsListOrgsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideAutoScalingGroupsAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94487981405E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideAutoScalingGroupsEC4D6F06",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideAutoScalingGroupsEC4D6F06": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideAutoScalingGroupsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideBackup1ED589F7": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideBackupContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideBackupAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94485DF939E2": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideBackup1ED589F7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideCertificates621CD7CC": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideCertificatesContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideCertificatesAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944887DDBBC7": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideCertificates621CD7CC",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideCloudFormationAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944841AE608C": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideCloudFormationB8956237",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideCloudFormationB8956237": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideCloudFormationContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideCloudwatchAlarms174E1EFB": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideCloudwatchAlarmsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideCloudwatchAlarmsAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94484260483A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideCloudwatchAlarms174E1EFB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideDynamoDB30247D68": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideDynamoDBContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideDynamoDBAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94482460516E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideDynamoDB30247D68",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideEc26842312B": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideEc2Container",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideEc2AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94485642F263": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideEc26842312B",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideEc2ImagesAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448CCC354B9": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideEc2ImagesF6217EC7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideEc2ImagesF6217EC7": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideEc2ImagesContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideIamCredentialReportsAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448459AC520": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideIamCredentialReportsD3A611A5",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideIamCredentialReportsD3A611A5": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideIamCredentialReportsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideLoadBalancers4A6D50CD": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideLoadBalancersContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideLoadBalancersAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94485EC1BA09": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideLoadBalancers4A6D50CD",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideRDSAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448026B60B5": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideRDSD9D7874A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideRDSD9D7874A": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideRDSContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideS3A3712FA4": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideS3Container",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideS3AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94488C5E3545": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideS3A3712FA4",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideSns8C904DC2": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideSnsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideSnsTaskDefinitionD1E54815",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsOrgWideSnsAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944872A3FF15": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsOrgWideSns8C904DC2",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsRemainingData7852A71A": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsRemainingDataContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsRemainingDataAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944815B7F5CC": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsRemainingData7852A71A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerAwsSSMParameters30000672": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsSSMParametersContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerAwsSSMParametersAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448811CEBF2": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerAwsSSMParameters30000672",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "repocop20553EB8": {
      "DependsOn": [
        "repocopServiceRoleDefaultPolicyF20BF625",
        "repocopServiceRole757D74E8",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/PROD/repocop/repocop.zip",
        },
        "Environment": {
          "Variables": {
            "ANGHAMMARAD_SNS_ARN": {
              "Ref": "AnghammaradSnsArn",
            },
            "APP": "repocop",
            "CUT_OFF_IN_DAYS": "45",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "DEPENDENCY_GRAPH_INPUT_TOPIC_ARN": {
              "Ref": "dependencygraphintegratorinputtopicPRODE85FE8EB",
            },
            "GITHUB_APP_SECRET": {
              "Ref": "repocopgithubappauthFDE18F33",
            },
            "GITHUB_ORG": "guardian",
            "INTERACTIVES_COUNT": "40",
            "INTERACTIVE_MONITOR_TOPIC_ARN": {
              "Ref": "TopicBFC7AF6E",
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "PROD",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "repocopServiceRole757D74E8",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "repocop",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "repocopErrorPercentageAlarmForLambda1E62E9A7": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-alerts",
              ],
            ],
          },
        ],
        "AlarmDescription": "repocop error percentage is too high. Find the logs here https://logs.gutools.co.uk/s/devx/app/discover#/?_g=(filters:!((query:(match_phrase:(stage:'PROD'))),(query:(match_phrase:(app:'repocop')))))",
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              "High error percentage from ",
              {
                "Ref": "repocop20553EB8",
              },
              " lambda in PROD",
            ],
          ],
        },
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "100*m1/m2",
            "Id": "expr_1",
            "Label": {
              "Fn::Join": [
                "",
                [
                  "Error % of ",
                  {
                    "Ref": "repocop20553EB8",
                  },
                ],
              ],
            },
            "ReturnData": true,
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "repocop20553EB8",
                    },
                  },
                ],
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "m2",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "repocop20553EB8",
                    },
                  },
                ],
                "MetricName": "Invocations",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Threshold": 50,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "repocopServiceRole757D74E8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "repocop",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "repocopServiceRoleDefaultPolicyF20BF625": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/PROD/repocop/repocop.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/repocop",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/PROD/deploy/repocop/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/repocop",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "repocopgithubappauthFDE18F33",
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AnghammaradSnsArn",
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "TopicBFC7AF6E",
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "dependencygraphintegratorinputtopicPRODE85FE8EB",
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "repocop",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "repocopServiceRoleDefaultPolicyF20BF625",
        "Roles": [
          {
            "Ref": "repocopServiceRole757D74E8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "repocopgithubappauthFDE18F33": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/PROD/deploy/service-catalogue/repocop-github-app-secret",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "repocoprepocopcron03MONFRI0AllowEventRuleServiceCataloguerepocop7BEB5892318F26C8": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "repocop20553EB8",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "repocoprepocopcron03MONFRI0E07FE560",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "repocoprepocopcron03MONFRI0E07FE560": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 ? * MON-FRI *)",
        "State": "ENABLED",
        "Tags": [
          {
            "Key": "App",
            "Value": "repocop",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "repocop20553EB8",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "servicecatalogueCluster5FC34DC5": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "servicecatalogueClusterAF65BC89": {
      "Properties": {
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": {
          "Ref": "servicecatalogueCluster5FC34DC5",
        },
        "DefaultCapacityProviderStrategy": [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "servicecataloguePRODtaskAmigoBakePackagesDefaultPolicy89383B52": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:Query",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": [
                "arn:aws:dynamodb:eu-west-1:000000000018:table/amigo-PROD-base-images",
                "arn:aws:dynamodb:eu-west-1:000000000018:table/amigo-PROD-recipes",
                "arn:aws:dynamodb:eu-west-1:000000000018:table/amigo-PROD-bakes",
              ],
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "packagesBucketNameParam",
                    },
                    "/packagelists/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAmigoBakePackagesDefaultPolicy89383B52",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAmigoBakePackagesE2817516",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAmigoBakePackagesE2817516": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AmigoBakePackages",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsCostExplorer96B6E676": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsCostExplorer",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsCostExplorerDefaultPolicy9494165D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsCostExplorerDefaultPolicy9494165D",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsCostExplorer96B6E676",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsDelegatedToSecurityAccountD81B6FBC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsDelegatedToSecurityAccount",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsDelegatedToSecurityAccountDefaultPolicy17BEDFC7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::000000000015:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsDelegatedToSecurityAccountDefaultPolicy17BEDFC7",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsDelegatedToSecurityAccountD81B6FBC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsLambda2F5ACE1C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsLambda",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsLambdaDefaultPolicy409E4790": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsLambdaDefaultPolicy409E4790",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsLambda2F5ACE1C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsListOrgs456430DC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsListOrgs",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsListOrgsDefaultPolicy079B6149": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::000000000018:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsListOrgsDefaultPolicy079B6149",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsListOrgs456430DC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideAutoScalingGroups86ECCF9A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideAutoScalingGroups",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideAutoScalingGroupsDefaultPolicy2D914B11": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideAutoScalingGroupsDefaultPolicy2D914B11",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideAutoScalingGroups86ECCF9A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideBackup38D22D6C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideBackup",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideBackupDefaultPolicyE3B452CC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideBackupDefaultPolicyE3B452CC",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideBackup38D22D6C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideCertificatesC9D1B629": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideCertificates",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideCertificatesDefaultPolicy83372AFA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideCertificatesDefaultPolicy83372AFA",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideCertificatesC9D1B629",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideCloudFormation8B822CFC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideCloudFormation",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideCloudFormationDefaultPolicy60B9061C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideCloudFormationDefaultPolicy60B9061C",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideCloudFormation8B822CFC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideCloudwatchAlarms8934DD5C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideCloudwatchAlarms",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideCloudwatchAlarmsDefaultPolicy5C6FEB2E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideCloudwatchAlarmsDefaultPolicy5C6FEB2E",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideCloudwatchAlarms8934DD5C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideDynamoDB9287D5A3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideDynamoDB",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideDynamoDBDefaultPolicy523A38FD": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideDynamoDBDefaultPolicy523A38FD",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideDynamoDB9287D5A3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideEc221CF25F8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideEc2",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideEc2DefaultPolicy41D6B863": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:ListTasks",
              "Condition": {
                "StringEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideEc2DefaultPolicy41D6B863",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideEc221CF25F8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideEc2ImagesAAAFAE8F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideEc2Images",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideEc2ImagesDefaultPolicy2BE11FB5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:ListTasks",
              "Condition": {
                "StringEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideEc2ImagesDefaultPolicy2BE11FB5",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideEc2ImagesAAAFAE8F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideIamCredentialReportsA4EE552D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideIamCredentialReports",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideIamCredentialReportsDefaultPolicy5FBF2B61": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideIamCredentialReportsDefaultPolicy5FBF2B61",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideIamCredentialReportsA4EE552D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideLoadBalancers3ECAAF8B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideLoadBalancers",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideLoadBalancersDefaultPolicy5F4E9AE5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideLoadBalancersDefaultPolicy5F4E9AE5",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideLoadBalancers3ECAAF8B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideRDS2AD886D1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideRDS",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideRDSDefaultPolicy3DB12181": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideRDSDefaultPolicy3DB12181",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideRDS2AD886D1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideS30E844CCC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideS3",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideS3DefaultPolicy058CD5DC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideS3DefaultPolicy058CD5DC",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideS30E844CCC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsOrgWideSns74594884": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsOrgWideSns",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsOrgWideSnsDefaultPolicy8D337EE5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsOrgWideSnsDefaultPolicy8D337EE5",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsOrgWideSns74594884",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsRemainingDataD00498F8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsRemainingData",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsRemainingDataDefaultPolicy7B56E198": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsRemainingDataDefaultPolicy7B56E198",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsRemainingDataD00498F8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskAwsSSMParametersD3C61E16": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-AwsSSMParameters",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskAwsSSMParametersDefaultPolicyBA587B3A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskAwsSSMParametersDefaultPolicyBA587B3A",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskAwsSSMParametersD3C61E16",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskEndOfLifeC67315CC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-EndOfLife",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskEndOfLifeDefaultPolicy9140E85F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskEndOfLifeDefaultPolicy9140E85F",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskEndOfLifeC67315CC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskFastlyServices0806BEC5": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-FastlyServices",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskFastlyServicesDefaultPolicy7B1AD4D3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskFastlyServicesDefaultPolicy7B1AD4D3",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskFastlyServices0806BEC5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGalaxiesC4200C94": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-Galaxies",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGalaxiesDefaultPolicyEB4317FD": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "ActionsStaticSiteBucketArnParam",
                    },
                    "/galaxies.gutools.co.uk/data/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGalaxiesDefaultPolicyEB4317FD",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGalaxiesC4200C94",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGitHubIssues3E254C0F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-GitHubIssues",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGitHubIssuesDefaultPolicy0C10765D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGitHubIssuesDefaultPolicy0C10765D",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGitHubIssues3E254C0F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGitHubLanguages39076331": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-GitHubLanguages",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGitHubLanguagesDefaultPolicyACF3DB9D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGitHubLanguagesDefaultPolicyACF3DB9D",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGitHubLanguages39076331",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGitHubReleases98866D2A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-GitHubReleases",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGitHubReleasesDefaultPolicy545F91B3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGitHubReleasesDefaultPolicy545F91B3",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGitHubReleases98866D2A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGitHubRepositoriesA1D893AF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-GitHubRepositories",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGitHubRepositoriesDefaultPolicyDCD5D11A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGitHubRepositoriesDefaultPolicyDCD5D11A",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGitHubRepositoriesA1D893AF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGitHubSecretScanningAlerts5AFC2BE7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-GitHubSecretScanningAlerts",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGitHubSecretScanningAlertsDefaultPolicyC3879450": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGitHubSecretScanningAlertsDefaultPolicyC3879450",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGitHubSecretScanningAlerts5AFC2BE7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskGitHubTeams57E3A035": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-GitHubTeams",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskGitHubTeamsDefaultPolicy660061B0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskGitHubTeamsDefaultPolicy660061B0",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskGitHubTeams57E3A035",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskNS1A6E237CE": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-NS1",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskNS1DefaultPolicyCF409114": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskNS1DefaultPolicyCF409114",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskNS1A6E237CE",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecataloguePRODtaskRiffRaffDataCC491393": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-PROD-task-RiffRaffData",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "PROD",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecataloguePRODtaskRiffRaffDataDefaultPolicy3AF25E15": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:eu-west-1:",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecataloguePRODtaskRiffRaffDataDefaultPolicy3AF25E15",
        "Roles": [
          {
            "Ref": "servicecataloguePRODtaskRiffRaffDataCC491393",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
