// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`The ServiceCatalogue stack matches the snapshot 1`] = `
{
  "Metadata": {
    "gu:cdk:constructs": [
      "GuSubnetListParameter",
      "GuVpcParameter",
      "GuSecurityGroup",
      "GuSecurityGroup",
      "GuLoggingStreamNameParameter",
      "GuStringParameter",
      "GuStringParameter",
      "GuDistributionBucketParameter",
      "GuScheduledLambda",
      "GuAnghammaradTopicParameter",
      "GuLambdaFunction",
      "GuScheduledLambda",
      "GuLambdaFunction",
      "GuScheduledLambda",
      "GuLambdaFunction",
      "GuLambdaFunction",
      "GuLambdaFunction",
      "GuLambdaErrorPercentageAlarm",
      "GuScheduledLambda",
    ],
    "gu:cdk:version": "TEST",
  },
  "Parameters": {
    "ActionsStaticSiteBucketArnParam": {
      "Default": "/INFRA/deploy/cloudquery/actions-static-site-bucket-arn",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "AnghammaradSnsArn": {
      "Default": "/account/services/anghammarad.topic.arn",
      "Description": "SSM parameter containing the ARN of the Anghammarad SNS topic",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "DistributionBucketName": {
      "Default": "/account/services/artifact.bucket",
      "Description": "SSM parameter containing the S3 bucket name holding distribution artifacts",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "LoggingStreamName": {
      "Default": "/account/services/logging.stream.name",
      "Description": "SSM parameter containing the Name (not ARN) on the kinesis stream",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "PrivateSubnets": {
      "Default": "/account/vpc/primary/subnets/private",
      "Description": "A list of private subnets",
      "Type": "AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>",
    },
    "SsmParameterValueTESTdeployriffraffexternaldatabaseaccesssecuritygroupC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/TEST/deploy/riff-raff/external-database-access-security-group",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/account/services/artifact.bucket",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "VpcId": {
      "Default": "/account/vpc/primary/id",
      "Description": "Virtual Private Cloud to run EC2 instances within. Should NOT be the account default VPC.",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::VPC::Id>",
    },
    "packagesBucketNameParam": {
      "Default": "/TEST/deploy/amigo/amigo.data.bucket",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "CloudquerySourceAmigoBakePackagesScheduledEventRule3FDBCEB5": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionF04CFC72",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleB18B35DF",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionCloudquerySourceAmigoBakePackagesFirelensLogGroupA4EF0BA2": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleB18B35DF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleDefaultPolicy145F68FA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionF04CFC72",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAmigoBakePackagesE3F44845",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleDefaultPolicy145F68FA",
        "Roles": [
          {
            "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionEventsRoleB18B35DF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleDefaultPolicyBD5A8255": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAmigoBakePackagesTaskDefinitionCloudquerySourceAmigoBakePackagesFirelensLogGroupA4EF0BA2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleDefaultPolicyBD5A8255",
        "Roles": [
          {
            "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAmigoBakePackagesTaskDefinitionF04CFC72": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              {
                "Fn::Join": [
                  "",
                  [
                    "printf 'kind: source
spec:
  name: image-packages
  registry: github
  path: guardian/image-packages
  version: v1.0.1
  destinations:
    - postgresql
  tables:
    - amigo_bake_packages
  spec:
    base_images_table: amigo-TEST-base-images
    recipes_table: amigo-TEST-recipes
    bakes_table: amigo-TEST-bakes
    bucket: ",
                    {
                      "Ref": "packagesBucketNameParam",
                    },
                    "
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
                  ],
                ],
              },
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AmigoBakePackagesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AmigoBakePackages",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AmigoBakePackagesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AmigoBakePackagesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('amigo_bake_packages', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AmigoBakePackages",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AmigoBakePackagesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAmigoBakePackagesTaskDefinitionCloudquerySourceAmigoBakePackagesFirelensLogGroupA4EF0BA2",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AmigoBakePackagesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAmigoBakePackagesTaskDefinitionExecutionRoleD495DC33",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAmigoBakePackagesTaskDefinition07388B36",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AmigoBakePackages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAmigoBakePackagesE3F44845",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsCostExplorerScheduledEventRule85BE97F8": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRole71FB003A",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "export START_DATE=\${START_DATE:-$(date -d "@$(($(date +%s) - 172800))" "+%Y-%m-%d")};export END_DATE=\${END_DATE:-$(date -d "@$(($(date +%s) - 86400))" "+%Y-%m-%d")};printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_costexplorer_cost_custom
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
    use_paid_apis: true
    table_options:
      aws_costexplorer_cost_custom:
        get_cost_and_usage:
          - TimePeriod:
              Start: \${START_DATE}
              End: \${END_DATE}
            Granularity: DAILY
            GroupBy:
              - Type: TAG
                Key: App
              - Type: TAG
                Key: Stack
            Metrics:
              - NetUnblendedCost
              - UnblendedCost
              - NetAmortizedCost
              - AmortizedCost
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsCostExplorerAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsCostExplorer",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsCostExplorerContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsCostExplorerAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_costexplorer_cost_custom', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsCostExplorer",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsCostExplorerPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsCostExplorerTaskDefinitionCloudquerySourceAwsCostExplorerFirelensLogGroup0D0D76FF",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsCostExplorerFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsCostExplorerTaskDefinitionD8C37FA5",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsCostExplorer78777A06",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionCloudquerySourceAwsCostExplorerFirelensLogGroup0D0D76FF": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRole71FB003A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRoleDefaultPolicy6D27ED91": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsCostExplorer78777A06",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRoleDefaultPolicy6D27ED91",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsCostExplorerTaskDefinitionEventsRole71FB003A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsCostExplorer",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleDefaultPolicyEBFC45ED": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsCostExplorerTaskDefinitionCloudquerySourceAwsCostExplorerFirelensLogGroup0D0D76FF",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleDefaultPolicyEBFC45ED",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsCostExplorerTaskDefinitionExecutionRoleD508639D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountScheduledEventRuleD23A8E56": {
      "Properties": {
        "ScheduleExpression": "cron(0 22 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRole84A3EC34",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_accessanalyzer_*
    - aws_securityhub_*
    - aws_guardduty_*
    - aws_inspector2_findings
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    concurrency: 2000
    accounts:
      - id: cq-for-000000000015
        role_arn: arn:aws:iam::000000000015:role/cloudquery-access
    table_options:
      aws_securityhub_findings:
        get_findings:
          - filters:
              record_state:
                - comparison: EQUALS
                  value: ACTIVE
              compliance_status:
                - comparison: NOT_EQUALS
                  value: PASSED
              product_name:
                - comparison: EQUALS
                  value: GuardDuty
                - comparison: EQUALS
                  value: Inspector
                - comparison: EQUALS
                  value: Security Hub
              severity_label:
                - comparison: NOT_EQUALS
                  value: MEDIUM
      aws_inspector2_findings:
        aws_inspector2_findings:
          list_findings:
            - filter_criteria:
                finding_status:
                  - comparison: EQUALS
                    value: ACTIVE
                severity:
                  - comparison: EQUALS
                    value: CRITICAL
                  - comparison: EQUALS
                    value: HIGH
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsDelegatedToSecurityAccountAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsDelegatedToSecurityAccount",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_accessanalyzer_%', 86400000),('aws_securityhub_%', 86400000),('aws_guardduty_%', 86400000),('aws_inspector2_findings', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsDelegatedToSecurityAccount",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionCloudquerySourceAwsDelegatedToSecurityAccountFirelensLogGroupE468B6F3",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsDelegatedToSecurityAccountFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionD9E19358",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsDelegatedToSecurityAccountEDD7C370",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionCloudquerySourceAwsDelegatedToSecurityAccountFirelensLogGroupE468B6F3": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRole84A3EC34": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRoleDefaultPolicy33EB3CCB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsDelegatedToSecurityAccountEDD7C370",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRoleDefaultPolicy33EB3CCB",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionEventsRole84A3EC34",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsDelegatedToSecurityAccount",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRoleDefaultPolicy36910251": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionCloudquerySourceAwsDelegatedToSecurityAccountFirelensLogGroupE468B6F3",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRoleDefaultPolicy36910251",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionExecutionRole390812B0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsLambdaScheduledEventRuleC1529FB1": {
      "Properties": {
        "ScheduleExpression": "cron(10 1 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsLambdaTaskDefinitionD9609861",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsLambdaTaskDefinitionEventsRole4D97B167",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionCloudquerySourceAwsLambdaFirelensLogGroupBB74129A": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionD9609861": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_lambda_*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsLambdaAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsLambda",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsLambdaContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsLambdaAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_lambda_%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsLambda",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsLambdaPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsLambdaTaskDefinitionCloudquerySourceAwsLambdaFirelensLogGroupBB74129A",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsLambdaFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsLambdaTaskDefinitionDAA42514",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsLambda20C12A7D",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionEventsRole4D97B167": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionEventsRoleDefaultPolicyCA44BFE7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsLambdaTaskDefinitionD9609861",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsLambda20C12A7D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsLambdaTaskDefinitionEventsRoleDefaultPolicyCA44BFE7",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsLambdaTaskDefinitionEventsRole4D97B167",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsLambda",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsLambdaTaskDefinitionExecutionRoleDefaultPolicy8F1E97F4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsLambdaTaskDefinitionCloudquerySourceAwsLambdaFirelensLogGroupBB74129A",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsLambdaTaskDefinitionExecutionRoleDefaultPolicy8F1E97F4",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsLambdaTaskDefinitionExecutionRole9469B1E9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsListOrgsScheduledEventRuleE0997086": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsListOrgsTaskDefinitionEventsRole2B20765E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_organization*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    accounts:
      - id: cq-for-000000000018
        role_arn: arn:aws:iam::000000000018:role/cloudquery-access
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsListOrgsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsListOrgs",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsListOrgsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsListOrgsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_organization%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsListOrgs",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsListOrgsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsListOrgsTaskDefinitionCloudquerySourceAwsListOrgsFirelensLogGroup55343A0C",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsListOrgsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsListOrgsTaskDefinition2D3A9A60",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsListOrgsA233C9DF",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionCloudquerySourceAwsListOrgsFirelensLogGroup55343A0C": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionEventsRole2B20765E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionEventsRoleDefaultPolicy80C259B3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsListOrgsA233C9DF",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsListOrgsTaskDefinitionEventsRoleDefaultPolicy80C259B3",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsListOrgsTaskDefinitionEventsRole2B20765E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsListOrgs",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRoleDefaultPolicy1D72FE55": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsListOrgsTaskDefinitionCloudquerySourceAwsListOrgsFirelensLogGroup55343A0C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRoleDefaultPolicy1D72FE55",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsListOrgsTaskDefinitionExecutionRole2EE6E631",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsScheduledEventRuleDF674875": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleF9568321",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_autoscaling_groups
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideAutoScalingGroupsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideAutoScalingGroups",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_autoscaling_groups', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideAutoScalingGroups",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionCloudquerySourceAwsOrgWideAutoScalingGroupsFirelensLogGroup7749AA41",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideAutoScalingGroupsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinition59C11D9A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideAutoScalingGroups721C2374",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionCloudquerySourceAwsOrgWideAutoScalingGroupsFirelensLogGroup7749AA41": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleDefaultPolicy1404945D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideAutoScalingGroups721C2374",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleDefaultPolicy1404945D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleF9568321",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionEventsRoleF9568321": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideAutoScalingGroups",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleDefaultPolicy2A62C527": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionCloudquerySourceAwsOrgWideAutoScalingGroupsFirelensLogGroup7749AA41",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleDefaultPolicy2A62C527",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionExecutionRoleCAD7367A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideBackupScheduledEventRuleE834008B": {
      "Properties": {
        "ScheduleExpression": "cron(0 7 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRole34C9CC1F",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_backup_protected_resources
    - aws_backup_vaults
    - aws_backup_vault_recovery_points
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideBackupAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideBackup",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideBackupContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideBackupAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_backup_protected_resources', 86400000),('aws_backup_vaults', 86400000),('aws_backup_vault_recovery_points', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideBackup",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideBackupPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinitionCloudquerySourceAwsOrgWideBackupFirelensLogGroup336D3581",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideBackupFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideBackupTaskDefinitionC269FE04",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideBackupB0D1DA08",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionCloudquerySourceAwsOrgWideBackupFirelensLogGroup336D3581": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRole34C9CC1F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRoleDefaultPolicyFA9FAC00": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideBackupB0D1DA08",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRoleDefaultPolicyFA9FAC00",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinitionEventsRole34C9CC1F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideBackup",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRoleDefaultPolicy51C80930": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideBackupTaskDefinitionCloudquerySourceAwsOrgWideBackupFirelensLogGroup336D3581",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRoleDefaultPolicy51C80930",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinitionExecutionRole55614D8C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCertificatesScheduledEventRule7D3B1FA3": {
      "Properties": {
        "ScheduleExpression": "cron(0 1 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRole8BB088B7",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionCloudquerySourceAwsOrgWideCertificatesFirelensLogGroup91D2F11E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_acm*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideCertificatesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCertificates",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCertificatesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCertificatesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_acm%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCertificates",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCertificatesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionCloudquerySourceAwsOrgWideCertificatesFirelensLogGroup91D2F11E",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCertificatesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideCertificatesTaskDefinition24CEF41E",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideCertificates496AB720",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRole8BB088B7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRoleDefaultPolicyB2781632": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideCertificates496AB720",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRoleDefaultPolicyB2781632",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionEventsRole8BB088B7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCertificates",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleDefaultPolicyADA104C9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionCloudquerySourceAwsOrgWideCertificatesFirelensLogGroup91D2F11E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleDefaultPolicyADA104C9",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionExecutionRoleA5032537",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudFormationScheduledEventRule4E86DEC8": {
      "Properties": {
        "ScheduleExpression": "rate(3 hours)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRole2327379D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionCloudquerySourceAwsOrgWideCloudFormationFirelensLogGroup275B0945": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRole2327379D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRoleDefaultPolicy21B918CD": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideCloudFormationEFD12D82",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRoleDefaultPolicy21B918CD",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionEventsRole2327379D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRoleDefaultPolicy688A215A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionCloudquerySourceAwsOrgWideCloudFormationFirelensLogGroup275B0945",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRoleDefaultPolicy688A215A",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_cloudformation_*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideCloudFormationAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudFormation",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudFormationContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudFormationAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_cloudformation_%', 10800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 10800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudFormation",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudFormationPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionCloudquerySourceAwsOrgWideCloudFormationFirelensLogGroup275B0945",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudFormationFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionExecutionRole7AB90409",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideCloudFormationTaskDefinition3044E3AC",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudFormation",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideCloudFormationEFD12D82",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsScheduledEventRule443F1BD5": {
      "Properties": {
        "ScheduleExpression": "cron(0 2 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRole23623738",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_cloudwatch_alarms
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideCloudwatchAlarmsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudwatchAlarms",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_cloudwatch_alarms', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideCloudwatchAlarms",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionCloudquerySourceAwsOrgWideCloudwatchAlarmsFirelensLogGroup953FDC49",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideCloudwatchAlarmsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEDC746AE",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideCloudwatchAlarms5ED2B988",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionCloudquerySourceAwsOrgWideCloudwatchAlarmsFirelensLogGroup953FDC49": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRole23623738": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRoleDefaultPolicyAC0B7FE1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideCloudwatchAlarms5ED2B988",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRoleDefaultPolicyAC0B7FE1",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEventsRole23623738",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideCloudwatchAlarms",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRoleDefaultPolicy6B41E6E0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionCloudquerySourceAwsOrgWideCloudwatchAlarmsFirelensLogGroup953FDC49",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRoleDefaultPolicy6B41E6E0",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionExecutionRole7DD198FC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideDynamoDBScheduledEventRule3C36042D": {
      "Properties": {
        "ScheduleExpression": "cron(0 5 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleA777C8FA",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_dynamodb*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideDynamoDBAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideDynamoDB",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideDynamoDBContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideDynamoDBAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_dynamodb%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideDynamoDB",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideDynamoDBPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionCloudquerySourceAwsOrgWideDynamoDBFirelensLogGroup7F40CCBC",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideDynamoDBFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideDynamoDBTaskDefinition5F181D12",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideDynamoDBB67BC817",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionCloudquerySourceAwsOrgWideDynamoDBFirelensLogGroup7F40CCBC": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleA777C8FA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleDefaultPolicyAA01E9CA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideDynamoDBB67BC817",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleDefaultPolicyAA01E9CA",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionEventsRoleA777C8FA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleDefaultPolicy5027618D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionCloudquerySourceAwsOrgWideDynamoDBFirelensLogGroup7F40CCBC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleDefaultPolicy5027618D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideDynamoDBTaskDefinitionExecutionRoleE7903999": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideDynamoDB",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesScheduledEventRule1FA6BC29": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRole86EC6C01",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_ec2_images
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2ImagesAWSOTELCollector",
              },
              {
                "Condition": "SUCCESS",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2ImagesAwsCli",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2Images",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/bash",
              "-c",
              "ECS_CLUSTER=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Cluster');ECS_FAMILY=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Family');ECS_TASK_ARN=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.TaskARN');RUNNING=$(aws ecs list-tasks --cluster $ECS_CLUSTER --family $ECS_FAMILY | jq '.taskArns | length');[[ \${RUNNING} > 1 ]] && exit 114 || exit 0",
            ],
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "ghcr.io/guardian/service-catalogue/singleton:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesAwsCli",
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_ec2_images', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2Images",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionCloudquerySourceAwsOrgWideEc2ImagesFirelensLogGroup32711A11",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2ImagesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionBFD8578A",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideEc2ImagesACFD7DAC",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionCloudquerySourceAwsOrgWideEc2ImagesFirelensLogGroup32711A11": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRole86EC6C01": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRoleDefaultPolicyE42E3BF9": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideEc2ImagesACFD7DAC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRoleDefaultPolicyE42E3BF9",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionEventsRole86EC6C01",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2Images",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRoleDefaultPolicy94A17CE2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionCloudquerySourceAwsOrgWideEc2ImagesFirelensLogGroup32711A11",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRoleDefaultPolicy94A17CE2",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionExecutionRole5C4A6434",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideEc2ScheduledEventRule2C1BD783": {
      "Properties": {
        "ScheduleExpression": "rate(30 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRole536EB5E7",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_ec2_instances
    - aws_ec2_security_groups
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2AWSOTELCollector",
              },
              {
                "Condition": "SUCCESS",
                "ContainerName": "CloudquerySource-AwsOrgWideEc2AwsCli",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2Container",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2AWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/bash",
              "-c",
              "ECS_CLUSTER=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Cluster');ECS_FAMILY=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.Family');ECS_TASK_ARN=$(curl -s $ECS_CONTAINER_METADATA_URI/task | jq -r '.TaskARN');RUNNING=$(aws ecs list-tasks --cluster $ECS_CLUSTER --family $ECS_FAMILY | jq '.taskArns | length');[[ \${RUNNING} > 1 ]] && exit 114 || exit 0",
            ],
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "ghcr.io/guardian/service-catalogue/singleton:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2AwsCli",
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_ec2_instances', 1800000),('aws_ec2_security_groups', 1800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 1800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideEc2",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideEc2PostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinitionCloudquerySourceAwsOrgWideEc2FirelensLogGroupE01DEFEE",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideEc2Firelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideEc2TaskDefinitionBBF19A7E",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideEc2D13594C5",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionCloudquerySourceAwsOrgWideEc2FirelensLogGroupE01DEFEE": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRole536EB5E7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRoleDefaultPolicy5D07AAE8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideEc2D13594C5",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRoleDefaultPolicy5D07AAE8",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinitionEventsRole536EB5E7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideEc2",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleDefaultPolicy15E52B2D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideEc2TaskDefinitionCloudquerySourceAwsOrgWideEc2FirelensLogGroupE01DEFEE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleDefaultPolicy15E52B2D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinitionExecutionRoleD0810570",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsScheduledEventRule17238EC8": {
      "Properties": {
        "ScheduleExpression": "rate(4 hours)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRole20CD424D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_iam_credential_reports
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideIamCredentialReportsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideIamCredentialReports",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "819MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_iam_credential_reports', 14400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 14400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideIamCredentialReports",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionCloudquerySourceAwsOrgWideIamCredentialReportsFirelensLogGroupB7D88F87",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideIamCredentialReportsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition3443A1FA",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideIamCredentialReportsD1A28FD6",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionCloudquerySourceAwsOrgWideIamCredentialReportsFirelensLogGroupB7D88F87": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRole20CD424D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRoleDefaultPolicyEDC4DC94": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideIamCredentialReportsD1A28FD6",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRoleDefaultPolicyEDC4DC94",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionEventsRole20CD424D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideIamCredentialReports",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRoleDefaultPolicy0BBE996D": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionCloudquerySourceAwsOrgWideIamCredentialReportsFirelensLogGroupB7D88F87",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRoleDefaultPolicy0BBE996D",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinitionExecutionRole02E86B04",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersScheduledEventRuleE82A6C43": {
      "Properties": {
        "ScheduleExpression": "rate(30 minutes)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRole4A9EDE15",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_elbv1_*
    - aws_elbv2_*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideLoadBalancersAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideLoadBalancers",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_elbv1_%', 1800000),('aws_elbv2_%', 1800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 1800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideLoadBalancers",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionCloudquerySourceAwsOrgWideLoadBalancersFirelensLogGroup52712979",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideLoadBalancersFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionA0D1BDA3",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideLoadBalancersB565C247",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionCloudquerySourceAwsOrgWideLoadBalancersFirelensLogGroup52712979": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRole4A9EDE15": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRoleDefaultPolicy2F850C58": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideLoadBalancersB565C247",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRoleDefaultPolicy2F850C58",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionEventsRole4A9EDE15",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideLoadBalancers",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleDefaultPolicy7A95B87A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionCloudquerySourceAwsOrgWideLoadBalancersFirelensLogGroup52712979",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleDefaultPolicy7A95B87A",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionExecutionRoleD042731A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideRDSScheduledEventRule95E5DE51": {
      "Properties": {
        "ScheduleExpression": "cron(0 6 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleCC75E52D",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_rds_instances
    - aws_rds_clusters
    - aws_rds_db_snapshots
    - aws_rds_cluster_snapshots
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideRDSAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideRDS",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideRDSContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideRDSAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_rds_instances', 86400000),('aws_rds_clusters', 86400000),('aws_rds_db_snapshots', 86400000),('aws_rds_cluster_snapshots', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideRDS",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideRDSPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionCloudquerySourceAwsOrgWideRDSFirelensLogGroupA77166BD",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideRDSFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideRDSTaskDefinition222E5C6A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideRDS1CE08EDD",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionCloudquerySourceAwsOrgWideRDSFirelensLogGroupA77166BD": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleCC75E52D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleDefaultPolicy16D51A2A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideRDS1CE08EDD",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleDefaultPolicy16D51A2A",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionEventsRoleCC75E52D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideRDS",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRoleDefaultPolicy3BBDF952": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideRDSTaskDefinitionCloudquerySourceAwsOrgWideRDSFirelensLogGroupA77166BD",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRoleDefaultPolicy3BBDF952",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionExecutionRole22BD57E4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideS3ScheduledEventRule06193C1C": {
      "Properties": {
        "ScheduleExpression": "cron(0 4 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleA4289298",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_s3*
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsOrgWideS3AWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideS3",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideS3Container",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideS3AWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_s3%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsOrgWideS3",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsOrgWideS3PostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionCloudquerySourceAwsOrgWideS3FirelensLogGroup4CE08508",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsOrgWideS3Firelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsOrgWideS3TaskDefinition6734443A",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsOrgWideS38AEB5180",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionCloudquerySourceAwsOrgWideS3FirelensLogGroup4CE08508": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleA4289298": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleDefaultPolicy151FBFA4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsOrgWideS38AEB5180",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleDefaultPolicy151FBFA4",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionEventsRoleA4289298",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleDefaultPolicyE82AC40F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsOrgWideS3TaskDefinitionCloudquerySourceAwsOrgWideS3FirelensLogGroup4CE08508",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleDefaultPolicyE82AC40F",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsOrgWideS3TaskDefinitionExecutionRoleFDE66B47": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsOrgWideS3",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsRemainingDataScheduledEventRuleADE2D1CC": {
      "Properties": {
        "ScheduleExpression": "cron(0 16 ? * SAT *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRole45369093",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionCloudquerySourceAwsRemainingDataFirelensLogGroupAEF7D0F2": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRole45369093": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRoleDefaultPolicyE9BEA52B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsRemainingData673BE318",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRoleDefaultPolicyE9BEA52B",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionEventsRole45369093",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRoleDefaultPolicy3D9DFEF7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsRemainingDataTaskDefinitionCloudquerySourceAwsRemainingDataFirelensLogGroupAEF7D0F2",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRoleDefaultPolicy3D9DFEF7",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_*
  skip_dependent_tables: false
  skip_tables:
    - aws_ec2_vpc_endpoint_services
    - aws_cloudtrail_events
    - aws_docdb_cluster_parameter_groups
    - aws_docdb_engine_versions
    - aws_ec2_instance_types
    - aws_elasticache_engine_versions
    - aws_elasticache_parameter_groups
    - aws_elasticache_reserved_cache_nodes_offerings
    - aws_elasticache_service_updates
    - aws_emr_supported_instance_types
    - aws_neptune_cluster_parameter_groups
    - aws_neptune_db_parameter_groups
    - aws_rds_cluster_parameter_groups
    - aws_rds_db_parameter_groups
    - aws_rds_engine_versions
    - aws_servicequotas_services
    - aws_identitystore_users
    - aws_identitystore_groups
    - aws_quicksight_data_sets
    - aws_quicksight_dashboards
    - aws_quicksight_analyses
    - aws_quicksight_users
    - aws_quicksight_templates
    - aws_quicksight_groups
    - aws_quicksight_folders
    - aws_quicksight_data_sources
    - aws_amp_workspaces
    - aws_ssoadmin_instances
    - aws_glue_connections
    - aws_computeoptimizer_ecs_service_recommendations
    - aws_xray_sampling_rules
    - aws_xray_resource_policies
    - aws_xray_groups
    - aws_wellarchitected_*
    - aws_stepfunctions_map_runs
    - aws_stepfunctions_map_run_executions
    - aws_stepfunctions_executions
    - aws_scheduler_schedules
    - aws_organization*
    - aws_accessanalyzer_*
    - aws_securityhub_*
    - aws_guardduty_*
    - aws_inspector2_findings
    - aws_cloudformation_*
    - aws_costexplorer_cost_custom
    - aws_elbv1_*
    - aws_elbv2_*
    - aws_autoscaling_groups
    - aws_acm*
    - aws_lambda_*
    - aws_ssm_parameters
    - aws_cloudwatch_alarms
    - aws_s3*
    - aws_dynamodb*
    - aws_rds_instances
    - aws_rds_clusters
    - aws_rds_db_snapshots
    - aws_rds_cluster_snapshots
    - aws_backup_protected_resources
    - aws_backup_vaults
    - aws_backup_vault_recovery_points
    - aws_ec2_instances
    - aws_ec2_security_groups
    - aws_ec2_images
    - aws_iam_credential_reports
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    concurrency: 2000
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsRemainingDataAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsRemainingData",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "2457MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsRemainingDataContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsRemainingDataAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_%', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsRemainingData",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsRemainingDataPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionCloudquerySourceAwsRemainingDataFirelensLogGroupAEF7D0F2",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsRemainingDataFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsRemainingDataTaskDefinitionExecutionRole7F5255B8",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsRemainingDataTaskDefinition14D0B33A",
        "Memory": "3072",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsRemainingData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsRemainingData673BE318",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsSSMParametersScheduledEventRule0A998B82": {
      "Properties": {
        "ScheduleExpression": "cron(20 1 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRole510C5A17",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionCloudquerySourceAwsSSMParametersFirelensLogGroup0210F31D": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: aws
  path: cloudquery/aws
  version: v27.5.0
  tables:
    - aws_ssm_parameters
  skip_dependent_tables: false
  destinations:
    - postgresql
  otel_endpoint: 0.0.0.0:4318
  otel_endpoint_insecure: true
  spec:
    org:
      member_role_name: cloudquery-access
      organization_units:
        - ou-123
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-AwsSSMParametersAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsSSMParameters",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-AwsSSMParametersContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsSSMParametersAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('aws_ssm_parameters', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "AwsSSMParameters",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-AwsSSMParametersPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionCloudquerySourceAwsSSMParametersFirelensLogGroup0210F31D",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-AwsSSMParametersFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceAwsSSMParametersTaskDefinitionA4223CD9",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskAwsSSMParameters3BFA609D",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRole510C5A17": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRoleDefaultPolicy042DAF95": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskAwsSSMParameters3BFA609D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRoleDefaultPolicy042DAF95",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionEventsRole510C5A17",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "AwsSSMParameters",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRoleDefaultPolicy22EC1FE1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceAwsSSMParametersTaskDefinitionCloudquerySourceAwsSSMParametersFirelensLogGroup0210F31D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRoleDefaultPolicy22EC1FE1",
        "Roles": [
          {
            "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionExecutionRole7C7189F1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceEndOfLifeScheduledEventRule8F5B6605": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 1 * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceEndOfLifeTaskDefinition44F38EF3",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceEndOfLifeTaskDefinitionEventsRole86C3A19E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceEndOfLifeTaskDefinition44F38EF3": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: endoflife
  path: cloudquery/endoflife
  registry: cloudquery
  version: v1.2.7
  tables:
    - endoflife_products
  destinations:
    - postgresql
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-EndOfLifeAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "EndOfLife",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-EndOfLifeContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-EndOfLifeAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('endoflife_products', 2592000000) ON CONFLICT (table_name) DO UPDATE SET frequency = 2592000000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "EndOfLife",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-EndOfLifePostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceEndOfLifeTaskDefinitionCloudquerySourceEndOfLifeFirelensLogGroup772C5E06",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-EndOfLifeFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceEndOfLifeTaskDefinition893ABC22",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskEndOfLifeD8A11AC8",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionCloudquerySourceEndOfLifeFirelensLogGroup772C5E06": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionEventsRole86C3A19E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionEventsRoleDefaultPolicy91A3F11B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceEndOfLifeTaskDefinition44F38EF3",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskEndOfLifeD8A11AC8",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceEndOfLifeTaskDefinitionEventsRoleDefaultPolicy91A3F11B",
        "Roles": [
          {
            "Ref": "CloudquerySourceEndOfLifeTaskDefinitionEventsRole86C3A19E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "EndOfLife",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceEndOfLifeTaskDefinitionExecutionRoleDefaultPolicyA7DCE2DB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceEndOfLifeTaskDefinitionCloudquerySourceEndOfLifeFirelensLogGroup772C5E06",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceEndOfLifeTaskDefinitionExecutionRoleDefaultPolicyA7DCE2DB",
        "Roles": [
          {
            "Ref": "CloudquerySourceEndOfLifeTaskDefinitionExecutionRole2E522034",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceFastlyServicesScheduledEventRule1F83E593": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceFastlyServicesTaskDefinitionDCCD3FD4",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleE821B76C",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionCloudquerySourceFastlyServicesFirelensLogGroupF5954401": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionDCCD3FD4": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: fastly
  path: cloudquery/fastly
  version: v3.0.7
  tables:
    - fastly_services
    - fastly_service_versions
    - fastly_service_backends
    - fastly_service_domains
    - fastly_service_health_checks
    - fastly_account_users
  skip_dependent_tables: false
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    fastly_api_key: \${FASTLY_API_KEY}
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-FastlyServicesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "FastlyServices",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-FastlyServicesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "FASTLY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "fastlycredentialsF42D3C80",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-FastlyServicesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('fastly_services', 86400000),('fastly_service_versions', 86400000),('fastly_service_backends', 86400000),('fastly_service_domains', 86400000),('fastly_service_health_checks', 86400000),('fastly_account_users', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "FastlyServices",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-FastlyServicesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceFastlyServicesTaskDefinitionCloudquerySourceFastlyServicesFirelensLogGroupF5954401",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-FastlyServicesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceFastlyServicesTaskDefinition92125649",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskFastlyServices33D5467F",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleDefaultPolicy4E34F504": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceFastlyServicesTaskDefinitionDCCD3FD4",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskFastlyServices33D5467F",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleDefaultPolicy4E34F504",
        "Roles": [
          {
            "Ref": "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleE821B76C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionEventsRoleE821B76C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleDefaultPolicy1B888D16": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "fastlycredentialsF42D3C80",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceFastlyServicesTaskDefinitionCloudquerySourceFastlyServicesFirelensLogGroupF5954401",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleDefaultPolicy1B888D16",
        "Roles": [
          {
            "Ref": "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceFastlyServicesTaskDefinitionExecutionRoleEF21A3A9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "FastlyServices",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGalaxiesScheduledEventRuleCC774CB8": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGalaxiesTaskDefinition0777FEFC",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGalaxiesTaskDefinitionEventsRoleD1AF9A82",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGalaxiesTaskDefinition0777FEFC": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              {
                "Fn::Join": [
                  "",
                  [
                    "printf 'kind: source
spec:
  name: galaxies
  path: guardian/galaxies
  registry: github
  version: v1.1.9
  destinations:
    - postgresql
  tables:
    - galaxies_people_table
    - galaxies_teams_table
    - galaxies_streams_table
    - galaxies_people_profile_info_table
  spec:
    bucket: ",
                    {
                      "Fn::Select": [
                        0,
                        {
                          "Fn::Split": [
                            "/",
                            {
                              "Fn::Select": [
                                5,
                                {
                                  "Fn::Split": [
                                    ":",
                                    {
                                      "Ref": "ActionsStaticSiteBucketArnParam",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    "
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
                  ],
                ],
              },
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GalaxiesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "Galaxies",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GalaxiesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GalaxiesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('galaxies_people_table', 86400000),('galaxies_teams_table', 86400000),('galaxies_streams_table', 86400000),('galaxies_people_profile_info_table', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "Galaxies",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GalaxiesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGalaxiesTaskDefinitionCloudquerySourceGalaxiesFirelensLogGroupB5272E0D",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GalaxiesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceGalaxiesTaskDefinition6724C33F",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskGalaxiesDBF8C9E4",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGalaxiesTaskDefinitionCloudquerySourceGalaxiesFirelensLogGroupB5272E0D": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGalaxiesTaskDefinitionEventsRoleD1AF9A82": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGalaxiesTaskDefinitionEventsRoleDefaultPolicy022DA6EA": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGalaxiesTaskDefinition0777FEFC",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskGalaxiesDBF8C9E4",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGalaxiesTaskDefinitionEventsRoleDefaultPolicy022DA6EA",
        "Roles": [
          {
            "Ref": "CloudquerySourceGalaxiesTaskDefinitionEventsRoleD1AF9A82",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "Galaxies",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDefaultPolicyB6D2CB7A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGalaxiesTaskDefinitionCloudquerySourceGalaxiesFirelensLogGroupB5272E0D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDefaultPolicyB6D2CB7A",
        "Roles": [
          {
            "Ref": "CloudquerySourceGalaxiesTaskDefinitionExecutionRoleDDB0DD4B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubIssuesScheduledEventRuleAF7C253C": {
      "Properties": {
        "ScheduleExpression": "cron(0 2 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionFA21D536",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubIssuesTaskDefinitionEventsRole056ACC7E",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionCloudquerySourceGitHubIssuesFirelensLogGroupE9112ED9": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionEventsRole056ACC7E": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionEventsRoleDefaultPolicy13E8811A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionFA21D536",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskGitHubIssues1EFFA3D3",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubIssuesTaskDefinitionEventsRoleDefaultPolicy13E8811A",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionEventsRole056ACC7E",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRoleDefaultPolicyFA58BC48": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubIssuesTaskDefinitionCloudquerySourceGitHubIssuesFirelensLogGroupE9112ED9",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRoleDefaultPolicyFA58BC48",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubIssuesTaskDefinitionFA21D536": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v11.11.1
  tables:
    - github_issues
  skip_dependent_tables: false
  skip_tables:
    - github_issue_timeline_events
    - github_issue_pullrequest_reviews
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubIssuesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubIssues",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubIssuesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubIssuesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_issues', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubIssues",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubIssuesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubIssuesTaskDefinitionCloudquerySourceGitHubIssuesFirelensLogGroupE9112ED9",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubIssuesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubIssuesTaskDefinitionExecutionRole6BDDECB3",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceGitHubIssuesTaskDefinition750BB414",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubIssues",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskGitHubIssues1EFFA3D3",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubLanguagesScheduledEventRule3F047D8E": {
      "Properties": {
        "ScheduleExpression": "rate(7 days)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionDA995E2B",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleD0480706",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionCloudquerySourceGitHubLanguagesFirelensLogGroup38EAAC3E": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionDA995E2B": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github-languages
  path: guardian/github-languages
  version: v0.0.5
  destinations:
    - postgresql
  tables:
    - github_languages
  registry: github
  spec:
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: false
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubLanguagesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubLanguages",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubLanguagesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubLanguagesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_languages', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubLanguages",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubLanguagesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionCloudquerySourceGitHubLanguagesFirelensLogGroup38EAAC3E",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubLanguagesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceGitHubLanguagesTaskDefinitionB1DA60BF",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskGitHubLanguagesED141D27",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleD0480706": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleDefaultPolicy1B11BE73": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionDA995E2B",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskGitHubLanguagesED141D27",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleDefaultPolicy1B11BE73",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionEventsRoleD0480706",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubLanguages",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleDefaultPolicy9D57CA88": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubLanguagesTaskDefinitionCloudquerySourceGitHubLanguagesFirelensLogGroup38EAAC3E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleDefaultPolicy9D57CA88",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubLanguagesTaskDefinitionExecutionRoleB77C8E3D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubRepositoriesScheduledEventRuleC7F5836E": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRole93DB1A26",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v11.11.1
  tables:
    - github_repositories
    - github_repository_branches
    - github_repository_collaborators
    - github_repository_custom_properties
    - github_workflows
  skip_dependent_tables: false
  skip_tables:
    - github_releases
    - github_release_assets
    - github_repository_dependabot_alerts
    - github_repository_dependabot_secrets
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubRepositoriesAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubRepositories",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "1638MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubRepositoriesContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubRepositoriesAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_repositories', 86400000),('github_repository_branches', 86400000),('github_repository_collaborators', 86400000),('github_repository_custom_properties', 86400000),('github_workflows', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubRepositories",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubRepositoriesPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinitionCloudquerySourceGitHubRepositoriesFirelensLogGroup42A4D85D",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubRepositoriesFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceGitHubRepositoriesTaskDefinition13A7DF48",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskGitHubRepositories83F97F25",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionCloudquerySourceGitHubRepositoriesFirelensLogGroup42A4D85D": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRole93DB1A26": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRoleDefaultPolicy1ECEEEB2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskGitHubRepositories83F97F25",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRoleDefaultPolicy1ECEEEB2",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinitionEventsRole93DB1A26",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubRepositories",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRoleDefaultPolicy04F69199": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubRepositoriesTaskDefinitionCloudquerySourceGitHubRepositoriesFirelensLogGroup42A4D85D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRoleDefaultPolicy04F69199",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinitionExecutionRole03A80EA4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubTeamsScheduledEventRule051F542B": {
      "Properties": {
        "ScheduleExpression": "cron(0 10 ? * 1 *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionB01C9D3C",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceGitHubTeamsTaskDefinitionEventsRole3E2A5002",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionB01C9D3C": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "echo -n $GITHUB_PRIVATE_KEY | base64 -d > /usr/share/cloudquery/github-private-key;echo -n $GITHUB_APP_ID >  /usr/share/cloudquery/github-app-id;echo -n $GITHUB_INSTALLATION_ID >  /usr/share/cloudquery/github-installation-id;printf 'kind: source
spec:
  name: github
  path: cloudquery/github
  version: v11.11.1
  tables:
    - github_organizations
    - github_organization_members
    - github_teams
    - github_team_members
    - github_team_repositories
  skip_dependent_tables: false
  skip_tables:
    - github_organization_dependabot_alerts
    - github_organization_dependabot_secrets
  destinations:
    - postgresql
  spec:
    concurrency: 1000
    orgs:
      - guardian
    app_auth:
      - org: guardian
        private_key_path: /usr/share/cloudquery/github-private-key
        app_id: \${file:/usr/share/cloudquery/github-app-id}
        installation_id: \${file:/usr/share/cloudquery/github-installation-id}
    include_archived_repos: true
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-GitHubTeamsAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubTeams",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "3276MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubTeamsContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "GITHUB_PRIVATE_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":private-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_APP_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":app-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "GITHUB_INSTALLATION_ID",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "githubcredentialsAF453741",
                      },
                      ":installation-id::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubTeamsAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('github_organizations', 604800000),('github_organization_members', 604800000),('github_teams', 604800000),('github_team_members', 604800000),('github_team_repositories', 604800000) ON CONFLICT (table_name) DO UPDATE SET frequency = 604800000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "GitHubTeams",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-GitHubTeamsPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionCloudquerySourceGitHubTeamsFirelensLogGroup8B1FFADC",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-GitHubTeamsFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "2048",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceGitHubTeamsTaskDefinition5CFD9707",
        "Memory": "4096",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskGitHubTeams5756A4ED",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionCloudquerySourceGitHubTeamsFirelensLogGroup8B1FFADC": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionEventsRole3E2A5002": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionEventsRoleDefaultPolicy5B79609C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionB01C9D3C",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskGitHubTeams5756A4ED",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubTeamsTaskDefinitionEventsRoleDefaultPolicy5B79609C",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionEventsRole3E2A5002",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "GitHubTeams",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRoleDefaultPolicy3618CA18": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "githubcredentialsAF453741",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceGitHubTeamsTaskDefinitionCloudquerySourceGitHubTeamsFirelensLogGroup8B1FFADC",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRoleDefaultPolicy3618CA18",
        "Roles": [
          {
            "Ref": "CloudquerySourceGitHubTeamsTaskDefinitionExecutionRole9DEDACFD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceNS1ScheduledEventRule1D618E3C": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceNS1TaskDefinition56258A70",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceNS1TaskDefinitionEventsRole2D5A948C",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceNS1TaskDefinition56258A70": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: ns1
  registry: grpc
  path: localhost:7777
  version: v0.0.0
  tables:
    - ns1_*
  destinations:
    - postgresql
  spec:
    apiKey: \${NS1_API_KEY}
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-NS1AWSOTELCollector",
              },
              {
                "Condition": "START",
                "ContainerName": "CloudquerySource-NS1PluginContainer",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "NS1",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-NS1Container",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "NS1_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "ns1credentialsA8DD3B2D",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-NS1AWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Essential": false,
            "Image": "ghcr.io/guardian/cq-source-ns1:0.1.6",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-NS1PluginContainer",
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('ns1_%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "NS1",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-NS1PostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceNS1TaskDefinitionCloudquerySourceNS1FirelensLogGroup3A327514",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-NS1Firelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceNS1TaskDefinitionE32F0EBB",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskNS1B2D0D4B7",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudquerySourceNS1TaskDefinitionCloudquerySourceNS1FirelensLogGroup3A327514": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceNS1TaskDefinitionEventsRole2D5A948C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceNS1TaskDefinitionEventsRoleDefaultPolicyE40A5A68": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceNS1TaskDefinition56258A70",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskNS1B2D0D4B7",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceNS1TaskDefinitionEventsRoleDefaultPolicyE40A5A68",
        "Roles": [
          {
            "Ref": "CloudquerySourceNS1TaskDefinitionEventsRole2D5A948C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceNS1TaskDefinitionExecutionRoleDefaultPolicyA99171A1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "ns1credentialsA8DD3B2D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceNS1TaskDefinitionCloudquerySourceNS1FirelensLogGroup3A327514",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceNS1TaskDefinitionExecutionRoleDefaultPolicyA99171A1",
        "Roles": [
          {
            "Ref": "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceNS1TaskDefinitionExecutionRoleECC80718": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "NS1",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceRiffRaffDataScheduledEventRuleDE690018": {
      "Properties": {
        "ScheduleExpression": "cron(0 0 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                    {
                      "Ref": "SsmParameterValueTESTdeployriffraffexternaldatabaseaccesssecuritygroupC96584B6F00A464EAD1953AFF4B05118Parameter",
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionFF023225",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "CloudquerySourceRiffRaffDataTaskDefinitionEventsRole5EF6E214",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionCloudquerySourceRiffRaffDataFirelensLogGroup55CB2F37": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionEventsRole5EF6E214": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionEventsRoleDefaultPolicyAD8B28A1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionFF023225",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "servicecatalogueTESTtaskRiffRaffDataC9A39FC8",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceRiffRaffDataTaskDefinitionEventsRoleDefaultPolicyAD8B28A1",
        "Roles": [
          {
            "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionEventsRole5EF6E214",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRoleDefaultPolicyA6FD732F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "RiffRaffDatabaseCredentials2033FD7A",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CloudquerySourceRiffRaffDataTaskDefinitionCloudquerySourceRiffRaffDataFirelensLogGroup55CB2F37",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRoleDefaultPolicyA6FD732F",
        "Roles": [
          {
            "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudquerySourceRiffRaffDataTaskDefinitionFF023225": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "/bin/sh",
              "-c",
              "printf 'kind: source
spec:
  name: postgresql
  path: cloudquery/postgresql
  version: v3.0.7
  destinations:
    - postgresql
  tables:
    - riffraff_*
  skip_tables:
    - riffraff_deploy_logs
  spec:
    connection_string: >-
      user=\${RIFFRAFF_DB_USERNAME} password=\${RIFFRAFF_DB_PASSWORD}
      host=\${RIFFRAFF_DB_HOST} port=5432 dbname=riffraff sslmode=verify-full
' > /usr/share/cloudquery/source.yaml;printf 'kind: destination
spec:
  name: postgresql
  registry: github
  path: cloudquery/postgresql
  version: v7.2.0
  write_mode: overwrite-delete-stale
  migrate_mode: forced
  spec:
    connection_string: >-
      user=\${DB_USERNAME} password=\${DB_PASSWORD} host=\${DB_HOST} port=5432
      dbname=postgres sslmode=verify-full
' > /usr/share/cloudquery/destination.yaml;/app/cloudquery sync /usr/share/cloudquery/source.yaml /usr/share/cloudquery/destination.yaml --log-format json --log-console --no-log-file",
            ],
            "DependsOn": [
              {
                "Condition": "HEALTHY",
                "ContainerName": "CloudquerySource-RiffRaffDataAWSOTELCollector",
              },
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "RiffRaffData",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Environment": [
              {
                "Name": "GOMEMLIMIT",
                "Value": "409MiB",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/cloudquery:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/share/cloudquery",
                "ReadOnly": false,
                "SourceVolume": "config-volume",
              },
              {
                "ContainerPath": "/app/.cq",
                "ReadOnly": false,
                "SourceVolume": "cloudquery-volume",
              },
              {
                "ContainerPath": "/tmp",
                "ReadOnly": false,
                "SourceVolume": "tmp-volume",
              },
            ],
            "Name": "CloudquerySource-RiffRaffDataContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "RIFFRAFF_DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "RiffRaffDatabaseCredentials2033FD7A",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "RIFFRAFF_DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "RiffRaffDatabaseCredentials2033FD7A",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "RIFFRAFF_DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "RiffRaffDatabaseCredentials2033FD7A",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
              {
                "Name": "CLOUDQUERY_API_KEY",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "cloudqueryapikeyCCF82F53",
                      },
                      ":api-key::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Command": [
              "--config=/etc/ecs/ecs-xray.yaml",
            ],
            "Essential": true,
            "HealthCheck": {
              "Command": [
                "CMD",
                "/healthcheck",
              ],
              "Interval": 5,
              "Retries": 3,
              "Timeout": 5,
            },
            "Image": "public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-RiffRaffDataAWSOTELCollector",
            "PortMappings": [
              {
                "ContainerPort": 4318,
                "Protocol": "tcp",
              },
            ],
            "ReadonlyRootFilesystem": true,
          },
          {
            "Command": [
              "/bin/sh",
              "-c",
              "psql -c "INSERT INTO cloudquery_table_frequency VALUES ('riffraff_%', 86400000) ON CONFLICT (table_name) DO UPDATE SET frequency = 86400000"",
            ],
            "DockerLabels": {
              "App": "service-catalogue",
              "Name": "RiffRaffData",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "EntryPoint": [
              "",
            ],
            "Essential": false,
            "Image": "public.ecr.aws/docker/library/postgres:16-alpine",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "Name": "CloudquerySource-RiffRaffDataPostgresContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "PGUSER",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGHOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "PGPASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "service-catalogue",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudquerySourceRiffRaffDataTaskDefinitionCloudquerySourceRiffRaffDataFirelensLogGroup55CB2F37",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/service-catalogue",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "CloudquerySource-RiffRaffDataFirelens",
            "ReadonlyRootFilesystem": true,
          },
        ],
        "Cpu": "256",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "CloudquerySourceRiffRaffDataTaskDefinitionExecutionRole18EFA1E2",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueCloudquerySourceRiffRaffDataTaskDefinitionD52C3076",
        "Memory": "512",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Name",
            "Value": "RiffRaffData",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "servicecatalogueTESTtaskRiffRaffDataC9A39FC8",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "config-volume",
          },
          {
            "Name": "cloudquery-volume",
          },
          {
            "Name": "tmp-volume",
          },
          {
            "Name": "firelens-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "CloudqueryUsageC8AA502D": {
      "DependsOn": [
        "CloudqueryUsageServiceRoleDefaultPolicyB5399C9A",
        "CloudqueryUsageServiceRoleF92030CD",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/cloudquery-usage/cloudquery-usage.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "cloudquery-usage",
            "CQ_API_KEY_PATH": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      2,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "cloudqueryapikeyCCF82F53",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "CloudqueryUsageServiceRoleF92030CD",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "CloudqueryUsageCloudqueryUsagecron090AllowEventRuleServiceCatalogueCloudqueryUsage6FECAFBF5AE90F86": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "CloudqueryUsageC8AA502D",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudqueryUsageCloudqueryUsagecron090F7B78876",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "CloudqueryUsageCloudqueryUsagecron090F7B78876": {
      "Properties": {
        "ScheduleExpression": "cron(0 9 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "CloudqueryUsageC8AA502D",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "CloudqueryUsageServiceRoleDefaultPolicyB5399C9A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/cloudquery-usage/cloudquery-usage.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/cloudquery-usage",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/cloudquery-usage/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "cloudqueryapikeyCCF82F53",
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/cloudquery_usage",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CloudqueryUsageServiceRoleDefaultPolicyB5399C9A",
        "Roles": [
          {
            "Ref": "CloudqueryUsageServiceRoleF92030CD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudqueryUsageServiceRoleF92030CD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudquery-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DataAudit2FEB3068": {
      "DependsOn": [
        "DataAuditRoleDefaultPolicyD0BF34E5",
        "DataAuditRoleB3B90C40",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/data-audit/data-audit.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "data-audit",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "DataAuditRoleB3B90C40",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "data-audit",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 600,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "DataAuditDataAuditrate1day015E5BEEB": {
      "Properties": {
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "DataAudit2FEB3068",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "DataAuditDataAuditrate1day0AllowEventRuleServiceCatalogueDataAudit9CC2131ED1368FFF": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "DataAudit2FEB3068",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "DataAuditDataAuditrate1day015E5BEEB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "DataAuditRoleB3B90C40": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
        ],
        "RoleName": "service-catalogue-data-audit-TEST",
        "Tags": [
          {
            "Key": "App",
            "Value": "data-audit",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "DataAuditRoleDefaultPolicyD0BF34E5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/data-audit/data-audit.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/data-audit",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/data-audit/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/dataaudit",
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "DataAuditRoleDefaultPolicyD0BF34E5",
        "Roles": [
          {
            "Ref": "DataAuditRoleB3B90C40",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "EBSByteBalanceAlarm": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-sec-ops-reliability-alerts",
              ],
            ],
          },
        ],
        "ComparisonOperator": "LessThanLowerOrGreaterThanUpperThreshold",
        "DatapointsToAlarm": 1,
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "ANOMALY_DETECTION_BAND(m1, 2)",
            "Id": "ad1",
            "ReturnData": true,
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "DBInstanceIdentifier",
                    "Value": {
                      "Ref": "PostgresInstance16DE4286E",
                    },
                  },
                ],
                "MetricName": "EBSByteBalance%",
                "Namespace": "AWS/RDS",
              },
              "Period": 300,
              "Stat": "Average",
            },
            "ReturnData": true,
          },
        ],
        "OKActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:eu-west-1:",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-sec-ops-reliability-alerts",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "ThresholdMetricId": "ad1",
        "TreatMissingData": "breaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "EBSByteBalanceAnomalyDetector": {
      "Properties": {
        "Dimensions": [
          {
            "Name": "DBInstanceIdentifier",
            "Value": {
              "Ref": "PostgresInstance16DE4286E",
            },
          },
        ],
        "MetricName": "EBSByteBalance%",
        "Namespace": "AWS/RDS",
        "Stat": "Average",
      },
      "Type": "AWS::CloudWatch::AnomalyDetector",
    },
    "GithubActionsUsageAC7E0411": {
      "DependsOn": [
        "GithubActionsUsageServiceRoleDefaultPolicyBFE2CD5F",
        "GithubActionsUsageServiceRole782ABC41",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/github-actions-usage/github-actions-usage.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "github-actions-usage",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "GithubActionsUsageServiceRole782ABC41",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "github-actions-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 600,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "GithubActionsUsageServiceRole782ABC41": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "github-actions-usage",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "GithubActionsUsageServiceRoleDefaultPolicyBFE2CD5F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/github-actions-usage/github-actions-usage.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/github-actions-usage",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/github-actions-usage/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/github_actions_usage",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "GithubActionsUsageServiceRoleDefaultPolicyBFE2CD5F",
        "Roles": [
          {
            "Ref": "GithubActionsUsageServiceRole782ABC41",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PostgresAccessSecurityGroupParam38DFE001": {
      "Properties": {
        "DataType": "text",
        "Name": "/TEST/deploy/service-catalogue/postgres-access-security-group",
        "Tags": {
          "Stack": "deploy",
          "Stage": "TEST",
          "gu:cdk:version": "TEST",
          "gu:repo": "guardian/service-catalogue",
        },
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "PostgresAccessSecurityGroupServicecatalogue03C78F14",
            "GroupId",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "PostgresAccessSecurityGroupServicecatalogue03C78F14": {
      "Properties": {
        "GroupDescription": "ServiceCatalogue/PostgresAccessSecurityGroupServicecatalogue",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "service-catalogue",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresInstance16DE4286E": {
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "AllocatedStorage": "100",
        "CACertificateIdentifier": "rds-ca-rsa2048-g1",
        "CopyTagsToSnapshot": true,
        "DBInstanceClass": "db.t4g.small",
        "DBSubnetGroupName": {
          "Ref": "PostgresInstance1SubnetGroupCAC045A5",
        },
        "DeletionProtection": true,
        "EnableIAMDatabaseAuthentication": true,
        "EnablePerformanceInsights": true,
        "Engine": "postgres",
        "MasterUserPassword": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresInstance1Secret7FA1A24B",
              },
              ":SecretString:password::}}",
            ],
          ],
        },
        "MasterUsername": {
          "Fn::Join": [
            "",
            [
              "{{resolve:secretsmanager:",
              {
                "Ref": "PostgresInstance1Secret7FA1A24B",
              },
              ":SecretString:username::}}",
            ],
          ],
        },
        "MonitoringInterval": 10,
        "MonitoringRoleArn": {
          "Fn::GetAtt": [
            "PostgresInstance1MonitoringRole681B0673",
            "Arn",
          ],
        },
        "MultiAZ": false,
        "PerformanceInsightsRetentionPeriod": 7,
        "Port": "5432",
        "PubliclyAccessible": false,
        "StorageEncrypted": true,
        "StorageType": "gp3",
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VPCSecurityGroups": [
          {
            "Fn::GetAtt": [
              "PostgresSecurityGroupServicecatalogueD2F089D5",
              "GroupId",
            ],
          },
        ],
      },
      "Type": "AWS::RDS::DBInstance",
      "UpdateReplacePolicy": "Snapshot",
    },
    "PostgresInstance1MonitoringRole681B0673": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "monitoring.rds.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PostgresInstance1Secret7FA1A24B": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": {
          "Fn::Join": [
            "",
            [
              "Generated by the CDK for stack: ",
              {
                "Ref": "AWS::StackName",
              },
            ],
          ],
        },
        "GenerateSecretString": {
          "ExcludeCharacters": " %+~\`#$&*()|[]{}:;<>?!'/@"\\",
          "GenerateStringKey": "password",
          "PasswordLength": 30,
          "SecretStringTemplate": "{"username":"postgres"}",
        },
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "PostgresInstance1SecretAttachmentBA0D257D": {
      "Properties": {
        "SecretId": {
          "Ref": "PostgresInstance1Secret7FA1A24B",
        },
        "TargetId": {
          "Ref": "PostgresInstance16DE4286E",
        },
        "TargetType": "AWS::RDS::DBInstance",
      },
      "Type": "AWS::SecretsManager::SecretTargetAttachment",
    },
    "PostgresInstance1SubnetGroupCAC045A5": {
      "Properties": {
        "DBSubnetGroupDescription": "Subnet group for PostgresInstance1 database",
        "SubnetIds": {
          "Ref": "PrivateSubnets",
        },
        "Tags": [
          {
            "Key": "devx-backup-enabled",
            "Value": "true",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::RDS::DBSubnetGroup",
    },
    "PostgresInstanceEndpointAddress6E14162C": {
      "Properties": {
        "DataType": "text",
        "Name": "/TEST/deploy/service-catalogue/postgres-instance-endpoint-address",
        "Tags": {
          "Stack": "deploy",
          "Stage": "TEST",
          "gu:cdk:version": "TEST",
          "gu:repo": "guardian/service-catalogue",
        },
        "Tier": "Standard",
        "Type": "String",
        "Value": {
          "Fn::GetAtt": [
            "PostgresInstance16DE4286E",
            "Endpoint.Address",
          ],
        },
      },
      "Type": "AWS::SSM::Parameter",
    },
    "PostgresSecurityGroupServicecatalogueD2F089D5": {
      "Properties": {
        "GroupDescription": "ServiceCatalogue/PostgresSecurityGroupServicecatalogue",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "10.0.0.4/22",
            "Description": "Allow connection to Postgres from the office network.",
            "FromPort": 5432,
            "IpProtocol": "tcp",
            "ToPort": 5432,
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "service-catalogue",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "PostgresSecurityGroupServicecataloguefromServiceCataloguePostgresAccessSecurityGroupServicecatalogue56F7252C5432A44FF186": {
      "Properties": {
        "Description": "from ServiceCataloguePostgresAccessSecurityGroupServicecatalogue56F7252C:5432",
        "FromPort": 5432,
        "GroupId": {
          "Fn::GetAtt": [
            "PostgresSecurityGroupServicecatalogueD2F089D5",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "PostgresAccessSecurityGroupServicecatalogue03C78F14",
            "GroupId",
          ],
        },
        "ToPort": 5432,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "PrismaMigrateArtifactPutRuleA305B852": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "eventName": [
              "PutObject",
            ],
            "eventSource": [
              "s3.amazonaws.com",
            ],
            "requestParameters": {
              "bucketName": [
                {
                  "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
              ],
              "key": [
                "deploy/TEST/service-catalogue-prisma-migrations/prisma.zip",
              ],
            },
          },
          "detail-type": [
            "AWS API Call via CloudTrail",
          ],
          "source": [
            "aws.s3",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "servicecatalogueCluster5FC34DC5",
                "Arn",
              ],
            },
            "EcsParameters": {
              "LaunchType": "FARGATE",
              "NetworkConfiguration": {
                "AwsVpcConfiguration": {
                  "AssignPublicIp": "DISABLED",
                  "SecurityGroups": [
                    {
                      "Fn::GetAtt": [
                        "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                        "GroupId",
                      ],
                    },
                  ],
                  "Subnets": {
                    "Ref": "PrivateSubnets",
                  },
                },
              },
              "PropagateTags": "TASK_DEFINITION",
              "TaskCount": 1,
              "TaskDefinitionArn": {
                "Ref": "prismamigratetaskTaskDefinition6CE347DF",
              },
            },
            "Id": "Target0",
            "Input": "{}",
            "RoleArn": {
              "Fn::GetAtt": [
                "prismamigratetaskTaskDefinitionEventsRole980BE1A4",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "RefreshMaterializedViewF0E38938": {
      "DependsOn": [
        "RefreshMaterializedViewServiceRoleDefaultPolicyCF61664F",
        "RefreshMaterializedViewServiceRole8A87DE10",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/refresh-materialized-view/refresh-materialized-view.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "refresh-materialized-view",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewServiceRole8A87DE10",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "refresh-materialized-view",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 600,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "RefreshMaterializedViewServiceRole8A87DE10": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "refresh-materialized-view",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "RefreshMaterializedViewServiceRoleDefaultPolicyCF61664F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/refresh-materialized-view/refresh-materialized-view.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/refresh-materialized-view",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/refresh-materialized-view/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/refresh_materialized_view",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "RefreshMaterializedViewServiceRoleDefaultPolicyCF61664F",
        "Roles": [
          {
            "Ref": "RefreshMaterializedViewServiceRole8A87DE10",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "RiffRaffDatabaseCredentials2033FD7A": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/riffraff-database-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "TopicBFC7AF6E": {
      "Properties": {
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TopicName": "interactive-monitor-TEST",
      },
      "Type": "AWS::SNS::Topic",
    },
    "cloudbuster8C461939": {
      "DependsOn": [
        "cloudbusterServiceRoleDefaultPolicy173FB27F",
        "cloudbusterServiceRoleFE532A3F",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/cloudbuster/cloudbuster.zip",
        },
        "Environment": {
          "Variables": {
            "ANGHAMMARAD_SNS_ARN": {
              "Ref": "AnghammaradSnsArn",
            },
            "APP": "cloudbuster",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "Text",
        },
        "MemorySize": 512,
        "Role": {
          "Fn::GetAtt": [
            "cloudbusterServiceRoleFE532A3F",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudbuster",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 120,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "cloudbusterServiceRoleDefaultPolicy173FB27F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/cloudbuster/cloudbuster.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/cloudbuster",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/cloudbuster/*",
                  ],
                ],
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AnghammaradSnsArn",
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/cloudbuster",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "cloudbusterServiceRoleDefaultPolicy173FB27F",
        "Roles": [
          {
            "Ref": "cloudbusterServiceRoleFE532A3F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "cloudbusterServiceRoleFE532A3F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "cloudbuster",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "cloudbustercloudbustercron03MONFRI086370CEA": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "cloudbuster8C461939",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "cloudbustercloudbustercron03MONFRI0AllowEventRuleServiceCataloguecloudbuster82FA89E47F529A44": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "cloudbuster8C461939",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "cloudbustercloudbustercron03MONFRI086370CEA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "cloudqueryapikeyCCF82F53": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/cloudquery-api-key",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "dependencygraphintegrator508B46FC": {
      "DependsOn": [
        "dependencygraphintegratorServiceRoleDefaultPolicy6EBFEC55",
        "dependencygraphintegratorServiceRole5200A556",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/dependency-graph-integrator/dependency-graph-integrator.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "dependency-graph-integrator",
            "GITHUB_APP_SECRET": {
              "Ref": "dependencygraphintegratorgithubappauthB8B9DE78",
            },
            "GITHUB_ORG": "guardian",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "dependencygraphintegratorServiceRole5200A556",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "dependency-graph-integrator",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "dependencygraphintegratorSecurityGroupC8A882C0",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "dependencygraphintegratorAllowInvokeServiceCataloguedependencygraphintegratorinputtopicTESTC360D94D8B8A768E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "dependencygraphintegrator508B46FC",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "dependencygraphintegratorinputtopicTESTDAA73A88",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "dependencygraphintegratorSecurityGroupC8A882C0": {
      "Properties": {
        "GroupDescription": "Automatic security group for Lambda Function ServiceCataloguedependencygraphintegrator6DE43587",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "dependency-graph-integrator",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "VpcId": {
          "Ref": "VpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "dependencygraphintegratorServiceRole5200A556": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "dependency-graph-integrator",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "dependencygraphintegratorServiceRoleDefaultPolicy6EBFEC55": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/dependency-graph-integrator/dependency-graph-integrator.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/dependency-graph-integrator",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/dependency-graph-integrator/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "dependencygraphintegratorgithubappauthB8B9DE78",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "dependencygraphintegratorServiceRoleDefaultPolicy6EBFEC55",
        "Roles": [
          {
            "Ref": "dependencygraphintegratorServiceRole5200A556",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "dependencygraphintegratordependencygraphintegratorinputtopicTEST621C9371": {
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "dependencygraphintegrator508B46FC",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "dependencygraphintegratorinputtopicTESTDAA73A88",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "dependencygraphintegratorgithubappauthB8B9DE78": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/dependency-graph-integrator-github-app-secret",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "dependencygraphintegratorinputtopicTESTDAA73A88": {
      "Properties": {
        "DisplayName": "Dependency Graph Integrator Input Topic",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "fastlycredentialsF42D3C80": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/fastly-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "githubactionsusagelambdatriggerAllowEventRuleServiceCatalogueGithubActionsUsageFB05F39B49275F66": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "GithubActionsUsageAC7E0411",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "githubactionsusagelambdatriggerE81735F9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "githubactionsusagelambdatriggerE81735F9": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-GitHubRepositoriesContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceGitHubRepositoriesTaskDefinition921DC1BC",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "GithubActionsUsageAC7E0411",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "githubcredentialsAF453741": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/github-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "interactivemonitor3435C6C2": {
      "DependsOn": [
        "interactivemonitorServiceRoleDefaultPolicy44B1B670",
        "interactivemonitorServiceRoleC210EED3",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/interactive-monitor/interactive-monitor.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "interactive-monitor",
            "GITHUB_APP_SECRET": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Fn::Select": [
                      0,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      1,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      2,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      3,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  {
                    "Fn::Select": [
                      4,
                      {
                        "Fn::Split": [
                          "-",
                          {
                            "Fn::Select": [
                              6,
                              {
                                "Fn::Split": [
                                  ":",
                                  {
                                    "Ref": "interactivemonitorgithubapp9777D674",
                                  },
                                ],
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              ],
            },
            "GITHUB_ORG": "guardian",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 512,
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "interactivemonitorServiceRoleC210EED3",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "interactive-monitor",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "interactivemonitorAllowInvokeServiceCatalogueTopic0AC51635C623A304": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "interactivemonitor3435C6C2",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "interactivemonitorServiceRoleC210EED3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "interactive-monitor",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "interactivemonitorServiceRoleDefaultPolicy44B1B670": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/interactive-monitor/interactive-monitor.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/interactive-monitor",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/interactive-monitor/*",
                  ],
                ],
              },
            },
            {
              "Action": "s3:ListBucket",
              "Effect": "Allow",
              "Resource": [
                "arn:aws:s3:::gdn-cdn",
                "arn:aws:s3:::gdn-cdn/*",
              ],
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "interactivemonitorgithubapp9777D674",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "interactivemonitorServiceRoleDefaultPolicy44B1B670",
        "Roles": [
          {
            "Ref": "interactivemonitorServiceRoleC210EED3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "interactivemonitorTopic5CA9BB6E": {
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "interactivemonitor3435C6C2",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "TopicBFC7AF6E",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "interactivemonitorgithubapp9777D674": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/interactive-monitor-github-app",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "ns1credentialsA8DD3B2D": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/ns1-credentials",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "obligatronA58CFCF1": {
      "DependsOn": [
        "obligatronServiceRoleDefaultPolicyC8AE10A2",
        "obligatronServiceRole1E85277A",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/obligatron/obligatron.zip",
        },
        "Environment": {
          "Variables": {
            "APP": "obligatron",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "Text",
        },
        "MemorySize": 4096,
        "Role": {
          "Fn::GetAtt": [
            "obligatronServiceRole1E85277A",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "obligatron",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "obligatronAWSVULNERABILITIES8E81FCF9": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'AWS_VULNERABILITIES' obligation",
        "ScheduleExpression": "cron(0 11 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""AWS_VULNERABILITIES"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronAWSVULNERABILITIESAllowEventRuleServiceCatalogueobligatron5BD5033E8F5FADB8": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronAWSVULNERABILITIES8E81FCF9",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "obligatronErrorPercentageAlarmForLambda8AFDF23F": {
      "Properties": {
        "ActionsEnabled": true,
        "AlarmActions": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:sns:",
                {
                  "Ref": "AWS::Region",
                },
                ":",
                {
                  "Ref": "AWS::AccountId",
                },
                ":devx-alerts",
              ],
            ],
          },
        ],
        "AlarmDescription": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "obligatronA58CFCF1",
              },
              " exceeded 0% error rate",
            ],
          ],
        },
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              "High error percentage from ",
              {
                "Ref": "obligatronA58CFCF1",
              },
              " lambda in TEST",
            ],
          ],
        },
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": 1,
        "Metrics": [
          {
            "Expression": "100*m1/m2",
            "Id": "expr_1",
            "Label": {
              "Fn::Join": [
                "",
                [
                  "Error % of ",
                  {
                    "Ref": "obligatronA58CFCF1",
                  },
                ],
              ],
            },
          },
          {
            "Id": "m1",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "obligatronA58CFCF1",
                    },
                  },
                ],
                "MetricName": "Errors",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
          {
            "Id": "m2",
            "MetricStat": {
              "Metric": {
                "Dimensions": [
                  {
                    "Name": "FunctionName",
                    "Value": {
                      "Ref": "obligatronA58CFCF1",
                    },
                  },
                ],
                "MetricName": "Invocations",
                "Namespace": "AWS/Lambda",
              },
              "Period": 60,
              "Stat": "Sum",
            },
            "ReturnData": false,
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Threshold": 0,
        "TreatMissingData": "notBreaching",
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "obligatronPRODUCTIONDEPENDENCIESAllowEventRuleServiceCatalogueobligatron5BD5033E5649B088": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronPRODUCTIONDEPENDENCIESC26096F0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "obligatronPRODUCTIONDEPENDENCIESC26096F0": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'PRODUCTION_DEPENDENCIES' obligation",
        "ScheduleExpression": "cron(0 10 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""PRODUCTION_DEPENDENCIES"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronServiceRole1E85277A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "obligatron",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "obligatronServiceRoleDefaultPolicyC8AE10A2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/obligatron/obligatron.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/obligatron",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/obligatron/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/obligatron",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "obligatronServiceRoleDefaultPolicyC8AE10A2",
        "Roles": [
          {
            "Ref": "obligatronServiceRole1E85277A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "obligatronTAGGING3F8E9BB2": {
      "Properties": {
        "Description": "Daily execution of Obligatron lambda for 'TAGGING' obligation",
        "ScheduleExpression": "cron(0 9 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "obligatronA58CFCF1",
                "Arn",
              ],
            },
            "Id": "Target0",
            "Input": ""TAGGING"",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "obligatronTAGGINGAllowEventRuleServiceCatalogueobligatron5BD5033EC1528439": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "obligatronA58CFCF1",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "obligatronTAGGING3F8E9BB2",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "prismamigratetaskTEST59D4C0E8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "prisma-migrate-task-TEST",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "prismamigratetaskTESTDefaultPolicy89E93F3F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                      },
                      "/deploy/TEST/service-catalogue-prisma-migrations/prisma.zip",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "prismamigratetaskTESTDefaultPolicy89E93F3F",
        "Roles": [
          {
            "Ref": "prismamigratetaskTEST59D4C0E8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "prismamigratetaskTaskDefinition6CE347DF": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Environment": [
              {
                "Name": "STACK",
                "Value": "deploy",
              },
              {
                "Name": "STAGE",
                "Value": "TEST",
              },
              {
                "Name": "APP",
                "Value": "prisma-migrate-task",
              },
              {
                "Name": "GU_REPO",
                "Value": "guardian/service-catalogue",
              },
            ],
            "Essential": true,
            "FirelensConfiguration": {
              "Type": "fluentbit",
            },
            "Image": "ghcr.io/guardian/devx-logs:2",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "prismamigratetaskTaskDefinitionprismamigratetaskFirelensLogGroupCD392728",
                },
                "awslogs-region": {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "deploy/TEST/prisma-migrate-task",
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/init",
                "ReadOnly": false,
                "SourceVolume": "firelens-volume",
              },
            ],
            "Name": "prisma-migrate-taskFirelens",
            "ReadonlyRootFilesystem": true,
          },
          {
            "DockerLabels": {
              "App": "prisma-migrate-task",
              "Stack": "deploy",
              "Stage": "TEST",
            },
            "Environment": [
              {
                "Name": "ARTIFACT_BUCKET",
                "Value": {
                  "Ref": "SsmParameterValueaccountservicesartifactbucketC96584B6F00A464EAD1953AFF4B05118Parameter",
                },
              },
              {
                "Name": "PRISMA_ARTIFACT_KEY",
                "Value": "deploy/TEST/service-catalogue-prisma-migrations/prisma.zip",
              },
            ],
            "Essential": true,
            "Image": "ghcr.io/guardian/service-catalogue/prisma-migrate:stable",
            "LogConfiguration": {
              "LogDriver": "awsfirelens",
              "Options": {
                "Name": "kinesis_streams",
                "region": {
                  "Ref": "AWS::Region",
                },
                "retry_limit": "2",
                "stream": {
                  "Ref": "LoggingStreamName",
                },
              },
            },
            "MountPoints": [
              {
                "ContainerPath": "/usr/src/app/prisma",
                "ReadOnly": false,
                "SourceVolume": "artifact-volume",
              },
            ],
            "Name": "prisma-migrate-taskContainer",
            "ReadonlyRootFilesystem": true,
            "Secrets": [
              {
                "Name": "DB_USERNAME",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":username::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_HOST",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":host::",
                    ],
                  ],
                },
              },
              {
                "Name": "DB_PASSWORD",
                "ValueFrom": {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                      },
                      ":password::",
                    ],
                  ],
                },
              },
            ],
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": {
          "Fn::GetAtt": [
            "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C",
            "Arn",
          ],
        },
        "Family": "ServiceCatalogueprismamigratetaskTaskDefinition92709D5F",
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "FARGATE",
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "prismamigratetaskTEST59D4C0E8",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "Name": "firelens-volume",
          },
          {
            "Name": "artifact-volume",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "prismamigratetaskTaskDefinitionEventsRole980BE1A4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "prismamigratetaskTaskDefinitionEventsRoleDefaultPolicyCC5EE80B": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:RunTask",
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Ref": "prismamigratetaskTaskDefinition6CE347DF",
              },
            },
            {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ecs:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":*:task/",
                    {
                      "Ref": "servicecatalogueCluster5FC34DC5",
                    },
                    "/*",
                  ],
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C",
                  "Arn",
                ],
              },
            },
            {
              "Action": "iam:PassRole",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "prismamigratetaskTEST59D4C0E8",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "prismamigratetaskTaskDefinitionEventsRoleDefaultPolicyCC5EE80B",
        "Roles": [
          {
            "Ref": "prismamigratetaskTaskDefinitionEventsRole980BE1A4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "prismamigratetaskTaskDefinitionExecutionRoleDefaultPolicyDA3DD97A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "prismamigratetaskTaskDefinitionprismamigratetaskFirelensLogGroupCD392728",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "prismamigratetaskTaskDefinitionExecutionRoleDefaultPolicyDA3DD97A",
        "Roles": [
          {
            "Ref": "prismamigratetaskTaskDefinitionExecutionRoleCA10E83C",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "prismamigratetaskTaskDefinitionprismamigratetaskFirelensLogGroupCD392728": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "RetentionInDays": 1,
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsCostExplorerTaskDefinitionD8C37FA589285154": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsCostExplorerContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsCostExplorerTaskDefinition62DC1A04",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsCostExplorerTaskDefinitionD8C37FA5AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944871E048DF": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsCostExplorerTaskDefinitionD8C37FA589285154",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionD9E19358AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944804BCC0B4": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionD9E19358DCB18522",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsDelegatedToSecurityAccountTaskDefinitionD9E19358DCB18522": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsDelegatedToSecurityAccountContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsDelegatedToSecurityAccountTaskDefinition8FFEB633",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsLambdaTaskDefinitionDAA42514AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448B3852359": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsLambdaTaskDefinitionDAA42514F1EF47FA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsLambdaTaskDefinitionDAA42514F1EF47FA": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsLambdaContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsLambdaTaskDefinitionD9609861",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsListOrgsTaskDefinition2D3A9A600599C2A0": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsListOrgsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsListOrgsTaskDefinition15F8AF14",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsListOrgsTaskDefinition2D3A9A60AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448B643483B": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsListOrgsTaskDefinition2D3A9A600599C2A0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinition59C11D9AA73E4306": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideAutoScalingGroupsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinitionA838A372",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinition59C11D9AAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448E326D7BD": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideAutoScalingGroupsTaskDefinition59C11D9AA73E4306",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideBackupTaskDefinitionC269FE04AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448E7D4F97D": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideBackupTaskDefinitionC269FE04F73DB427",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideBackupTaskDefinitionC269FE04F73DB427": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideBackupContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideBackupTaskDefinition91A7A518",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCertificatesTaskDefinition24CEF41EAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448EB48E93E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCertificatesTaskDefinition24CEF41EBCFEBF4C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCertificatesTaskDefinition24CEF41EBCFEBF4C": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideCertificatesContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideCertificatesTaskDefinitionD275457C",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCloudFormationTaskDefinition3044E3AC429D4FA0": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideCloudFormationContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideCloudFormationTaskDefinitionFE550760",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCloudFormationTaskDefinition3044E3ACAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94488A3427AC": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCloudFormationTaskDefinition3044E3AC429D4FA0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEDC746AE2E169362": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideCloudwatchAlarmsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinition1E4F26F4",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEDC746AEAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94488838469A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideCloudwatchAlarmsTaskDefinitionEDC746AE2E169362",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideDynamoDBTaskDefinition5F181D12945D102A": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideDynamoDBContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideDynamoDBTaskDefinition8C3ACD16",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideDynamoDBTaskDefinition5F181D12AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94488FBAC13A": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideDynamoDBTaskDefinition5F181D12945D102A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionBFD8578A41CCA798": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideEc2ImagesContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideEc2ImagesTaskDefinition10C34618",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionBFD8578AAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448E5F187E2": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideEc2ImagesTaskDefinitionBFD8578A41CCA798",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideEc2TaskDefinitionBBF19A7E56A0E5BB": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideEc2Container",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideEc2TaskDefinition8CC129B6",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideEc2TaskDefinitionBBF19A7EAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944889C189EC": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideEc2TaskDefinitionBBF19A7E56A0E5BB",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition3443A1FAA1A9FC8A": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideIamCredentialReportsContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition7300D1E2",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition3443A1FAAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE9448A4775AD0": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideIamCredentialReportsTaskDefinition3443A1FAA1A9FC8A",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionA0D1BDA3AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944890D99406": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionA0D1BDA3F3FB92EC",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideLoadBalancersTaskDefinitionA0D1BDA3F3FB92EC": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideLoadBalancersContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideLoadBalancersTaskDefinition333F61F5",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideRDSTaskDefinition222E5C6AAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944861B51720": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideRDSTaskDefinition222E5C6AEFE0A57D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideRDSTaskDefinition222E5C6AEFE0A57D": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideRDSContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideRDSTaskDefinitionB16F3CC7",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideS3TaskDefinition6734443A7D858435": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsOrgWideS3Container",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsOrgWideS3TaskDefinitionAF066748",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideS3TaskDefinition6734443AAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE94483DC47EE3": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsOrgWideS3TaskDefinition6734443A7D858435",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsRemainingDataTaskDefinition14D0B33A8780E691": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsRemainingDataContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsRemainingDataTaskDefinitionF2586400",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsRemainingDataTaskDefinition14D0B33AAllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944883F8E339": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsRemainingDataTaskDefinition14D0B33A8780E691",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsSSMParametersTaskDefinitionA4223CD9A3C673AA": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "clusterArn": [
              {
                "Fn::GetAtt": [
                  "servicecatalogueCluster5FC34DC5",
                  "Arn",
                ],
              },
            ],
            "containers.exitCode": [
              {
                "numeric": [
                  "=",
                  0,
                ],
              },
            ],
            "containers.name": [
              "CloudquerySource-AwsSSMParametersContainer",
            ],
            "lastStatus": [
              "STOPPED",
            ],
            "stopCode": [
              "EssentialContainerExited",
            ],
            "taskDefinitionArn": [
              {
                "Ref": "CloudquerySourceAwsSSMParametersTaskDefinitionD2F49BC2",
              },
            ],
          },
          "detail-type": [
            "ECS Task State Change",
          ],
          "source": [
            "aws.ecs",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RefreshMaterializedViewF0E38938",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsSSMParametersTaskDefinitionA4223CD9AllowEventRuleServiceCatalogueRefreshMaterializedViewA9EE944825482298": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RefreshMaterializedViewF0E38938",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "refreshmaterializedviewlambdatriggerServiceCatalogueCloudquerySourceAwsSSMParametersTaskDefinitionA4223CD9A3C673AA",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "repocop20553EB8": {
      "DependsOn": [
        "repocopServiceRoleDefaultPolicyF20BF625",
        "repocopServiceRole757D74E8",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Ref": "DistributionBucketName",
          },
          "S3Key": "deploy/TEST/repocop/repocop.zip",
        },
        "Environment": {
          "Variables": {
            "ANGHAMMARAD_SNS_ARN": {
              "Ref": "AnghammaradSnsArn",
            },
            "APP": "repocop",
            "DATABASE_HOSTNAME": {
              "Fn::GetAtt": [
                "PostgresInstance16DE4286E",
                "Endpoint.Address",
              ],
            },
            "DEPENDENCY_GRAPH_INPUT_TOPIC_ARN": {
              "Ref": "dependencygraphintegratorinputtopicTESTDAA73A88",
            },
            "GITHUB_APP_SECRET": {
              "Ref": "repocopgithubappauthFDE18F33",
            },
            "GITHUB_ORG": "guardian",
            "INTERACTIVES_COUNT": "3",
            "INTERACTIVE_MONITOR_TOPIC_ARN": {
              "Ref": "TopicBFC7AF6E",
            },
            "QUERY_LOGGING": "false",
            "STACK": "deploy",
            "STAGE": "TEST",
          },
        },
        "Handler": "index.main",
        "LoggingConfig": {
          "LogFormat": "JSON",
        },
        "MemorySize": 2048,
        "Role": {
          "Fn::GetAtt": [
            "repocopServiceRole757D74E8",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Tags": [
          {
            "Key": "App",
            "Value": "repocop",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
        "Timeout": 300,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "PostgresAccessSecurityGroupServicecatalogue03C78F14",
                "GroupId",
              ],
            },
          ],
          "SubnetIds": {
            "Ref": "PrivateSubnets",
          },
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "repocopServiceRole757D74E8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "App",
            "Value": "repocop",
          },
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "repocopServiceRoleDefaultPolicyF20BF625": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      {
                        "Ref": "DistributionBucketName",
                      },
                      "/deploy/TEST/repocop/repocop.zip",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "ssm:GetParametersByPath",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/repocop",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ssm:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":parameter/TEST/deploy/repocop/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/repocop",
                  ],
                ],
              },
            },
            {
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:DescribeSecret",
              ],
              "Effect": "Allow",
              "Resource": {
                "Ref": "repocopgithubappauthFDE18F33",
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "AnghammaradSnsArn",
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "TopicBFC7AF6E",
              },
            },
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "dependencygraphintegratorinputtopicTESTDAA73A88",
              },
            },
            {
              "Action": "cloudwatch:PutMetricData",
              "Condition": {
                "StringEquals": {
                  "cloudwatch:namespace": "repocop",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "repocopServiceRoleDefaultPolicyF20BF625",
        "Roles": [
          {
            "Ref": "repocopServiceRole757D74E8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "repocopgithubappauthFDE18F33": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "GenerateSecretString": {},
        "Name": "/TEST/deploy/service-catalogue/repocop-github-app-secret",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::SecretsManager::Secret",
      "UpdateReplacePolicy": "Delete",
    },
    "repocoprepocopcron03MONFRI0AllowEventRuleServiceCataloguerepocop7BEB5892318F26C8": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "repocop20553EB8",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "repocoprepocopcron03MONFRI0E07FE560",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "repocoprepocopcron03MONFRI0E07FE560": {
      "Properties": {
        "ScheduleExpression": "cron(0 3 ? * MON-FRI *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "repocop20553EB8",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "servicecatalogueCluster5FC34DC5": {
      "Properties": {
        "ClusterSettings": [
          {
            "Name": "containerInsights",
            "Value": "enabled",
          },
        ],
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::ECS::Cluster",
    },
    "servicecatalogueClusterAF65BC89": {
      "Properties": {
        "CapacityProviders": [
          "FARGATE",
          "FARGATE_SPOT",
        ],
        "Cluster": {
          "Ref": "servicecatalogueCluster5FC34DC5",
        },
        "DefaultCapacityProviderStrategy": [],
      },
      "Type": "AWS::ECS::ClusterCapacityProviderAssociations",
    },
    "servicecatalogueTESTtaskAmigoBakePackagesDefaultPolicy1351FB30": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:BatchGetItem",
                "dynamodb:Query",
                "dynamodb:Scan",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":000000000018:table/amigo-TEST-base-images",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":000000000018:table/amigo-TEST-recipes",
                    ],
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      {
                        "Ref": "AWS::Region",
                      },
                      ":000000000018:table/amigo-TEST-bakes",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":s3:::",
                    {
                      "Ref": "packagesBucketNameParam",
                    },
                    "/packagelists/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAmigoBakePackagesDefaultPolicy1351FB30",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAmigoBakePackagesE3F44845",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAmigoBakePackagesE3F44845": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AmigoBakePackages",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsCostExplorer78777A06": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsCostExplorer",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsCostExplorerDefaultPolicy66D41050": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsCostExplorerDefaultPolicy66D41050",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsCostExplorer78777A06",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsDelegatedToSecurityAccountDefaultPolicyA9D90C4A": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::000000000015:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsDelegatedToSecurityAccountDefaultPolicyA9D90C4A",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsDelegatedToSecurityAccountEDD7C370",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsDelegatedToSecurityAccountEDD7C370": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsDelegatedToSecurityAccount",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsLambda20C12A7D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsLambda",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsLambdaDefaultPolicy26B73122": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsLambdaDefaultPolicy26B73122",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsLambda20C12A7D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsListOrgsA233C9DF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsListOrgs",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsListOrgsDefaultPolicy98DE286C": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::000000000018:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsListOrgsDefaultPolicy98DE286C",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsListOrgsA233C9DF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideAutoScalingGroups721C2374": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideAutoScalingGroups",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideAutoScalingGroupsDefaultPolicy66CC3A66": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideAutoScalingGroupsDefaultPolicy66CC3A66",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideAutoScalingGroups721C2374",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideBackupB0D1DA08": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideBackup",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideBackupDefaultPolicyE4971509": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideBackupDefaultPolicyE4971509",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideBackupB0D1DA08",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideCertificates496AB720": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideCertificates",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideCertificatesDefaultPolicyA76AB85E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideCertificatesDefaultPolicyA76AB85E",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideCertificates496AB720",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideCloudFormationDefaultPolicyC6DDC1EE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideCloudFormationDefaultPolicyC6DDC1EE",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideCloudFormationEFD12D82",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideCloudFormationEFD12D82": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideCloudFormation",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideCloudwatchAlarms5ED2B988": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideCloudwatchAlarms",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideCloudwatchAlarmsDefaultPolicyE63ADC62": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideCloudwatchAlarmsDefaultPolicyE63ADC62",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideCloudwatchAlarms5ED2B988",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideDynamoDBB67BC817": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideDynamoDB",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideDynamoDBDefaultPolicyBA1BA2FD": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideDynamoDBDefaultPolicyBA1BA2FD",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideDynamoDBB67BC817",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideEc2D13594C5": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideEc2",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideEc2DefaultPolicy1C5BAC75": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:ListTasks",
              "Condition": {
                "StringEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideEc2DefaultPolicy1C5BAC75",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideEc2D13594C5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideEc2ImagesACFD7DAC": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideEc2Images",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideEc2ImagesDefaultPolicy04D66786": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ecs:ListTasks",
              "Condition": {
                "StringEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "servicecatalogueCluster5FC34DC5",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideEc2ImagesDefaultPolicy04D66786",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideEc2ImagesACFD7DAC",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideIamCredentialReportsD1A28FD6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideIamCredentialReports",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideIamCredentialReportsDefaultPolicyE758C2C8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideIamCredentialReportsDefaultPolicyE758C2C8",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideIamCredentialReportsD1A28FD6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideLoadBalancersB565C247": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideLoadBalancers",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideLoadBalancersDefaultPolicy163328CB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideLoadBalancersDefaultPolicy163328CB",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideLoadBalancersB565C247",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideRDS1CE08EDD": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideRDS",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideRDSDefaultPolicyB5394D47": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideRDSDefaultPolicyB5394D47",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideRDS1CE08EDD",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsOrgWideS38AEB5180": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsOrgWideS3",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsOrgWideS3DefaultPolicyB9F15CA7": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsOrgWideS3DefaultPolicyB9F15CA7",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsOrgWideS38AEB5180",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsRemainingData673BE318": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsRemainingData",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsRemainingDataDefaultPolicy82162373": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsRemainingDataDefaultPolicy82162373",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsRemainingData673BE318",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskAwsSSMParameters3BFA609D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-AwsSSMParameters",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskAwsSSMParametersDefaultPolicy71BDCAC2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "organizations:List*",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": "arn:aws:iam::*:role/cloudquery-access",
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskAwsSSMParametersDefaultPolicy71BDCAC2",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskAwsSSMParameters3BFA609D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskEndOfLifeD8A11AC8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-EndOfLife",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskEndOfLifeDefaultPolicyC7574D14": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskEndOfLifeDefaultPolicyC7574D14",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskEndOfLifeD8A11AC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskFastlyServices33D5467F": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-FastlyServices",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskFastlyServicesDefaultPolicy67F26FAB": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskFastlyServicesDefaultPolicy67F26FAB",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskFastlyServices33D5467F",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskGalaxiesDBF8C9E4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-Galaxies",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskGalaxiesDefaultPolicyA9F27B2E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "s3:GetObject",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    {
                      "Ref": "ActionsStaticSiteBucketArnParam",
                    },
                    "/galaxies.gutools.co.uk/data/*",
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskGalaxiesDefaultPolicyA9F27B2E",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskGalaxiesDBF8C9E4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskGitHubIssues1EFFA3D3": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-GitHubIssues",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskGitHubIssuesDefaultPolicy217DF3BE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskGitHubIssuesDefaultPolicy217DF3BE",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskGitHubIssues1EFFA3D3",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskGitHubLanguagesDefaultPolicy2DFED7A8": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskGitHubLanguagesDefaultPolicy2DFED7A8",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskGitHubLanguagesED141D27",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskGitHubLanguagesED141D27": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-GitHubLanguages",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskGitHubRepositories83F97F25": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-GitHubRepositories",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskGitHubRepositoriesDefaultPolicy13E9E433": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskGitHubRepositoriesDefaultPolicy13E9E433",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskGitHubRepositories83F97F25",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskGitHubTeams5756A4ED": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-GitHubTeams",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskGitHubTeamsDefaultPolicy66F9D1C0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskGitHubTeamsDefaultPolicy66F9D1C0",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskGitHubTeams5756A4ED",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskNS1B2D0D4B7": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-NS1",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskNS1DefaultPolicy0726C0D1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskNS1DefaultPolicy0726C0D1",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskNS1B2D0D4B7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "servicecatalogueTESTtaskRiffRaffDataC9A39FC8": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/AWSXrayWriteOnlyAccess",
              ],
            ],
          },
        ],
        "RoleName": "service-catalogue-TEST-task-RiffRaffData",
        "Tags": [
          {
            "Key": "gu:cdk:version",
            "Value": "TEST",
          },
          {
            "Key": "gu:repo",
            "Value": "guardian/service-catalogue",
          },
          {
            "Key": "Stack",
            "Value": "deploy",
          },
          {
            "Key": "Stage",
            "Value": "TEST",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "servicecatalogueTESTtaskRiffRaffDataDefaultPolicyC2B59227": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "kinesis:Describe*",
                "kinesis:Put*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":kinesis:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stream/",
                    {
                      "Ref": "LoggingStreamName",
                    },
                  ],
                ],
              },
            },
            {
              "Action": "rds-db:connect",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":rds-db:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":dbuser:",
                    {
                      "Fn::GetAtt": [
                        "PostgresInstance16DE4286E",
                        "DbiResourceId",
                      ],
                    },
                    "/{{resolve:secretsmanager:",
                    {
                      "Ref": "PostgresInstance1SecretAttachmentBA0D257D",
                    },
                    ":SecretString:username::}}",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "servicecatalogueTESTtaskRiffRaffDataDefaultPolicyC2B59227",
        "Roles": [
          {
            "Ref": "servicecatalogueTESTtaskRiffRaffDataC9A39FC8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
}
`;
